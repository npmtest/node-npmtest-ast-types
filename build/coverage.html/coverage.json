{"/home/travis/build/npmtest/node-npmtest-ast-types/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_ast_types */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - init-after","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - init-after","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/lib.npmtest_ast_types.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/lib.npmtest_ast_types.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":54}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":60}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_ast_types */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_ast_types = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_ast_types = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":53}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":67},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-ast-types && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_ast_types */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_ast_types","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // init-after","    // run browser js-env code - init-after","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_ast_types.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_ast_types.rollup.js'] =","            local.assetsDict['/assets.npmtest_ast_types.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_ast_types.__dirname + '/lib.npmtest_ast_types.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/main.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/main.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":17,"column":3}}},"branchMap":{},"code":["module.exports = require('./fork')([","    // This core module of AST types captures ES5 as it is parsed today by","    // git://github.com/ariya/esprima.git#master.","    require(\"./def/core\"),","","    // Feel free to add to or remove from this list of extension modules to","    // configure the precise type hierarchy that you need.","    require(\"./def/es6\"),","    require(\"./def/es7\"),","    require(\"./def/mozilla\"),","    require(\"./def/e4x\"),","    require(\"./def/jsx\"),","    require(\"./def/flow\"),","    require(\"./def/esprima\"),","    require(\"./def/babel\"),","    require(\"./def/babel6\")","]);",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/fork.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/fork.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":54,"7":54,"8":18,"9":18,"10":18,"11":54,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1},"b":{"1":[18,36]},"f":{"1":1,"2":54},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}},"2":{"name":"use","line":6,"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":25}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":46,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":18}},"3":{"start":{"line":3,"column":4},"end":{"line":3,"column":24}},"4":{"start":{"line":4,"column":4},"end":{"line":4,"column":18}},"5":{"start":{"line":6,"column":4},"end":{"line":14,"column":5}},"6":{"start":{"line":7,"column":8},"end":{"line":7,"column":39}},"7":{"start":{"line":8,"column":8},"end":{"line":12,"column":9}},"8":{"start":{"line":9,"column":12},"end":{"line":9,"column":30}},"9":{"start":{"line":10,"column":12},"end":{"line":10,"column":30}},"10":{"start":{"line":11,"column":12},"end":{"line":11,"column":43}},"11":{"start":{"line":13,"column":8},"end":{"line":13,"column":31}},"12":{"start":{"line":16,"column":4},"end":{"line":16,"column":19}},"13":{"start":{"line":18,"column":4},"end":{"line":18,"column":44}},"14":{"start":{"line":20,"column":4},"end":{"line":20,"column":22}},"15":{"start":{"line":22,"column":4},"end":{"line":22,"column":21}},"16":{"start":{"line":24,"column":4},"end":{"line":41,"column":6}},"17":{"start":{"line":43,"column":4},"end":{"line":43,"column":46}},"18":{"start":{"line":45,"column":4},"end":{"line":45,"column":19}}},"branchMap":{"1":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":8},"end":{"line":8,"column":8}},{"start":{"line":8,"column":8},"end":{"line":8,"column":8}}]}},"code":["module.exports = function (defs) {","    var used = [];","    var usedResult = [];","    var fork = {};","","    function use(plugin) {","        var idx = used.indexOf(plugin);","        if (idx === -1) {","            idx = used.length;","            used.push(plugin);","            usedResult[idx] = plugin(fork);","        }","        return usedResult[idx];","    }","","    fork.use = use;","","    var types = use(require('./lib/types'));","","    defs.forEach(use);","","    types.finalize();","","    var exports = {","        Type: types.Type,","        builtInTypes: types.builtInTypes,","        namedTypes: types.namedTypes,","        builders: types.builders,","        defineMethod: types.defineMethod,","        getFieldNames: types.getFieldNames,","        getFieldValue: types.getFieldValue,","        eachField: types.eachField,","        someField: types.someField,","        getSupertypeNames: types.getSupertypeNames,","        astNodesAreEquivalent: use(require(\"./lib/equiv\")),","        finalize: types.finalize,","        Path: use(require('./lib/path')),","        NodePath: use(require(\"./lib/node-path\")),","        PathVisitor: use(require(\"./lib/path-visitor\")),","        use: use","    };","","    exports.visit = exports.PathVisitor.visit;","","    return exports;","};"],"l":{"1":1,"2":1,"3":1,"4":1,"6":1,"7":54,"8":54,"9":18,"10":18,"11":18,"13":54,"16":1,"18":1,"20":1,"22":1,"24":1,"43":1,"45":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/core.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/core.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":0,"30":0,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":0,"63":0,"64":0,"65":0,"66":1,"67":1,"68":1,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}},"2":{"name":"(anonymous_2)","line":122,"loc":{"start":{"line":122,"column":56},"end":{"line":122,"column":68}}},"3":{"name":"(anonymous_3)","line":125,"loc":{"start":{"line":125,"column":49},"end":{"line":125,"column":61}}},"4":{"name":"(anonymous_4)","line":310,"loc":{"start":{"line":310,"column":36},"end":{"line":310,"column":48}}},"5":{"name":"(anonymous_5)","line":342,"loc":{"start":{"line":342,"column":18},"end":{"line":342,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":370,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":50}},"3":{"start":{"line":3,"column":4},"end":{"line":3,"column":26}},"4":{"start":{"line":4,"column":4},"end":{"line":4,"column":23}},"5":{"start":{"line":5,"column":4},"end":{"line":5,"column":21}},"6":{"start":{"line":6,"column":4},"end":{"line":6,"column":52}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":35}},"8":{"start":{"line":8,"column":4},"end":{"line":8,"column":25}},"9":{"start":{"line":12,"column":4},"end":{"line":16,"column":35}},"10":{"start":{"line":18,"column":4},"end":{"line":24,"column":35}},"11":{"start":{"line":26,"column":4},"end":{"line":30,"column":61}},"12":{"start":{"line":32,"column":4},"end":{"line":35,"column":33}},"13":{"start":{"line":37,"column":4},"end":{"line":41,"column":59}},"14":{"start":{"line":43,"column":4},"end":{"line":46,"column":43}},"15":{"start":{"line":48,"column":4},"end":{"line":52,"column":46}},"16":{"start":{"line":54,"column":4},"end":{"line":54,"column":35}},"17":{"start":{"line":58,"column":4},"end":{"line":58,"column":53}},"18":{"start":{"line":60,"column":4},"end":{"line":63,"column":43}},"19":{"start":{"line":67,"column":4},"end":{"line":70,"column":48}},"20":{"start":{"line":72,"column":4},"end":{"line":77,"column":74}},"21":{"start":{"line":79,"column":4},"end":{"line":83,"column":41}},"22":{"start":{"line":85,"column":4},"end":{"line":88,"column":71}},"23":{"start":{"line":90,"column":4},"end":{"line":93,"column":71}},"24":{"start":{"line":95,"column":4},"end":{"line":99,"column":41}},"25":{"start":{"line":101,"column":4},"end":{"line":106,"column":54}},"26":{"start":{"line":108,"column":4},"end":{"line":111,"column":56}},"27":{"start":{"line":113,"column":4},"end":{"line":116,"column":46}},"28":{"start":{"line":118,"column":4},"end":{"line":129,"column":79}},"29":{"start":{"line":123,"column":12},"end":{"line":123,"column":61}},"30":{"start":{"line":126,"column":12},"end":{"line":126,"column":54}},"31":{"start":{"line":131,"column":4},"end":{"line":136,"column":46}},"32":{"start":{"line":138,"column":4},"end":{"line":142,"column":41}},"33":{"start":{"line":144,"column":4},"end":{"line":148,"column":42}},"34":{"start":{"line":150,"column":4},"end":{"line":159,"column":41}},"35":{"start":{"line":161,"column":4},"end":{"line":168,"column":41}},"36":{"start":{"line":170,"column":4},"end":{"line":170,"column":56}},"37":{"start":{"line":172,"column":4},"end":{"line":172,"column":42}},"38":{"start":{"line":174,"column":4},"end":{"line":177,"column":40}},"39":{"start":{"line":179,"column":4},"end":{"line":181,"column":39}},"40":{"start":{"line":183,"column":4},"end":{"line":187,"column":60}},"41":{"start":{"line":189,"column":4},"end":{"line":193,"column":52}},"42":{"start":{"line":196,"column":4},"end":{"line":196,"column":47}},"43":{"start":{"line":198,"column":4},"end":{"line":198,"column":54}},"44":{"start":{"line":200,"column":4},"end":{"line":203,"column":58}},"45":{"start":{"line":205,"column":4},"end":{"line":208,"column":48}},"46":{"start":{"line":211,"column":4},"end":{"line":216,"column":43}},"47":{"start":{"line":218,"column":4},"end":{"line":221,"column":51}},"48":{"start":{"line":223,"column":4},"end":{"line":225,"column":36}},"49":{"start":{"line":227,"column":4},"end":{"line":234,"column":52}},"50":{"start":{"line":236,"column":4},"end":{"line":243,"column":28}},"51":{"start":{"line":245,"column":4},"end":{"line":250,"column":43}},"52":{"start":{"line":252,"column":4},"end":{"line":255,"column":26}},"53":{"start":{"line":257,"column":4},"end":{"line":262,"column":43}},"54":{"start":{"line":264,"column":4},"end":{"line":264,"column":40}},"55":{"start":{"line":266,"column":4},"end":{"line":271,"column":34}},"56":{"start":{"line":273,"column":4},"end":{"line":273,"column":41}},"57":{"start":{"line":275,"column":4},"end":{"line":280,"column":43}},"58":{"start":{"line":282,"column":4},"end":{"line":287,"column":47}},"59":{"start":{"line":289,"column":4},"end":{"line":296,"column":49}},"60":{"start":{"line":298,"column":4},"end":{"line":303,"column":49}},"61":{"start":{"line":305,"column":4},"end":{"line":318,"column":11}},"62":{"start":{"line":311,"column":12},"end":{"line":311,"column":42}},"63":{"start":{"line":312,"column":12},"end":{"line":316,"column":13}},"64":{"start":{"line":315,"column":16},"end":{"line":315,"column":28}},"65":{"start":{"line":317,"column":12},"end":{"line":317,"column":25}},"66":{"start":{"line":320,"column":4},"end":{"line":320,"column":33}},"67":{"start":{"line":322,"column":4},"end":{"line":326,"column":49}},"68":{"start":{"line":328,"column":4},"end":{"line":332,"column":31}},"69":{"start":{"line":334,"column":4},"end":{"line":357,"column":11}},"70":{"start":{"line":343,"column":12},"end":{"line":354,"column":13}},"71":{"start":{"line":344,"column":16},"end":{"line":344,"column":31}},"72":{"start":{"line":346,"column":16},"end":{"line":346,"column":56}},"73":{"start":{"line":346,"column":43},"end":{"line":346,"column":56}},"74":{"start":{"line":347,"column":16},"end":{"line":347,"column":55}},"75":{"start":{"line":347,"column":42},"end":{"line":347,"column":55}},"76":{"start":{"line":348,"column":16},"end":{"line":348,"column":52}},"77":{"start":{"line":348,"column":39},"end":{"line":348,"column":52}},"78":{"start":{"line":350,"column":16},"end":{"line":353,"column":18}},"79":{"start":{"line":356,"column":12},"end":{"line":356,"column":24}},"80":{"start":{"line":360,"column":4},"end":{"line":369,"column":55}}},"branchMap":{"1":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":19},"end":{"line":123,"column":32}},{"start":{"line":123,"column":36},"end":{"line":123,"column":52}},{"start":{"line":123,"column":56},"end":{"line":123,"column":60}}]},"2":{"line":126,"type":"cond-expr","locations":[{"start":{"line":126,"column":34},"end":{"line":126,"column":48}},{"start":{"line":126,"column":51},"end":{"line":126,"column":53}}]},"3":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":12},"end":{"line":312,"column":12}},{"start":{"line":312,"column":12},"end":{"line":312,"column":12}}]},"4":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":16},"end":{"line":312,"column":34}},{"start":{"line":313,"column":16},"end":{"line":313,"column":43}},{"start":{"line":314,"column":16},"end":{"line":314,"column":43}}]},"5":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":12},"end":{"line":343,"column":12}},{"start":{"line":343,"column":12},"end":{"line":343,"column":12}}]},"6":{"line":346,"type":"if","locations":[{"start":{"line":346,"column":16},"end":{"line":346,"column":16}},{"start":{"line":346,"column":16},"end":{"line":346,"column":16}}]},"7":{"line":347,"type":"if","locations":[{"start":{"line":347,"column":16},"end":{"line":347,"column":16}},{"start":{"line":347,"column":16},"end":{"line":347,"column":16}}]},"8":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":16},"end":{"line":348,"column":16}},{"start":{"line":348,"column":16},"end":{"line":348,"column":16}}]}},"code":["module.exports = function (fork) {","    var types = fork.use(require(\"../lib/types\"));","    var Type = types.Type;","    var def = Type.def;","    var or = Type.or;","    var shared = fork.use(require(\"../lib/shared\"));","    var defaults = shared.defaults;","    var geq = shared.geq;","","    // Abstract supertype of all syntactic entities that are allowed to have a","    // .loc field.","    def(\"Printable\")","        .field(\"loc\", or(","            def(\"SourceLocation\"),","            null","        ), defaults[\"null\"], true);","","    def(\"Node\")","        .bases(\"Printable\")","        .field(\"type\", String)","        .field(\"comments\", or(","            [def(\"Comment\")],","            null","        ), defaults[\"null\"], true);","","    def(\"SourceLocation\")","        .build(\"start\", \"end\", \"source\")","        .field(\"start\", def(\"Position\"))","        .field(\"end\", def(\"Position\"))","        .field(\"source\", or(String, null), defaults[\"null\"]);","","    def(\"Position\")","        .build(\"line\", \"column\")","        .field(\"line\", geq(1))","        .field(\"column\", geq(0));","","    def(\"File\")","        .bases(\"Node\")","        .build(\"program\", \"name\")","        .field(\"program\", def(\"Program\"))","        .field(\"name\", or(String, null), defaults[\"null\"]);","","    def(\"Program\")","        .bases(\"Node\")","        .build(\"body\")","        .field(\"body\", [def(\"Statement\")]);","","    def(\"Function\")","        .bases(\"Node\")","        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])","        .field(\"params\", [def(\"Pattern\")])","        .field(\"body\", def(\"BlockStatement\"));","","    def(\"Statement\").bases(\"Node\");","","// The empty .build() here means that an EmptyStatement can be constructed","// (i.e. it's not abstract) but that it needs no arguments.","    def(\"EmptyStatement\").bases(\"Statement\").build();","","    def(\"BlockStatement\")","        .bases(\"Statement\")","        .build(\"body\")","        .field(\"body\", [def(\"Statement\")]);","","    // TODO Figure out how to silently coerce Expressions to","    // ExpressionStatements where a Statement was expected.","    def(\"ExpressionStatement\")","        .bases(\"Statement\")","        .build(\"expression\")","        .field(\"expression\", def(\"Expression\"));","","    def(\"IfStatement\")","        .bases(\"Statement\")","        .build(\"test\", \"consequent\", \"alternate\")","        .field(\"test\", def(\"Expression\"))","        .field(\"consequent\", def(\"Statement\"))","        .field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);","","    def(\"LabeledStatement\")","        .bases(\"Statement\")","        .build(\"label\", \"body\")","        .field(\"label\", def(\"Identifier\"))","        .field(\"body\", def(\"Statement\"));","","    def(\"BreakStatement\")","        .bases(\"Statement\")","        .build(\"label\")","        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);","","    def(\"ContinueStatement\")","        .bases(\"Statement\")","        .build(\"label\")","        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);","","    def(\"WithStatement\")","        .bases(\"Statement\")","        .build(\"object\", \"body\")","        .field(\"object\", def(\"Expression\"))","        .field(\"body\", def(\"Statement\"));","","    def(\"SwitchStatement\")","        .bases(\"Statement\")","        .build(\"discriminant\", \"cases\", \"lexical\")","        .field(\"discriminant\", def(\"Expression\"))","        .field(\"cases\", [def(\"SwitchCase\")])","        .field(\"lexical\", Boolean, defaults[\"false\"]);","","    def(\"ReturnStatement\")","        .bases(\"Statement\")","        .build(\"argument\")","        .field(\"argument\", or(def(\"Expression\"), null));","","    def(\"ThrowStatement\")","        .bases(\"Statement\")","        .build(\"argument\")","        .field(\"argument\", def(\"Expression\"));","","    def(\"TryStatement\")","        .bases(\"Statement\")","        .build(\"block\", \"handler\", \"finalizer\")","        .field(\"block\", def(\"BlockStatement\"))","        .field(\"handler\", or(def(\"CatchClause\"), null), function () {","            return this.handlers && this.handlers[0] || null;","        })","        .field(\"handlers\", [def(\"CatchClause\")], function () {","            return this.handler ? [this.handler] : [];","        }, true) // Indicates this field is hidden from eachField iteration.","        .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray)","        .field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);","","    def(\"CatchClause\")","        .bases(\"Node\")","        .build(\"param\", \"guard\", \"body\")","        .field(\"param\", def(\"Pattern\"))","        .field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"])","        .field(\"body\", def(\"BlockStatement\"));","","    def(\"WhileStatement\")","        .bases(\"Statement\")","        .build(\"test\", \"body\")","        .field(\"test\", def(\"Expression\"))","        .field(\"body\", def(\"Statement\"));","","    def(\"DoWhileStatement\")","        .bases(\"Statement\")","        .build(\"body\", \"test\")","        .field(\"body\", def(\"Statement\"))","        .field(\"test\", def(\"Expression\"));","","    def(\"ForStatement\")","        .bases(\"Statement\")","        .build(\"init\", \"test\", \"update\", \"body\")","        .field(\"init\", or(","            def(\"VariableDeclaration\"),","            def(\"Expression\"),","            null))","        .field(\"test\", or(def(\"Expression\"), null))","        .field(\"update\", or(def(\"Expression\"), null))","        .field(\"body\", def(\"Statement\"));","","    def(\"ForInStatement\")","        .bases(\"Statement\")","        .build(\"left\", \"right\", \"body\")","        .field(\"left\", or(","            def(\"VariableDeclaration\"),","            def(\"Expression\")))","        .field(\"right\", def(\"Expression\"))","        .field(\"body\", def(\"Statement\"));","","    def(\"DebuggerStatement\").bases(\"Statement\").build();","","    def(\"Declaration\").bases(\"Statement\");","","    def(\"FunctionDeclaration\")","        .bases(\"Function\", \"Declaration\")","        .build(\"id\", \"params\", \"body\")","        .field(\"id\", def(\"Identifier\"));","","    def(\"FunctionExpression\")","        .bases(\"Function\", \"Expression\")","        .build(\"id\", \"params\", \"body\");","","    def(\"VariableDeclaration\")","        .bases(\"Declaration\")","        .build(\"kind\", \"declarations\")","        .field(\"kind\", or(\"var\", \"let\", \"const\"))","        .field(\"declarations\", [def(\"VariableDeclarator\")]);","","    def(\"VariableDeclarator\")","        .bases(\"Node\")","        .build(\"id\", \"init\")","        .field(\"id\", def(\"Pattern\"))","        .field(\"init\", or(def(\"Expression\"), null));","","    // TODO Are all Expressions really Patterns?","    def(\"Expression\").bases(\"Node\", \"Pattern\");","","    def(\"ThisExpression\").bases(\"Expression\").build();","","    def(\"ArrayExpression\")","        .bases(\"Expression\")","        .build(\"elements\")","        .field(\"elements\", [or(def(\"Expression\"), null)]);","","    def(\"ObjectExpression\")","        .bases(\"Expression\")","        .build(\"properties\")","        .field(\"properties\", [def(\"Property\")]);","","    // TODO Not in the Mozilla Parser API, but used by Esprima.","    def(\"Property\")","        .bases(\"Node\") // Want to be able to visit Property Nodes.","        .build(\"kind\", \"key\", \"value\")","        .field(\"kind\", or(\"init\", \"get\", \"set\"))","        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))","        .field(\"value\", def(\"Expression\"));","","    def(\"SequenceExpression\")","        .bases(\"Expression\")","        .build(\"expressions\")","        .field(\"expressions\", [def(\"Expression\")]);","","    var UnaryOperator = or(","        \"-\", \"+\", \"!\", \"~\",","        \"typeof\", \"void\", \"delete\");","","    def(\"UnaryExpression\")","        .bases(\"Expression\")","        .build(\"operator\", \"argument\", \"prefix\")","        .field(\"operator\", UnaryOperator)","        .field(\"argument\", def(\"Expression\"))","        // Esprima doesn't bother with this field, presumably because it's","        // always true for unary operators.","        .field(\"prefix\", Boolean, defaults[\"true\"]);","","    var BinaryOperator = or(","        \"==\", \"!=\", \"===\", \"!==\",","        \"<\", \"<=\", \">\", \">=\",","        \"<<\", \">>\", \">>>\",","        \"+\", \"-\", \"*\", \"/\", \"%\",","        \"&\", // TODO Missing from the Parser API.","        \"|\", \"^\", \"in\",","        \"instanceof\", \"..\");","","    def(\"BinaryExpression\")","        .bases(\"Expression\")","        .build(\"operator\", \"left\", \"right\")","        .field(\"operator\", BinaryOperator)","        .field(\"left\", def(\"Expression\"))","        .field(\"right\", def(\"Expression\"));","","    var AssignmentOperator = or(","        \"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\",","        \"<<=\", \">>=\", \">>>=\",","        \"|=\", \"^=\", \"&=\");","","    def(\"AssignmentExpression\")","        .bases(\"Expression\")","        .build(\"operator\", \"left\", \"right\")","        .field(\"operator\", AssignmentOperator)","        .field(\"left\", def(\"Pattern\"))","        .field(\"right\", def(\"Expression\"));","","    var UpdateOperator = or(\"++\", \"--\");","","    def(\"UpdateExpression\")","        .bases(\"Expression\")","        .build(\"operator\", \"argument\", \"prefix\")","        .field(\"operator\", UpdateOperator)","        .field(\"argument\", def(\"Expression\"))","        .field(\"prefix\", Boolean);","","    var LogicalOperator = or(\"||\", \"&&\");","","    def(\"LogicalExpression\")","        .bases(\"Expression\")","        .build(\"operator\", \"left\", \"right\")","        .field(\"operator\", LogicalOperator)","        .field(\"left\", def(\"Expression\"))","        .field(\"right\", def(\"Expression\"));","","    def(\"ConditionalExpression\")","        .bases(\"Expression\")","        .build(\"test\", \"consequent\", \"alternate\")","        .field(\"test\", def(\"Expression\"))","        .field(\"consequent\", def(\"Expression\"))","        .field(\"alternate\", def(\"Expression\"));","","    def(\"NewExpression\")","        .bases(\"Expression\")","        .build(\"callee\", \"arguments\")","        .field(\"callee\", def(\"Expression\"))","        // The Mozilla Parser API gives this type as [or(def(\"Expression\"),","        // null)], but null values don't really make sense at the call site.","        // TODO Report this nonsense.","        .field(\"arguments\", [def(\"Expression\")]);","","    def(\"CallExpression\")","        .bases(\"Expression\")","        .build(\"callee\", \"arguments\")","        .field(\"callee\", def(\"Expression\"))","        // See comment for NewExpression above.","        .field(\"arguments\", [def(\"Expression\")]);","","    def(\"MemberExpression\")","        .bases(\"Expression\")","        .build(\"object\", \"property\", \"computed\")","        .field(\"object\", def(\"Expression\"))","        .field(\"property\", or(def(\"Identifier\"), def(\"Expression\")))","        .field(\"computed\", Boolean, function () {","            var type = this.property.type;","            if (type === 'Literal' ||","                type === 'MemberExpression' ||","                type === 'BinaryExpression') {","                return true;","            }","            return false;","        });","","    def(\"Pattern\").bases(\"Node\");","","    def(\"SwitchCase\")","        .bases(\"Node\")","        .build(\"test\", \"consequent\")","        .field(\"test\", or(def(\"Expression\"), null))","        .field(\"consequent\", [def(\"Statement\")]);","","    def(\"Identifier\")","        // But aren't Expressions and Patterns already Nodes? TODO Report this.","        .bases(\"Node\", \"Expression\", \"Pattern\")","        .build(\"name\")","        .field(\"name\", String);","","    def(\"Literal\")","        // But aren't Expressions already Nodes? TODO Report this.","        .bases(\"Node\", \"Expression\")","        .build(\"value\")","        .field(\"value\", or(String, Boolean, null, Number, RegExp))","        .field(\"regex\", or({","            pattern: String,","            flags: String","        }, null), function () {","            if (this.value instanceof RegExp) {","                var flags = \"\";","","                if (this.value.ignoreCase) flags += \"i\";","                if (this.value.multiline) flags += \"m\";","                if (this.value.global) flags += \"g\";","","                return {","                    pattern: this.value.source,","                    flags: flags","                };","            }","","            return null;","        });","","    // Abstract (non-buildable) comment supertype. Not a Node.","    def(\"Comment\")","        .bases(\"Printable\")","        .field(\"value\", String)","        // A .leading comment comes before the node, whereas a .trailing","        // comment comes after it. These two fields should not both be true,","        // but they might both be false when the comment falls inside a node","        // and the node has no children for the comment to lead or trail,","        // e.g. { /*dangling*/ }.","        .field(\"leading\", Boolean, defaults[\"true\"])","        .field(\"trailing\", Boolean, defaults[\"false\"]);","};"],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"12":1,"18":1,"26":1,"32":1,"37":1,"43":1,"48":1,"54":1,"58":1,"60":1,"67":1,"72":1,"79":1,"85":1,"90":1,"95":1,"101":1,"108":1,"113":1,"118":1,"123":0,"126":0,"131":1,"138":1,"144":1,"150":1,"161":1,"170":1,"172":1,"174":1,"179":1,"183":1,"189":1,"196":1,"198":1,"200":1,"205":1,"211":1,"218":1,"223":1,"227":1,"236":1,"245":1,"252":1,"257":1,"264":1,"266":1,"273":1,"275":1,"282":1,"289":1,"298":1,"305":1,"311":0,"312":0,"315":0,"317":0,"320":1,"322":1,"328":1,"334":1,"343":0,"344":0,"346":0,"347":0,"348":0,"350":0,"356":0,"360":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/es6.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/es6.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":228,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":30}},"3":{"start":{"line":3,"column":2},"end":{"line":3,"column":48}},"4":{"start":{"line":4,"column":2},"end":{"line":4,"column":27}},"5":{"start":{"line":5,"column":2},"end":{"line":5,"column":25}},"6":{"start":{"line":6,"column":2},"end":{"line":6,"column":61}},"7":{"start":{"line":8,"column":2},"end":{"line":13,"column":66}},"8":{"start":{"line":16,"column":2},"end":{"line":19,"column":39}},"9":{"start":{"line":21,"column":2},"end":{"line":24,"column":39}},"10":{"start":{"line":26,"column":2},"end":{"line":27,"column":62}},"11":{"start":{"line":29,"column":2},"end":{"line":30,"column":62}},"12":{"start":{"line":34,"column":2},"end":{"line":44,"column":50}},"13":{"start":{"line":46,"column":2},"end":{"line":53,"column":37}},"14":{"start":{"line":55,"column":2},"end":{"line":59,"column":51}},"15":{"start":{"line":61,"column":2},"end":{"line":66,"column":50}},"16":{"start":{"line":68,"column":2},"end":{"line":73,"column":50}},"17":{"start":{"line":75,"column":2},"end":{"line":80,"column":28}},"18":{"start":{"line":82,"column":2},"end":{"line":87,"column":51}},"19":{"start":{"line":89,"column":2},"end":{"line":94,"column":51}},"20":{"start":{"line":96,"column":2},"end":{"line":99,"column":72}},"21":{"start":{"line":101,"column":2},"end":{"line":104,"column":51}},"22":{"start":{"line":106,"column":2},"end":{"line":113,"column":49}},"23":{"start":{"line":115,"column":2},"end":{"line":118,"column":42}},"24":{"start":{"line":120,"column":2},"end":{"line":126,"column":8}},"25":{"start":{"line":128,"column":2},"end":{"line":129,"column":71}},"26":{"start":{"line":131,"column":2},"end":{"line":132,"column":71}},"27":{"start":{"line":140,"column":2},"end":{"line":144,"column":39}},"28":{"start":{"line":146,"column":2},"end":{"line":151,"column":4}},"29":{"start":{"line":153,"column":2},"end":{"line":157,"column":51}},"30":{"start":{"line":159,"column":2},"end":{"line":163,"column":43}},"31":{"start":{"line":165,"column":2},"end":{"line":168,"column":39}},"32":{"start":{"line":170,"column":2},"end":{"line":175,"column":72}},"33":{"start":{"line":177,"column":2},"end":{"line":183,"column":72}},"34":{"start":{"line":185,"column":2},"end":{"line":189,"column":72}},"35":{"start":{"line":193,"column":2},"end":{"line":193,"column":33}},"36":{"start":{"line":199,"column":2},"end":{"line":209,"column":66}},"37":{"start":{"line":211,"column":2},"end":{"line":215,"column":44}},"38":{"start":{"line":217,"column":2},"end":{"line":221,"column":47}},"39":{"start":{"line":223,"column":2},"end":{"line":227,"column":28}}},"branchMap":{},"code":["module.exports = function (fork) {","  fork.use(require(\"./core\"));","  var types = fork.use(require(\"../lib/types\"));","  var def = types.Type.def;","  var or = types.Type.or;","  var defaults = fork.use(require(\"../lib/shared\")).defaults;","","  def(\"Function\")","    .field(\"generator\", Boolean, defaults[\"false\"])","    .field(\"expression\", Boolean, defaults[\"false\"])","    .field(\"defaults\", [or(def(\"Expression\"), null)], defaults.emptyArray)","    // TODO This could be represented as a RestElement in .params.","    .field(\"rest\", or(def(\"Identifier\"), null), defaults[\"null\"]);","","  // The ESTree way of representing a ...rest parameter.","  def(\"RestElement\")","    .bases(\"Pattern\")","    .build(\"argument\")","    .field(\"argument\", def(\"Pattern\"));","","  def(\"SpreadElementPattern\")","    .bases(\"Pattern\")","    .build(\"argument\")","    .field(\"argument\", def(\"Pattern\"));","","  def(\"FunctionDeclaration\")","    .build(\"id\", \"params\", \"body\", \"generator\", \"expression\");","","  def(\"FunctionExpression\")","    .build(\"id\", \"params\", \"body\", \"generator\", \"expression\");","","  // The Parser API calls this ArrowExpression, but Esprima and all other","  // actual parsers use ArrowFunctionExpression.","  def(\"ArrowFunctionExpression\")","    .bases(\"Function\", \"Expression\")","    .build(\"params\", \"body\", \"expression\")","    // The forced null value here is compatible with the overridden","    // definition of the \"id\" field in the Function interface.","    .field(\"id\", null, defaults[\"null\"])","    // Arrow function bodies are allowed to be expressions.","    .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")))","    // The current spec forbids arrow generators, so I have taken the","    // liberty of enforcing that. TODO Report this.","    .field(\"generator\", false, defaults[\"false\"]);","","  def(\"ForOfStatement\")","    .bases(\"Statement\")","    .build(\"left\", \"right\", \"body\")","    .field(\"left\", or(","      def(\"VariableDeclaration\"),","      def(\"Pattern\")))","    .field(\"right\", def(\"Expression\"))","    .field(\"body\", def(\"Statement\"));","","  def(\"YieldExpression\")","    .bases(\"Expression\")","    .build(\"argument\", \"delegate\")","    .field(\"argument\", or(def(\"Expression\"), null))","    .field(\"delegate\", Boolean, defaults[\"false\"]);","","  def(\"GeneratorExpression\")","    .bases(\"Expression\")","    .build(\"body\", \"blocks\", \"filter\")","    .field(\"body\", def(\"Expression\"))","    .field(\"blocks\", [def(\"ComprehensionBlock\")])","    .field(\"filter\", or(def(\"Expression\"), null));","","  def(\"ComprehensionExpression\")","    .bases(\"Expression\")","    .build(\"body\", \"blocks\", \"filter\")","    .field(\"body\", def(\"Expression\"))","    .field(\"blocks\", [def(\"ComprehensionBlock\")])","    .field(\"filter\", or(def(\"Expression\"), null));","","  def(\"ComprehensionBlock\")","    .bases(\"Node\")","    .build(\"left\", \"right\", \"each\")","    .field(\"left\", def(\"Pattern\"))","    .field(\"right\", def(\"Expression\"))","    .field(\"each\", Boolean);","","  def(\"Property\")","    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))","    .field(\"value\", or(def(\"Expression\"), def(\"Pattern\")))","    .field(\"method\", Boolean, defaults[\"false\"])","    .field(\"shorthand\", Boolean, defaults[\"false\"])","    .field(\"computed\", Boolean, defaults[\"false\"]);","","  def(\"PropertyPattern\")","    .bases(\"Pattern\")","    .build(\"key\", \"pattern\")","    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))","    .field(\"pattern\", def(\"Pattern\"))","    .field(\"computed\", Boolean, defaults[\"false\"]);","","  def(\"ObjectPattern\")","    .bases(\"Pattern\")","    .build(\"properties\")","    .field(\"properties\", [or(def(\"PropertyPattern\"), def(\"Property\"))]);","","  def(\"ArrayPattern\")","    .bases(\"Pattern\")","    .build(\"elements\")","    .field(\"elements\", [or(def(\"Pattern\"), null)]);","","  def(\"MethodDefinition\")","    .bases(\"Declaration\")","    .build(\"kind\", \"key\", \"value\", \"static\")","    .field(\"kind\", or(\"constructor\", \"method\", \"get\", \"set\"))","    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))","    .field(\"value\", def(\"Function\"))","    .field(\"computed\", Boolean, defaults[\"false\"])","    .field(\"static\", Boolean, defaults[\"false\"]);","","  def(\"SpreadElement\")","    .bases(\"Node\")","    .build(\"argument\")","    .field(\"argument\", def(\"Expression\"));","","  def(\"ArrayExpression\")","    .field(\"elements\", [or(","      def(\"Expression\"),","      def(\"SpreadElement\"),","      def(\"RestElement\"),","      null","    )]);","","  def(\"NewExpression\")","    .field(\"arguments\", [or(def(\"Expression\"), def(\"SpreadElement\"))]);","","  def(\"CallExpression\")","    .field(\"arguments\", [or(def(\"Expression\"), def(\"SpreadElement\"))]);","","  // Note: this node type is *not* an AssignmentExpression with a Pattern on","  // the left-hand side! The existing AssignmentExpression type already","  // supports destructuring assignments. AssignmentPattern nodes may appear","  // wherever a Pattern is allowed, and the right-hand side represents a","  // default value to be destructured against the left-hand side, if no","  // value is otherwise provided. For example: default parameter values.","  def(\"AssignmentPattern\")","    .bases(\"Pattern\")","    .build(\"left\", \"right\")","    .field(\"left\", def(\"Pattern\"))","    .field(\"right\", def(\"Expression\"));","","  var ClassBodyElement = or(","    def(\"MethodDefinition\"),","    def(\"VariableDeclarator\"),","    def(\"ClassPropertyDefinition\"),","    def(\"ClassProperty\")","  );","","  def(\"ClassProperty\")","    .bases(\"Declaration\")","    .build(\"key\")","    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))","    .field(\"computed\", Boolean, defaults[\"false\"]);","","  def(\"ClassPropertyDefinition\") // static property","    .bases(\"Declaration\")","    .build(\"definition\")","    // Yes, Virginia, circular definitions are permitted.","    .field(\"definition\", ClassBodyElement);","","  def(\"ClassBody\")","    .bases(\"Declaration\")","    .build(\"body\")","    .field(\"body\", [ClassBodyElement]);","","  def(\"ClassDeclaration\")","    .bases(\"Declaration\")","    .build(\"id\", \"body\", \"superClass\")","    .field(\"id\", or(def(\"Identifier\"), null))","    .field(\"body\", def(\"ClassBody\"))","    .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);","","  def(\"ClassExpression\")","    .bases(\"Expression\")","    .build(\"id\", \"body\", \"superClass\")","    .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])","    .field(\"body\", def(\"ClassBody\"))","    .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"])","    .field(\"implements\", [def(\"ClassImplements\")], defaults.emptyArray);","","  def(\"ClassImplements\")","    .bases(\"Node\")","    .build(\"id\")","    .field(\"id\", def(\"Identifier\"))","    .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);","","  // Specifier and ModuleSpecifier are abstract non-standard types","  // introduced for definitional convenience.","  def(\"Specifier\").bases(\"Node\");","","  // This supertype is shared/abused by both def/babel.js and","  // def/esprima.js. In the future, it will be possible to load only one set","  // of definitions appropriate for a given parser, but until then we must","  // rely on default functions to reconcile the conflicting AST formats.","  def(\"ModuleSpecifier\")","    .bases(\"Specifier\")","    // This local field is used by Babel/Acorn. It should not technically","    // be optional in the Babel/Acorn AST format, but it must be optional","    // in the Esprima AST format.","    .field(\"local\", or(def(\"Identifier\"), null), defaults[\"null\"])","    // The id and name fields are used by Esprima. The id field should not","    // technically be optional in the Esprima AST format, but it must be","    // optional in the Babel/Acorn AST format.","    .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])","    .field(\"name\", or(def(\"Identifier\"), null), defaults[\"null\"]);","","  def(\"TaggedTemplateExpression\")","    .bases(\"Expression\")","    .build(\"tag\", \"quasi\")","    .field(\"tag\", def(\"Expression\"))","    .field(\"quasi\", def(\"TemplateLiteral\"));","","  def(\"TemplateLiteral\")","    .bases(\"Expression\")","    .build(\"quasis\", \"expressions\")","    .field(\"quasis\", [def(\"TemplateElement\")])","    .field(\"expressions\", [def(\"Expression\")]);","","  def(\"TemplateElement\")","    .bases(\"Node\")","    .build(\"value\", \"tail\")","    .field(\"value\", {\"cooked\": String, \"raw\": String})","    .field(\"tail\", Boolean);","};",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"8":1,"16":1,"21":1,"26":1,"29":1,"34":1,"46":1,"55":1,"61":1,"68":1,"75":1,"82":1,"89":1,"96":1,"101":1,"106":1,"115":1,"120":1,"128":1,"131":1,"140":1,"146":1,"153":1,"159":1,"165":1,"170":1,"177":1,"185":1,"193":1,"199":1,"211":1,"217":1,"223":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/es7.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/es7.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":38,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":31}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":50}},"4":{"start":{"line":5,"column":4},"end":{"line":5,"column":29}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":27}},"6":{"start":{"line":7,"column":4},"end":{"line":7,"column":37}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":63}},"8":{"start":{"line":10,"column":4},"end":{"line":11,"column":50}},"9":{"start":{"line":13,"column":4},"end":{"line":16,"column":44}},"10":{"start":{"line":18,"column":4},"end":{"line":19,"column":73}},"11":{"start":{"line":21,"column":4},"end":{"line":24,"column":41}},"12":{"start":{"line":26,"column":4},"end":{"line":31,"column":10}},"13":{"start":{"line":33,"column":4},"end":{"line":37,"column":48}}},"branchMap":{},"code":["module.exports = function (fork) {","    fork.use(require('./es6'));","","    var types = fork.use(require(\"../lib/types\"));","    var def = types.Type.def;","    var or = types.Type.or;","    var builtin = types.builtInTypes;","    var defaults = fork.use(require(\"../lib/shared\")).defaults;","","    def(\"Function\")","      .field(\"async\", Boolean, defaults[\"false\"]);","","    def(\"SpreadProperty\")","      .bases(\"Node\")","      .build(\"argument\")","      .field(\"argument\", def(\"Expression\"));","","    def(\"ObjectExpression\")","      .field(\"properties\", [or(def(\"Property\"), def(\"SpreadProperty\"))]);","","    def(\"SpreadPropertyPattern\")","      .bases(\"Pattern\")","      .build(\"argument\")","      .field(\"argument\", def(\"Pattern\"));","","    def(\"ObjectPattern\")","      .field(\"properties\", [or(","        def(\"Property\"),","        def(\"PropertyPattern\"),","        def(\"SpreadPropertyPattern\")","      )]);","","    def(\"AwaitExpression\")","      .bases(\"Expression\")","      .build(\"argument\", \"all\")","      .field(\"argument\", or(def(\"Expression\"), null))","      .field(\"all\", Boolean, defaults[\"false\"]);","};"],"l":{"1":1,"2":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"13":1,"18":1,"21":1,"26":1,"33":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/mozilla.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/mozilla.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":42,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":32}},"3":{"start":{"line":3,"column":4},"end":{"line":3,"column":50}},"4":{"start":{"line":4,"column":4},"end":{"line":4,"column":29}},"5":{"start":{"line":5,"column":4},"end":{"line":5,"column":27}},"6":{"start":{"line":6,"column":4},"end":{"line":6,"column":52}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":25}},"8":{"start":{"line":8,"column":4},"end":{"line":8,"column":35}},"9":{"start":{"line":10,"column":4},"end":{"line":12,"column":69}},"10":{"start":{"line":14,"column":4},"end":{"line":16,"column":51}},"11":{"start":{"line":18,"column":4},"end":{"line":23,"column":41}},"12":{"start":{"line":25,"column":4},"end":{"line":30,"column":42}},"13":{"start":{"line":32,"column":4},"end":{"line":36,"column":45}},"14":{"start":{"line":38,"column":4},"end":{"line":41,"column":32}}},"branchMap":{},"code":["module.exports = function (fork) {","    fork.use(require(\"./core\"));","    var types = fork.use(require(\"../lib/types\"));","    var def = types.Type.def;","    var or = types.Type.or;","    var shared = fork.use(require(\"../lib/shared\"));","    var geq = shared.geq;","    var defaults = shared.defaults;","","    def(\"Function\")","        // SpiderMonkey allows expression closures: function(x) x+1","        .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")));","","    def(\"ForInStatement\")","        .build(\"left\", \"right\", \"body\", \"each\")","        .field(\"each\", Boolean, defaults[\"false\"]);","","    def(\"LetStatement\")","        .bases(\"Statement\")","        .build(\"head\", \"body\")","        // TODO Deviating from the spec by reusing VariableDeclarator here.","        .field(\"head\", [def(\"VariableDeclarator\")])","        .field(\"body\", def(\"Statement\"));","","    def(\"LetExpression\")","        .bases(\"Expression\")","        .build(\"head\", \"body\")","        // TODO Deviating from the spec by reusing VariableDeclarator here.","        .field(\"head\", [def(\"VariableDeclarator\")])","        .field(\"body\", def(\"Expression\"));","","    def(\"GraphExpression\")","        .bases(\"Expression\")","        .build(\"index\", \"expression\")","        .field(\"index\", geq(0))","        .field(\"expression\", def(\"Literal\"));","","    def(\"GraphIndexExpression\")","        .bases(\"Expression\")","        .build(\"index\")","        .field(\"index\", geq(0));","};"],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"14":1,"18":1,"25":1,"32":1,"38":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/e4x.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/e4x.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":86,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":32}},"3":{"start":{"line":3,"column":4},"end":{"line":3,"column":50}},"4":{"start":{"line":4,"column":4},"end":{"line":4,"column":29}},"5":{"start":{"line":5,"column":4},"end":{"line":5,"column":27}},"6":{"start":{"line":10,"column":4},"end":{"line":12,"column":47}},"7":{"start":{"line":14,"column":4},"end":{"line":14,"column":42}},"8":{"start":{"line":16,"column":4},"end":{"line":20,"column":36}},"9":{"start":{"line":22,"column":4},"end":{"line":25,"column":36}},"10":{"start":{"line":27,"column":4},"end":{"line":29,"column":47}},"11":{"start":{"line":31,"column":4},"end":{"line":34,"column":43}},"12":{"start":{"line":36,"column":4},"end":{"line":38,"column":41}},"13":{"start":{"line":40,"column":4},"end":{"line":42,"column":41}},"14":{"start":{"line":44,"column":4},"end":{"line":44,"column":29}},"15":{"start":{"line":46,"column":4},"end":{"line":48,"column":48}},"16":{"start":{"line":50,"column":4},"end":{"line":52,"column":31}},"17":{"start":{"line":54,"column":4},"end":{"line":56,"column":41}},"18":{"start":{"line":58,"column":4},"end":{"line":60,"column":41}},"19":{"start":{"line":62,"column":4},"end":{"line":64,"column":41}},"20":{"start":{"line":66,"column":4},"end":{"line":68,"column":53}},"21":{"start":{"line":70,"column":4},"end":{"line":72,"column":32}},"22":{"start":{"line":74,"column":4},"end":{"line":76,"column":35}},"23":{"start":{"line":78,"column":4},"end":{"line":80,"column":35}},"24":{"start":{"line":82,"column":4},"end":{"line":85,"column":45}}},"branchMap":{},"code":["module.exports = function (fork) {","    fork.use(require(\"./core\"));","    var types = fork.use(require(\"../lib/types\"));","    var def = types.Type.def;","    var or = types.Type.or;","","    // Note that none of these types are buildable because the Mozilla Parser","    // API doesn't specify any builder functions, and nobody uses E4X anymore.","","    def(\"XMLDefaultDeclaration\")","        .bases(\"Declaration\")","        .field(\"namespace\", def(\"Expression\"));","","    def(\"XMLAnyName\").bases(\"Expression\");","","    def(\"XMLQualifiedIdentifier\")","        .bases(\"Expression\")","        .field(\"left\", or(def(\"Identifier\"), def(\"XMLAnyName\")))","        .field(\"right\", or(def(\"Identifier\"), def(\"Expression\")))","        .field(\"computed\", Boolean);","","    def(\"XMLFunctionQualifiedIdentifier\")","        .bases(\"Expression\")","        .field(\"right\", or(def(\"Identifier\"), def(\"Expression\")))","        .field(\"computed\", Boolean);","","    def(\"XMLAttributeSelector\")","        .bases(\"Expression\")","        .field(\"attribute\", def(\"Expression\"));","","    def(\"XMLFilterExpression\")","        .bases(\"Expression\")","        .field(\"left\", def(\"Expression\"))","        .field(\"right\", def(\"Expression\"));","","    def(\"XMLElement\")","        .bases(\"XML\", \"Expression\")","        .field(\"contents\", [def(\"XML\")]);","","    def(\"XMLList\")","        .bases(\"XML\", \"Expression\")","        .field(\"contents\", [def(\"XML\")]);","","    def(\"XML\").bases(\"Node\");","","    def(\"XMLEscape\")","        .bases(\"XML\")","        .field(\"expression\", def(\"Expression\"));","","    def(\"XMLText\")","        .bases(\"XML\")","        .field(\"text\", String);","","    def(\"XMLStartTag\")","        .bases(\"XML\")","        .field(\"contents\", [def(\"XML\")]);","","    def(\"XMLEndTag\")","        .bases(\"XML\")","        .field(\"contents\", [def(\"XML\")]);","","    def(\"XMLPointTag\")","        .bases(\"XML\")","        .field(\"contents\", [def(\"XML\")]);","","    def(\"XMLName\")","        .bases(\"XML\")","        .field(\"contents\", or(String, [def(\"XML\")]));","","    def(\"XMLAttribute\")","        .bases(\"XML\")","        .field(\"value\", String);","","    def(\"XMLCdata\")","        .bases(\"XML\")","        .field(\"contents\", String);","","    def(\"XMLComment\")","        .bases(\"XML\")","        .field(\"contents\", String);","","    def(\"XMLProcessingInstruction\")","        .bases(\"XML\")","        .field(\"target\", String)","        .field(\"contents\", or(String, null));","};"],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"10":1,"14":1,"16":1,"22":1,"27":1,"31":1,"36":1,"40":1,"44":1,"46":1,"50":1,"54":1,"58":1,"62":1,"66":1,"70":1,"74":1,"78":1,"82":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/jsx.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/jsx.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":0,"18":0,"19":1,"20":1,"21":1,"22":1,"23":1},"b":{},"f":{"1":1,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}},"2":{"name":"(anonymous_2)","line":69,"loc":{"start":{"line":69,"column":35},"end":{"line":69,"column":47}}},"3":{"name":"(anonymous_3)","line":77,"loc":{"start":{"line":77,"column":35},"end":{"line":77,"column":47}}},"4":{"name":"(anonymous_4)","line":80,"loc":{"start":{"line":80,"column":40},"end":{"line":80,"column":52}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":109,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":29}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":48}},"4":{"start":{"line":5,"column":2},"end":{"line":5,"column":27}},"5":{"start":{"line":6,"column":2},"end":{"line":6,"column":25}},"6":{"start":{"line":7,"column":2},"end":{"line":7,"column":61}},"7":{"start":{"line":9,"column":2},"end":{"line":17,"column":25}},"8":{"start":{"line":19,"column":2},"end":{"line":22,"column":27}},"9":{"start":{"line":24,"column":2},"end":{"line":28,"column":41}},"10":{"start":{"line":30,"column":2},"end":{"line":35,"column":48}},"11":{"start":{"line":37,"column":2},"end":{"line":41,"column":4}},"12":{"start":{"line":43,"column":2},"end":{"line":46,"column":42}},"13":{"start":{"line":48,"column":2},"end":{"line":51,"column":5}},"14":{"start":{"line":53,"column":2},"end":{"line":56,"column":44}},"15":{"start":{"line":58,"column":2},"end":{"line":82,"column":13}},"16":{"start":{"line":75,"column":6},"end":{"line":75,"column":38}},"17":{"start":{"line":78,"column":6},"end":{"line":78,"column":45}},"18":{"start":{"line":81,"column":6},"end":{"line":81,"column":44}},"19":{"start":{"line":84,"column":2},"end":{"line":89,"column":54}},"20":{"start":{"line":91,"column":2},"end":{"line":94,"column":35}},"21":{"start":{"line":96,"column":2},"end":{"line":99,"column":28}},"22":{"start":{"line":101,"column":2},"end":{"line":101,"column":56}},"23":{"start":{"line":105,"column":2},"end":{"line":108,"column":44}}},"branchMap":{},"code":["module.exports = function (fork) {","  fork.use(require(\"./es7\"));","","  var types = fork.use(require(\"../lib/types\"));","  var def = types.Type.def;","  var or = types.Type.or;","  var defaults = fork.use(require(\"../lib/shared\")).defaults;","","  def(\"JSXAttribute\")","    .bases(\"Node\")","    .build(\"name\", \"value\")","    .field(\"name\", or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\")))","    .field(\"value\", or(","      def(\"Literal\"), // attr=\"value\"","      def(\"JSXExpressionContainer\"), // attr={value}","      null // attr= or just attr","    ), defaults[\"null\"]);","","  def(\"JSXIdentifier\")","    .bases(\"Identifier\")","    .build(\"name\")","    .field(\"name\", String);","","  def(\"JSXNamespacedName\")","    .bases(\"Node\")","    .build(\"namespace\", \"name\")","    .field(\"namespace\", def(\"JSXIdentifier\"))","    .field(\"name\", def(\"JSXIdentifier\"));","","  def(\"JSXMemberExpression\")","    .bases(\"MemberExpression\")","    .build(\"object\", \"property\")","    .field(\"object\", or(def(\"JSXIdentifier\"), def(\"JSXMemberExpression\")))","    .field(\"property\", def(\"JSXIdentifier\"))","    .field(\"computed\", Boolean, defaults.false);","","  var JSXElementName = or(","    def(\"JSXIdentifier\"),","    def(\"JSXNamespacedName\"),","    def(\"JSXMemberExpression\")","  );","","  def(\"JSXSpreadAttribute\")","    .bases(\"Node\")","    .build(\"argument\")","    .field(\"argument\", def(\"Expression\"));","","  var JSXAttributes = [or(","    def(\"JSXAttribute\"),","    def(\"JSXSpreadAttribute\")","  )];","","  def(\"JSXExpressionContainer\")","    .bases(\"Expression\")","    .build(\"expression\")","    .field(\"expression\", def(\"Expression\"));","","  def(\"JSXElement\")","    .bases(\"Expression\")","    .build(\"openingElement\", \"closingElement\", \"children\")","    .field(\"openingElement\", def(\"JSXOpeningElement\"))","    .field(\"closingElement\", or(def(\"JSXClosingElement\"), null), defaults[\"null\"])","    .field(\"children\", [or(","      def(\"JSXElement\"),","      def(\"JSXExpressionContainer\"),","      def(\"JSXText\"),","      def(\"Literal\") // TODO Esprima should return JSXText instead.","    )], defaults.emptyArray)","    .field(\"name\", JSXElementName, function () {","      // Little-known fact: the `this` object inside a default function","      // is none other than the partially-built object itself, and any","      // fields initialized directly from builder function arguments","      // (like openingElement, closingElement, and children) are","      // guaranteed to be available.","      return this.openingElement.name;","    }, true) // hidden from traversal","    .field(\"selfClosing\", Boolean, function () {","      return this.openingElement.selfClosing;","    }, true) // hidden from traversal","    .field(\"attributes\", JSXAttributes, function () {","      return this.openingElement.attributes;","    }, true); // hidden from traversal","","  def(\"JSXOpeningElement\")","    .bases(\"Node\") // TODO Does this make sense? Can't really be an JSXElement.","    .build(\"name\", \"attributes\", \"selfClosing\")","    .field(\"name\", JSXElementName)","    .field(\"attributes\", JSXAttributes, defaults.emptyArray)","    .field(\"selfClosing\", Boolean, defaults[\"false\"]);","","  def(\"JSXClosingElement\")","    .bases(\"Node\") // TODO Same concern.","    .build(\"name\")","    .field(\"name\", JSXElementName);","","  def(\"JSXText\")","    .bases(\"Literal\")","    .build(\"value\")","    .field(\"value\", String);","","  def(\"JSXEmptyExpression\").bases(\"Expression\").build();","","  // This PR has caused many people issues, but supporting it seems like a","  // good idea anyway: https://github.com/babel/babel/pull/4988","  def(\"JSXSpreadChild\")","    .bases(\"Expression\")","    .build(\"expression\")","    .field(\"expression\", def(\"Expression\"));","};",""],"l":{"1":1,"2":1,"4":1,"5":1,"6":1,"7":1,"9":1,"19":1,"24":1,"30":1,"37":1,"43":1,"48":1,"53":1,"58":1,"75":0,"78":0,"81":0,"84":1,"91":1,"96":1,"101":1,"105":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/flow.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/flow.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":332,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":31}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":50}},"4":{"start":{"line":5,"column":4},"end":{"line":5,"column":29}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":27}},"6":{"start":{"line":7,"column":4},"end":{"line":7,"column":63}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":30}},"8":{"start":{"line":12,"column":4},"end":{"line":14,"column":15}},"9":{"start":{"line":16,"column":4},"end":{"line":18,"column":15}},"10":{"start":{"line":20,"column":4},"end":{"line":22,"column":15}},"11":{"start":{"line":24,"column":4},"end":{"line":26,"column":15}},"12":{"start":{"line":28,"column":4},"end":{"line":30,"column":15}},"13":{"start":{"line":32,"column":4},"end":{"line":36,"column":28}},"14":{"start":{"line":40,"column":4},"end":{"line":44,"column":28}},"15":{"start":{"line":46,"column":4},"end":{"line":48,"column":15}},"16":{"start":{"line":50,"column":4},"end":{"line":54,"column":28}},"17":{"start":{"line":56,"column":4},"end":{"line":58,"column":15}},"18":{"start":{"line":60,"column":4},"end":{"line":64,"column":28}},"19":{"start":{"line":66,"column":4},"end":{"line":69,"column":44}},"20":{"start":{"line":71,"column":4},"end":{"line":74,"column":44}},"21":{"start":{"line":76,"column":4},"end":{"line":78,"column":15}},"22":{"start":{"line":80,"column":4},"end":{"line":82,"column":15}},"23":{"start":{"line":84,"column":4},"end":{"line":86,"column":15}},"24":{"start":{"line":88,"column":4},"end":{"line":90,"column":15}},"25":{"start":{"line":92,"column":4},"end":{"line":94,"column":15}},"26":{"start":{"line":96,"column":4},"end":{"line":102,"column":74}},"27":{"start":{"line":104,"column":4},"end":{"line":109,"column":34}},"28":{"start":{"line":111,"column":4},"end":{"line":114,"column":41}},"29":{"start":{"line":116,"column":4},"end":{"line":124,"column":50}},"30":{"start":{"line":126,"column":4},"end":{"line":134,"column":26}},"31":{"start":{"line":136,"column":4},"end":{"line":144,"column":26}},"32":{"start":{"line":146,"column":4},"end":{"line":150,"column":51}},"33":{"start":{"line":152,"column":4},"end":{"line":158,"column":38}},"34":{"start":{"line":160,"column":4},"end":{"line":164,"column":76}},"35":{"start":{"line":166,"column":4},"end":{"line":172,"column":41}},"36":{"start":{"line":174,"column":4},"end":{"line":177,"column":37}},"37":{"start":{"line":179,"column":4},"end":{"line":182,"column":37}},"38":{"start":{"line":184,"column":4},"end":{"line":187,"column":38}},"39":{"start":{"line":189,"column":4},"end":{"line":190,"column":82}},"40":{"start":{"line":192,"column":4},"end":{"line":193,"column":82}},"41":{"start":{"line":195,"column":4},"end":{"line":198,"column":47}},"42":{"start":{"line":200,"column":4},"end":{"line":203,"column":38}},"43":{"start":{"line":205,"column":4},"end":{"line":214,"column":26}},"44":{"start":{"line":216,"column":4},"end":{"line":222,"column":26}},"45":{"start":{"line":224,"column":4},"end":{"line":231,"column":26}},"46":{"start":{"line":233,"column":4},"end":{"line":236,"column":26}},"47":{"start":{"line":238,"column":4},"end":{"line":246,"column":51}},"48":{"start":{"line":248,"column":4},"end":{"line":250,"column":38}},"49":{"start":{"line":252,"column":4},"end":{"line":256,"column":76}},"50":{"start":{"line":258,"column":4},"end":{"line":263,"column":35}},"51":{"start":{"line":265,"column":4},"end":{"line":267,"column":46}},"52":{"start":{"line":269,"column":4},"end":{"line":273,"column":54}},"53":{"start":{"line":275,"column":4},"end":{"line":278,"column":37}},"54":{"start":{"line":280,"column":4},"end":{"line":283,"column":38}},"55":{"start":{"line":285,"column":4},"end":{"line":288,"column":38}},"56":{"start":{"line":290,"column":4},"end":{"line":292,"column":19}},"57":{"start":{"line":294,"column":4},"end":{"line":298,"column":44}},"58":{"start":{"line":300,"column":4},"end":{"line":303,"column":44}},"59":{"start":{"line":305,"column":4},"end":{"line":323,"column":27}},"60":{"start":{"line":325,"column":4},"end":{"line":331,"column":27}}},"branchMap":{},"code":["module.exports = function (fork) {","    fork.use(require(\"./es7\"));","","    var types = fork.use(require(\"../lib/types\"));","    var def = types.Type.def;","    var or = types.Type.or;","    var defaults = fork.use(require(\"../lib/shared\")).defaults;","","    // Type Annotations","    def(\"Type\").bases(\"Node\");","","    def(\"AnyTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"EmptyTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"MixedTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"VoidTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"NumberTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"NumberLiteralTypeAnnotation\")","      .bases(\"Type\")","      .build(\"value\", \"raw\")","      .field(\"value\", Number)","      .field(\"raw\", String);","","    // Babylon 6 differs in AST from Flow","    // same as NumberLiteralTypeAnnotation","    def(\"NumericLiteralTypeAnnotation\")","      .bases(\"Type\")","      .build(\"value\", \"raw\")","      .field(\"value\", Number)","      .field(\"raw\", String);","","    def(\"StringTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"StringLiteralTypeAnnotation\")","      .bases(\"Type\")","      .build(\"value\", \"raw\")","      .field(\"value\", String)","      .field(\"raw\", String);","","    def(\"BooleanTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"BooleanLiteralTypeAnnotation\")","      .bases(\"Type\")","      .build(\"value\", \"raw\")","      .field(\"value\", Boolean)","      .field(\"raw\", String);","","    def(\"TypeAnnotation\")","      .bases(\"Node\")","      .build(\"typeAnnotation\")","      .field(\"typeAnnotation\", def(\"Type\"));","","    def(\"NullableTypeAnnotation\")","      .bases(\"Type\")","      .build(\"typeAnnotation\")","      .field(\"typeAnnotation\", def(\"Type\"));","","    def(\"NullLiteralTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"NullTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"ThisTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"ExistsTypeAnnotation\")","      .bases(\"Type\")","      .build();","","    def(\"ExistentialTypeParam\")","      .bases(\"Type\")","      .build();","","    def(\"FunctionTypeAnnotation\")","      .bases(\"Type\")","      .build(\"params\", \"returnType\", \"rest\", \"typeParameters\")","      .field(\"params\", [def(\"FunctionTypeParam\")])","      .field(\"returnType\", def(\"Type\"))","      .field(\"rest\", or(def(\"FunctionTypeParam\"), null))","      .field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null));","","    def(\"FunctionTypeParam\")","      .bases(\"Node\")","      .build(\"name\", \"typeAnnotation\", \"optional\")","      .field(\"name\", def(\"Identifier\"))","      .field(\"typeAnnotation\", def(\"Type\"))","      .field(\"optional\", Boolean);","","    def(\"ArrayTypeAnnotation\")","      .bases(\"Type\")","      .build(\"elementType\")","      .field(\"elementType\", def(\"Type\"));","","    def(\"ObjectTypeAnnotation\")","      .bases(\"Type\")","      .build(\"properties\", \"indexers\", \"callProperties\")","      .field(\"properties\", [def(\"ObjectTypeProperty\")])","      .field(\"indexers\", [def(\"ObjectTypeIndexer\")], defaults.emptyArray)","      .field(\"callProperties\",","        [def(\"ObjectTypeCallProperty\")],","        defaults.emptyArray)","      .field(\"exact\", Boolean, defaults[\"false\"]);","","    def(\"ObjectTypeProperty\")","      .bases(\"Node\")","      .build(\"key\", \"value\", \"optional\")","      .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))","      .field(\"value\", def(\"Type\"))","      .field(\"optional\", Boolean)","      .field(\"variance\",","        or(\"plus\", \"minus\", null),","        defaults[\"null\"]);","","    def(\"ObjectTypeIndexer\")","      .bases(\"Node\")","      .build(\"id\", \"key\", \"value\")","      .field(\"id\", def(\"Identifier\"))","      .field(\"key\", def(\"Type\"))","      .field(\"value\", def(\"Type\"))","      .field(\"variance\",","        or(\"plus\", \"minus\", null),","        defaults[\"null\"]);","","    def(\"ObjectTypeCallProperty\")","      .bases(\"Node\")","      .build(\"value\")","      .field(\"value\", def(\"FunctionTypeAnnotation\"))","      .field(\"static\", Boolean, defaults[\"false\"]);","","    def(\"QualifiedTypeIdentifier\")","      .bases(\"Node\")","      .build(\"qualification\", \"id\")","      .field(\"qualification\",","        or(def(\"Identifier\"),","          def(\"QualifiedTypeIdentifier\")))","      .field(\"id\", def(\"Identifier\"));","","    def(\"GenericTypeAnnotation\")","      .bases(\"Type\")","      .build(\"id\", \"typeParameters\")","      .field(\"id\", or(def(\"Identifier\"), def(\"QualifiedTypeIdentifier\")))","      .field(\"typeParameters\", or(def(\"TypeParameterInstantiation\"), null));","","    def(\"MemberTypeAnnotation\")","      .bases(\"Type\")","      .build(\"object\", \"property\")","      .field(\"object\", def(\"Identifier\"))","      .field(\"property\",","        or(def(\"MemberTypeAnnotation\"),","          def(\"GenericTypeAnnotation\")));","","    def(\"UnionTypeAnnotation\")","      .bases(\"Type\")","      .build(\"types\")","      .field(\"types\", [def(\"Type\")]);","","    def(\"IntersectionTypeAnnotation\")","      .bases(\"Type\")","      .build(\"types\")","      .field(\"types\", [def(\"Type\")]);","","    def(\"TypeofTypeAnnotation\")","      .bases(\"Type\")","      .build(\"argument\")","      .field(\"argument\", def(\"Type\"));","","    def(\"Identifier\")","      .field(\"typeAnnotation\", or(def(\"TypeAnnotation\"), null), defaults[\"null\"]);","","    def(\"ObjectPattern\")","      .field(\"typeAnnotation\", or(def(\"TypeAnnotation\"), null), defaults[\"null\"]);","","    def(\"TypeParameterDeclaration\")","      .bases(\"Node\")","      .build(\"params\")","      .field(\"params\", [def(\"TypeParameter\")]);","","    def(\"TypeParameterInstantiation\")","      .bases(\"Node\")","      .build(\"params\")","      .field(\"params\", [def(\"Type\")]);","","    def(\"TypeParameter\")","      .bases(\"Type\")","      .build(\"name\", \"variance\", \"bound\")","      .field(\"name\", String)","      .field(\"variance\",","        or(\"plus\", \"minus\", null),","        defaults[\"null\"])","      .field(\"bound\",","        or(def(\"TypeAnnotation\"), null),","        defaults[\"null\"]);","","    def(\"Function\")","      .field(\"returnType\",","        or(def(\"TypeAnnotation\"), null),","        defaults[\"null\"])","      .field(\"typeParameters\",","        or(def(\"TypeParameterDeclaration\"), null),","        defaults[\"null\"]);","","    def(\"ClassProperty\")","      .build(\"key\", \"value\", \"typeAnnotation\", \"static\")","      .field(\"value\", or(def(\"Expression\"), null))","      .field(\"typeAnnotation\", or(def(\"TypeAnnotation\"), null))","      .field(\"static\", Boolean, defaults[\"false\"])","      .field(\"variance\",","        or(\"plus\", \"minus\", null),","        defaults[\"null\"]);","","    def(\"ClassImplements\")","      .field(\"typeParameters\",","        or(def(\"TypeParameterInstantiation\"), null),","        defaults[\"null\"]);","","    def(\"InterfaceDeclaration\")","      .bases(\"Declaration\")","      .build(\"id\", \"body\", \"extends\")","      .field(\"id\", def(\"Identifier\"))","      .field(\"typeParameters\",","        or(def(\"TypeParameterDeclaration\"), null),","        defaults[\"null\"])","      .field(\"body\", def(\"ObjectTypeAnnotation\"))","      .field(\"extends\", [def(\"InterfaceExtends\")]);","","    def(\"DeclareInterface\")","      .bases(\"InterfaceDeclaration\")","      .build(\"id\", \"body\", \"extends\");","","    def(\"InterfaceExtends\")","      .bases(\"Node\")","      .build(\"id\")","      .field(\"id\", def(\"Identifier\"))","      .field(\"typeParameters\", or(def(\"TypeParameterInstantiation\"), null));","","    def(\"TypeAlias\")","      .bases(\"Declaration\")","      .build(\"id\", \"typeParameters\", \"right\")","      .field(\"id\", def(\"Identifier\"))","      .field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null))","      .field(\"right\", def(\"Type\"));","","    def(\"DeclareTypeAlias\")","      .bases(\"TypeAlias\")","      .build(\"id\", \"typeParameters\", \"right\");","","    def(\"TypeCastExpression\")","      .bases(\"Expression\")","      .build(\"expression\", \"typeAnnotation\")","      .field(\"expression\", def(\"Expression\"))","      .field(\"typeAnnotation\", def(\"TypeAnnotation\"));","","    def(\"TupleTypeAnnotation\")","      .bases(\"Type\")","      .build(\"types\")","      .field(\"types\", [def(\"Type\")]);","","    def(\"DeclareVariable\")","      .bases(\"Statement\")","      .build(\"id\")","      .field(\"id\", def(\"Identifier\"));","","    def(\"DeclareFunction\")","      .bases(\"Statement\")","      .build(\"id\")","      .field(\"id\", def(\"Identifier\"));","","    def(\"DeclareClass\")","      .bases(\"InterfaceDeclaration\")","      .build(\"id\");","","    def(\"DeclareModule\")","      .bases(\"Statement\")","      .build(\"id\", \"body\")","      .field(\"id\", or(def(\"Identifier\"), def(\"Literal\")))","      .field(\"body\", def(\"BlockStatement\"));","","    def(\"DeclareModuleExports\")","      .bases(\"Statement\")","      .build(\"typeAnnotation\")","      .field(\"typeAnnotation\", def(\"Type\"));","","    def(\"DeclareExportDeclaration\")","      .bases(\"Declaration\")","      .build(\"default\", \"declaration\", \"specifiers\", \"source\")","      .field(\"default\", Boolean)","      .field(\"declaration\", or(","        def(\"DeclareVariable\"),","        def(\"DeclareFunction\"),","        def(\"DeclareClass\"),","        def(\"Type\"), // Implies default.","        null","      ))","      .field(\"specifiers\", [or(","        def(\"ExportSpecifier\"),","        def(\"ExportBatchSpecifier\")","      )], defaults.emptyArray)","      .field(\"source\", or(","        def(\"Literal\"),","        null","      ), defaults[\"null\"]);","","    def(\"DeclareExportAllDeclaration\")","      .bases(\"Declaration\")","      .build(\"source\")","      .field(\"source\", or(","        def(\"Literal\"),","        null","      ), defaults[\"null\"]);","};",""],"l":{"1":1,"2":1,"4":1,"5":1,"6":1,"7":1,"10":1,"12":1,"16":1,"20":1,"24":1,"28":1,"32":1,"40":1,"46":1,"50":1,"56":1,"60":1,"66":1,"71":1,"76":1,"80":1,"84":1,"88":1,"92":1,"96":1,"104":1,"111":1,"116":1,"126":1,"136":1,"146":1,"152":1,"160":1,"166":1,"174":1,"179":1,"184":1,"189":1,"192":1,"195":1,"200":1,"205":1,"216":1,"224":1,"233":1,"238":1,"248":1,"252":1,"258":1,"265":1,"269":1,"275":1,"280":1,"285":1,"290":1,"294":1,"300":1,"305":1,"325":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/esprima.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/esprima.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":0,"19":1,"20":1},"b":{},"f":{"1":1,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}},"2":{"name":"(anonymous_2)","line":93,"loc":{"start":{"line":93,"column":9},"end":{"line":93,"column":20}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":104,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":31}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":50}},"4":{"start":{"line":5,"column":4},"end":{"line":5,"column":63}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":29}},"6":{"start":{"line":7,"column":4},"end":{"line":7,"column":27}},"7":{"start":{"line":9,"column":4},"end":{"line":13,"column":10}},"8":{"start":{"line":15,"column":4},"end":{"line":19,"column":9}},"9":{"start":{"line":21,"column":4},"end":{"line":26,"column":10}},"10":{"start":{"line":28,"column":4},"end":{"line":34,"column":10}},"11":{"start":{"line":38,"column":4},"end":{"line":40,"column":27}},"12":{"start":{"line":43,"column":4},"end":{"line":45,"column":15}},"13":{"start":{"line":49,"column":4},"end":{"line":51,"column":27}},"14":{"start":{"line":54,"column":4},"end":{"line":56,"column":19}},"15":{"start":{"line":59,"column":4},"end":{"line":61,"column":19}},"16":{"start":{"line":63,"column":4},"end":{"line":79,"column":27}},"17":{"start":{"line":81,"column":4},"end":{"line":95,"column":9}},"18":{"start":{"line":94,"column":8},"end":{"line":94,"column":23}},"19":{"start":{"line":97,"column":4},"end":{"line":99,"column":59}},"20":{"start":{"line":101,"column":4},"end":{"line":103,"column":59}}},"branchMap":{},"code":["module.exports = function (fork) {","    fork.use(require(\"./es7\"));","","    var types = fork.use(require(\"../lib/types\"));","    var defaults = fork.use(require(\"../lib/shared\")).defaults;","    var def = types.Type.def;","    var or = types.Type.or;","","    def(\"VariableDeclaration\")","      .field(\"declarations\", [or(","        def(\"VariableDeclarator\"),","        def(\"Identifier\") // Esprima deviation.","      )]);","","    def(\"Property\")","      .field(\"value\", or(","        def(\"Expression\"),","        def(\"Pattern\") // Esprima deviation.","      ));","","    def(\"ArrayPattern\")","      .field(\"elements\", [or(","        def(\"Pattern\"),","        def(\"SpreadElement\"),","        null","      )]);","","    def(\"ObjectPattern\")","      .field(\"properties\", [or(","        def(\"Property\"),","        def(\"PropertyPattern\"),","        def(\"SpreadPropertyPattern\"),","        def(\"SpreadProperty\") // Used by Esprima.","      )]);","","// Like ModuleSpecifier, except type:\"ExportSpecifier\" and buildable.","// export {<id [as name]>} [from ...];","    def(\"ExportSpecifier\")","      .bases(\"ModuleSpecifier\")","      .build(\"id\", \"name\");","","// export <*> from ...;","    def(\"ExportBatchSpecifier\")","      .bases(\"Specifier\")","      .build();","","// Like ModuleSpecifier, except type:\"ImportSpecifier\" and buildable.","// import {<id [as name]>} from ...;","    def(\"ImportSpecifier\")","      .bases(\"ModuleSpecifier\")","      .build(\"id\", \"name\");","","// import <* as id> from ...;","    def(\"ImportNamespaceSpecifier\")","      .bases(\"ModuleSpecifier\")","      .build(\"id\");","","// import <id> from ...;","    def(\"ImportDefaultSpecifier\")","      .bases(\"ModuleSpecifier\")","      .build(\"id\");","","    def(\"ExportDeclaration\")","      .bases(\"Declaration\")","      .build(\"default\", \"declaration\", \"specifiers\", \"source\")","      .field(\"default\", Boolean)","      .field(\"declaration\", or(","        def(\"Declaration\"),","        def(\"Expression\"), // Implies default.","        null","      ))","      .field(\"specifiers\", [or(","        def(\"ExportSpecifier\"),","        def(\"ExportBatchSpecifier\")","      )], defaults.emptyArray)","      .field(\"source\", or(","        def(\"Literal\"),","        null","      ), defaults[\"null\"]);","","    def(\"ImportDeclaration\")","      .bases(\"Declaration\")","      .build(\"specifiers\", \"source\", \"importKind\")","      .field(\"specifiers\", [or(","        def(\"ImportSpecifier\"),","        def(\"ImportNamespaceSpecifier\"),","        def(\"ImportDefaultSpecifier\")","      )], defaults.emptyArray)","      .field(\"source\", def(\"Literal\"))","      .field(\"importKind\", or(","        \"value\",","        \"type\"","      ), function() {","        return \"value\";","      });","","    def(\"Block\")","      .bases(\"Comment\")","      .build(\"value\", /*optional:*/ \"leading\", \"trailing\");","","    def(\"Line\")","      .bases(\"Comment\")","      .build(\"value\", /*optional:*/ \"leading\", \"trailing\");","};"],"l":{"1":1,"2":1,"4":1,"5":1,"6":1,"7":1,"9":1,"15":1,"21":1,"28":1,"38":1,"43":1,"49":1,"54":1,"59":1,"63":1,"81":1,"94":0,"97":1,"101":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/babel.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/babel.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":107,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":31}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":50}},"4":{"start":{"line":5,"column":4},"end":{"line":5,"column":63}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":29}},"6":{"start":{"line":7,"column":4},"end":{"line":7,"column":27}},"7":{"start":{"line":9,"column":4},"end":{"line":11,"column":17}},"8":{"start":{"line":13,"column":4},"end":{"line":16,"column":43}},"9":{"start":{"line":18,"column":4},"end":{"line":20,"column":17}},"10":{"start":{"line":22,"column":4},"end":{"line":26,"column":44}},"11":{"start":{"line":28,"column":4},"end":{"line":31,"column":48}},"12":{"start":{"line":33,"column":4},"end":{"line":36,"column":30}},"13":{"start":{"line":38,"column":4},"end":{"line":41,"column":30}},"14":{"start":{"line":43,"column":4},"end":{"line":47,"column":46}},"15":{"start":{"line":49,"column":4},"end":{"line":52,"column":48}},"16":{"start":{"line":54,"column":4},"end":{"line":57,"column":46}},"17":{"start":{"line":59,"column":4},"end":{"line":61,"column":24}},"18":{"start":{"line":63,"column":4},"end":{"line":65,"column":24}},"19":{"start":{"line":67,"column":4},"end":{"line":70,"column":73}},"20":{"start":{"line":72,"column":4},"end":{"line":77,"column":69}},"21":{"start":{"line":79,"column":4},"end":{"line":82,"column":46}},"22":{"start":{"line":84,"column":4},"end":{"line":87,"column":46}},"23":{"start":{"line":89,"column":4},"end":{"line":92,"column":46}},"24":{"start":{"line":94,"column":4},"end":{"line":98,"column":41}},"25":{"start":{"line":100,"column":4},"end":{"line":102,"column":61}},"26":{"start":{"line":104,"column":4},"end":{"line":106,"column":61}}},"branchMap":{},"code":["module.exports = function (fork) {","    fork.use(require(\"./es7\"));","","    var types = fork.use(require(\"../lib/types\"));","    var defaults = fork.use(require(\"../lib/shared\")).defaults;","    var def = types.Type.def;","    var or = types.Type.or;","","    def(\"Noop\")","        .bases(\"Node\")","        .build();","","    def(\"DoExpression\")","        .bases(\"Expression\")","        .build(\"body\")","        .field(\"body\", [def(\"Statement\")]);","","    def(\"Super\")","        .bases(\"Expression\")","        .build();","","    def(\"BindExpression\")","        .bases(\"Expression\")","        .build(\"object\", \"callee\")","        .field(\"object\", or(def(\"Expression\"), null))","        .field(\"callee\", def(\"Expression\"));","","    def(\"Decorator\")","        .bases(\"Node\")","        .build(\"expression\")","        .field(\"expression\", def(\"Expression\"));","","    def(\"Property\")","        .field(\"decorators\",","            or([def(\"Decorator\")], null),","            defaults[\"null\"]);","","    def(\"MethodDefinition\")","        .field(\"decorators\",","            or([def(\"Decorator\")], null),","            defaults[\"null\"]);","","    def(\"MetaProperty\")","        .bases(\"Expression\")","        .build(\"meta\", \"property\")","        .field(\"meta\", def(\"Identifier\"))","        .field(\"property\", def(\"Identifier\"));","","    def(\"ParenthesizedExpression\")","        .bases(\"Expression\")","        .build(\"expression\")","        .field(\"expression\", def(\"Expression\"));","","    def(\"ImportSpecifier\")","        .bases(\"ModuleSpecifier\")","        .build(\"imported\", \"local\")","        .field(\"imported\", def(\"Identifier\"));","","    def(\"ImportDefaultSpecifier\")","        .bases(\"ModuleSpecifier\")","        .build(\"local\");","","    def(\"ImportNamespaceSpecifier\")","        .bases(\"ModuleSpecifier\")","        .build(\"local\");","","    def(\"ExportDefaultDeclaration\")","        .bases(\"Declaration\")","        .build(\"declaration\")","        .field(\"declaration\", or(def(\"Declaration\"), def(\"Expression\")));","","    def(\"ExportNamedDeclaration\")","        .bases(\"Declaration\")","        .build(\"declaration\", \"specifiers\", \"source\")","        .field(\"declaration\", or(def(\"Declaration\"), null))","        .field(\"specifiers\", [def(\"ExportSpecifier\")], defaults.emptyArray)","        .field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);","","    def(\"ExportSpecifier\")","        .bases(\"ModuleSpecifier\")","        .build(\"local\", \"exported\")","        .field(\"exported\", def(\"Identifier\"));","","    def(\"ExportNamespaceSpecifier\")","        .bases(\"Specifier\")","        .build(\"exported\")","        .field(\"exported\", def(\"Identifier\"));","","    def(\"ExportDefaultSpecifier\")","        .bases(\"Specifier\")","        .build(\"exported\")","        .field(\"exported\", def(\"Identifier\"));","","    def(\"ExportAllDeclaration\")","        .bases(\"Declaration\")","        .build(\"exported\", \"source\")","        .field(\"exported\", or(def(\"Identifier\"), null))","        .field(\"source\", def(\"Literal\"));","","    def(\"CommentBlock\")","        .bases(\"Comment\")","        .build(\"value\", /*optional:*/ \"leading\", \"trailing\");","","    def(\"CommentLine\")","        .bases(\"Comment\")","        .build(\"value\", /*optional:*/ \"leading\", \"trailing\");","};"],"l":{"1":1,"2":1,"4":1,"5":1,"6":1,"7":1,"9":1,"13":1,"18":1,"22":1,"28":1,"33":1,"38":1,"43":1,"49":1,"54":1,"59":1,"63":1,"67":1,"72":1,"79":1,"84":1,"89":1,"94":1,"100":1,"104":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/babel6.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/babel6.js","s":{"1":1,"2":1,"3":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":4,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":37}},"3":{"start":{"line":3,"column":2},"end":{"line":3,"column":30}}},"branchMap":{},"code":["module.exports = function (fork) {","  fork.use(require(\"./babel6-core\"));","  fork.use(require(\"./flow\"));","};",""],"l":{"1":1,"2":1,"3":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/types.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/types.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":566,"14":566,"15":0,"16":566,"17":0,"18":566,"19":566,"20":0,"21":566,"22":4059,"23":4059,"24":0,"25":4059,"26":1,"27":1,"28":1,"29":1522,"30":0,"31":0,"32":1522,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":10,"42":10,"43":9,"44":1,"45":1,"46":0,"47":1,"48":1,"49":1,"50":1,"51":1,"52":10,"53":10,"54":3876,"55":10,"56":10,"57":8,"58":8,"59":10,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":961,"72":145,"73":816,"74":348,"75":468,"76":71,"77":397,"78":2,"79":395,"80":248,"81":248,"82":248,"83":0,"84":147,"85":0,"86":0,"87":1,"88":131,"89":131,"90":131,"91":349,"92":131,"93":0,"94":0,"95":0,"96":0,"97":1,"98":1,"99":71,"100":0,"101":71,"102":0,"103":71,"104":1,"105":72,"106":72,"107":183,"108":324,"109":0,"110":1,"111":2,"112":4,"113":2,"114":0,"115":0,"116":0,"117":1,"118":541,"119":541,"120":0,"121":541,"122":541,"123":541,"124":541,"125":264,"126":541,"127":1,"128":1,"129":0,"130":1,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":1,"138":580,"139":580,"140":1,"141":1,"142":199,"143":199,"144":0,"145":199,"146":0,"147":1,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":1,"156":1,"157":0,"158":0,"159":0,"160":0,"161":0,"162":1,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":1,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":1,"185":0,"186":0,"187":0,"188":1,"189":0,"190":0,"191":0,"192":0,"193":0,"194":1,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":1,"212":206,"213":206,"214":206,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":206,"222":218,"223":218,"224":208,"225":206,"226":1,"227":1,"228":1,"229":1,"230":1,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":1,"238":1,"239":183,"240":183,"241":183,"242":183,"243":183,"244":14,"245":169,"246":0,"247":169,"248":169,"249":0,"250":0,"251":0,"252":0,"253":0,"254":1,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":169,"281":1,"282":262,"283":262,"284":262,"285":0,"286":236,"287":26,"288":1,"289":1,"290":47,"291":47,"292":1,"293":1,"294":537,"295":0,"296":0,"297":537,"298":537,"299":1,"300":1,"301":1,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":1,"309":1,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":1,"317":1,"318":0,"319":0,"320":1,"321":0,"322":0,"323":1,"324":1,"325":407,"326":407,"327":199,"328":199,"329":199,"330":208,"331":208,"332":208,"333":208,"334":208,"335":0,"336":0,"337":199,"338":199,"339":199,"340":199,"341":1012,"342":620,"343":199,"344":199,"345":199,"346":199,"347":47,"348":1,"349":47,"350":47,"351":1,"352":46,"353":46,"354":0,"355":46,"356":0,"357":1,"358":199,"359":199,"360":199,"361":199,"362":989,"363":989,"364":989,"365":0,"366":989,"367":150,"368":989,"369":989,"370":199,"371":989,"372":839,"373":199,"374":1,"375":615,"376":1898,"377":615,"378":1,"379":1,"380":199,"381":1},"b":{"1":[0,566],"2":[0,566],"3":[0,566],"4":[566,214],"5":[0,4059],"6":[4059,1217,0],"7":[0,1522],"8":[0,0],"9":[0,0],"10":[9,1],"11":[1,0],"12":[8,2],"13":[10,8],"14":[145,816],"15":[348,468],"16":[71,397],"17":[2,395],"18":[248,147],"19":[248,0],"20":[147,0],"21":[0,0],"22":[0,71],"23":[0,71],"24":[183,183],"25":[0,0],"26":[0,541],"27":[264,277],"28":[0,0],"29":[0,0],"30":[381,199],"31":[0,199],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,206],"57":[0,0],"58":[0,0],"59":[208,10],"60":[0,0],"61":[14,169],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,236,26],"71":[0,537],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[199,208],"78":[208,0],"79":[620,392],"80":[1012,1012],"81":[47,152],"82":[199,169],"83":[1,46],"84":[0,46],"85":[0,989],"86":[150,839],"87":[839,150]},"f":{"1":0,"2":1,"3":566,"4":4059,"5":1522,"6":0,"7":0,"8":10,"9":10,"10":3876,"11":0,"12":961,"13":0,"14":0,"15":131,"16":0,"17":1,"18":71,"19":72,"20":183,"21":324,"22":0,"23":2,"24":4,"25":0,"26":0,"27":0,"28":541,"29":0,"30":0,"31":580,"32":199,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":206,"42":218,"43":0,"44":183,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":262,"52":262,"53":47,"54":537,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":407,"62":208,"63":47,"64":0,"65":199,"66":615,"67":1898,"68":1,"69":199},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":40}}},"2":{"name":"(anonymous_2)","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":11,"column":29}}},"3":{"name":"Type","line":18,"loc":{"start":{"line":18,"column":4},"end":{"line":18,"column":31}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":23},"end":{"line":40,"column":46}}},"5":{"name":"(anonymous_5)","line":57,"loc":{"start":{"line":57,"column":16},"end":{"line":57,"column":39}}},"6":{"name":"shallowStringify","line":65,"loc":{"start":{"line":65,"column":4},"end":{"line":65,"column":37}}},"7":{"name":"(anonymous_7)","line":67,"loc":{"start":{"line":67,"column":48},"end":{"line":67,"column":63}}},"8":{"name":"(anonymous_8)","line":77,"loc":{"start":{"line":77,"column":18},"end":{"line":77,"column":30}}},"9":{"name":"defBuiltInType","line":94,"loc":{"start":{"line":94,"column":4},"end":{"line":94,"column":43}}},"10":{"name":"(anonymous_10)","line":97,"loc":{"start":{"line":97,"column":28},"end":{"line":97,"column":45}}},"11":{"name":"(anonymous_11)","line":116,"loc":{"start":{"line":116,"column":36},"end":{"line":116,"column":48}}},"12":{"name":"toType","line":129,"loc":{"start":{"line":129,"column":4},"end":{"line":129,"column":32}}},"13":{"name":"(anonymous_13)","line":163,"loc":{"start":{"line":163,"column":24},"end":{"line":163,"column":41}}},"14":{"name":"(anonymous_14)","line":165,"loc":{"start":{"line":165,"column":37},"end":{"line":165,"column":49}}},"15":{"name":"(anonymous_15)","line":172,"loc":{"start":{"line":172,"column":14},"end":{"line":172,"column":49}}},"16":{"name":"(anonymous_16)","line":178,"loc":{"start":{"line":178,"column":24},"end":{"line":178,"column":47}}},"17":{"name":"(anonymous_17)","line":183,"loc":{"start":{"line":183,"column":11},"end":{"line":183,"column":23}}},"18":{"name":"(anonymous_18)","line":188,"loc":{"start":{"line":188,"column":21},"end":{"line":188,"column":36}}},"19":{"name":"(anonymous_19)","line":198,"loc":{"start":{"line":198,"column":17},"end":{"line":198,"column":29}}},"20":{"name":"(anonymous_20)","line":200,"loc":{"start":{"line":200,"column":24},"end":{"line":200,"column":47}}},"21":{"name":"(anonymous_21)","line":201,"loc":{"start":{"line":201,"column":55},"end":{"line":201,"column":71}}},"22":{"name":"(anonymous_22)","line":204,"loc":{"start":{"line":204,"column":11},"end":{"line":204,"column":23}}},"23":{"name":"(anonymous_23)","line":209,"loc":{"start":{"line":209,"column":22},"end":{"line":209,"column":37}}},"24":{"name":"(anonymous_24)","line":210,"loc":{"start":{"line":210,"column":42},"end":{"line":210,"column":58}}},"25":{"name":"(anonymous_25)","line":214,"loc":{"start":{"line":214,"column":24},"end":{"line":214,"column":47}}},"26":{"name":"(anonymous_26)","line":215,"loc":{"start":{"line":215,"column":57},"end":{"line":215,"column":74}}},"27":{"name":"(anonymous_27)","line":218,"loc":{"start":{"line":218,"column":11},"end":{"line":218,"column":23}}},"28":{"name":"Field","line":223,"loc":{"start":{"line":223,"column":4},"end":{"line":223,"column":50}}},"29":{"name":"(anonymous_29)","line":248,"loc":{"start":{"line":248,"column":18},"end":{"line":248,"column":30}}},"30":{"name":"(anonymous_30)","line":252,"loc":{"start":{"line":252,"column":18},"end":{"line":252,"column":33}}},"31":{"name":"(anonymous_31)","line":269,"loc":{"start":{"line":269,"column":15},"end":{"line":269,"column":35}}},"32":{"name":"Def","line":280,"loc":{"start":{"line":280,"column":4},"end":{"line":280,"column":27}}},"33":{"name":"(anonymous_33)","line":298,"loc":{"start":{"line":298,"column":32},"end":{"line":298,"column":55}}},"34":{"name":"(anonymous_34)","line":305,"loc":{"start":{"line":305,"column":20},"end":{"line":305,"column":37}}},"35":{"name":"(anonymous_35)","line":322,"loc":{"start":{"line":322,"column":23},"end":{"line":322,"column":39}}},"36":{"name":"(anonymous_36)","line":336,"loc":{"start":{"line":336,"column":32},"end":{"line":336,"column":52}}},"37":{"name":"(anonymous_37)","line":350,"loc":{"start":{"line":350,"column":42},"end":{"line":350,"column":64}}},"38":{"name":"(anonymous_38)","line":373,"loc":{"start":{"line":373,"column":24},"end":{"line":373,"column":47}}},"39":{"name":"checkFieldByName","line":379,"loc":{"start":{"line":379,"column":8},"end":{"line":379,"column":40}}},"40":{"name":"(anonymous_40)","line":390,"loc":{"start":{"line":390,"column":15},"end":{"line":390,"column":38}}},"41":{"name":"(anonymous_41)","line":442,"loc":{"start":{"line":442,"column":15},"end":{"line":442,"column":27}}},"42":{"name":"(anonymous_42)","line":458,"loc":{"start":{"line":458,"column":21},"end":{"line":458,"column":41}}},"43":{"name":"(anonymous_43)","line":481,"loc":{"start":{"line":481,"column":27},"end":{"line":481,"column":49}}},"44":{"name":"(anonymous_44)","line":507,"loc":{"start":{"line":507,"column":15},"end":{"line":507,"column":52}}},"45":{"name":"(anonymous_45)","line":531,"loc":{"start":{"line":531,"column":35},"end":{"line":531,"column":47}}},"46":{"name":"(anonymous_46)","line":539,"loc":{"start":{"line":539,"column":19},"end":{"line":539,"column":31}}},"47":{"name":"add","line":551,"loc":{"start":{"line":551,"column":16},"end":{"line":551,"column":39}}},"48":{"name":"(anonymous_48)","line":573,"loc":{"start":{"line":573,"column":47},"end":{"line":573,"column":63}}},"49":{"name":"(anonymous_49)","line":592,"loc":{"start":{"line":592,"column":41},"end":{"line":592,"column":61}}},"50":{"name":"(anonymous_50)","line":596,"loc":{"start":{"line":596,"column":52},"end":{"line":596,"column":69}}},"51":{"name":"getBuilderName","line":612,"loc":{"start":{"line":612,"column":4},"end":{"line":612,"column":38}}},"52":{"name":"(anonymous_52)","line":613,"loc":{"start":{"line":613,"column":43},"end":{"line":613,"column":70}}},"53":{"name":"getStatementBuilderName","line":631,"loc":{"start":{"line":631,"column":4},"end":{"line":631,"column":47}}},"54":{"name":"(anonymous_54)","line":641,"loc":{"start":{"line":641,"column":15},"end":{"line":641,"column":56}}},"55":{"name":"getFieldNames","line":656,"loc":{"start":{"line":656,"column":4},"end":{"line":656,"column":35}}},"56":{"name":"getFieldValue","line":675,"loc":{"start":{"line":675,"column":4},"end":{"line":675,"column":46}}},"57":{"name":"(anonymous_57)","line":692,"loc":{"start":{"line":692,"column":24},"end":{"line":692,"column":61}}},"58":{"name":"(anonymous_58)","line":693,"loc":{"start":{"line":693,"column":38},"end":{"line":693,"column":54}}},"59":{"name":"(anonymous_59)","line":702,"loc":{"start":{"line":702,"column":24},"end":{"line":702,"column":61}}},"60":{"name":"(anonymous_60)","line":703,"loc":{"start":{"line":703,"column":42},"end":{"line":703,"column":58}}},"61":{"name":"(anonymous_61)","line":712,"loc":{"start":{"line":712,"column":18},"end":{"line":712,"column":30}}},"62":{"name":"(anonymous_62)","line":721,"loc":{"start":{"line":721,"column":35},"end":{"line":721,"column":51}}},"63":{"name":"wrapExpressionBuilderWithStatement","line":767,"loc":{"start":{"line":767,"column":4},"end":{"line":767,"column":58}}},"64":{"name":"(anonymous_64)","line":779,"loc":{"start":{"line":779,"column":32},"end":{"line":779,"column":44}}},"65":{"name":"populateSupertypeList","line":784,"loc":{"start":{"line":784,"column":4},"end":{"line":784,"column":51}}},"66":{"name":"extend","line":820,"loc":{"start":{"line":820,"column":4},"end":{"line":820,"column":32}}},"67":{"name":"(anonymous_67)","line":821,"loc":{"start":{"line":821,"column":34},"end":{"line":821,"column":50}}},"68":{"name":"(anonymous_68)","line":828,"loc":{"start":{"line":828,"column":23},"end":{"line":828,"column":35}}},"69":{"name":"(anonymous_69)","line":829,"loc":{"start":{"line":829,"column":38},"end":{"line":829,"column":54}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":21}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":17}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":22}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"8":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"9":{"start":{"line":9,"column":0},"end":{"line":9,"column":31}},"10":{"start":{"line":11,"column":0},"end":{"line":835,"column":2}},"11":{"start":{"line":13,"column":4},"end":{"line":13,"column":21}},"12":{"start":{"line":18,"column":4},"end":{"line":48,"column":5}},"13":{"start":{"line":19,"column":8},"end":{"line":19,"column":24}},"14":{"start":{"line":20,"column":8},"end":{"line":22,"column":9}},"15":{"start":{"line":21,"column":12},"end":{"line":21,"column":80}},"16":{"start":{"line":26,"column":8},"end":{"line":28,"column":9}},"17":{"start":{"line":27,"column":12},"end":{"line":27,"column":58}},"18":{"start":{"line":31,"column":8},"end":{"line":31,"column":45}},"19":{"start":{"line":32,"column":8},"end":{"line":35,"column":9}},"20":{"start":{"line":34,"column":12},"end":{"line":34,"column":74}},"21":{"start":{"line":37,"column":8},"end":{"line":47,"column":11}},"22":{"start":{"line":41,"column":20},"end":{"line":41,"column":63}},"23":{"start":{"line":42,"column":20},"end":{"line":43,"column":42}},"24":{"start":{"line":43,"column":24},"end":{"line":43,"column":42}},"25":{"start":{"line":44,"column":20},"end":{"line":44,"column":34}},"26":{"start":{"line":50,"column":4},"end":{"line":50,"column":28}},"27":{"start":{"line":54,"column":4},"end":{"line":54,"column":24}},"28":{"start":{"line":57,"column":4},"end":{"line":63,"column":6}},"29":{"start":{"line":58,"column":8},"end":{"line":61,"column":9}},"30":{"start":{"line":59,"column":12},"end":{"line":59,"column":46}},"31":{"start":{"line":60,"column":12},"end":{"line":60,"column":66}},"32":{"start":{"line":62,"column":8},"end":{"line":62,"column":20}},"33":{"start":{"line":65,"column":4},"end":{"line":75,"column":5}},"34":{"start":{"line":66,"column":8},"end":{"line":69,"column":34}},"35":{"start":{"line":67,"column":12},"end":{"line":69,"column":34}},"36":{"start":{"line":68,"column":18},"end":{"line":68,"column":49}},"37":{"start":{"line":71,"column":8},"end":{"line":72,"column":70}},"38":{"start":{"line":72,"column":12},"end":{"line":72,"column":70}},"39":{"start":{"line":74,"column":8},"end":{"line":74,"column":37}},"40":{"start":{"line":77,"column":4},"end":{"line":87,"column":6}},"41":{"start":{"line":78,"column":8},"end":{"line":78,"column":29}},"42":{"start":{"line":80,"column":8},"end":{"line":81,"column":24}},"43":{"start":{"line":81,"column":12},"end":{"line":81,"column":24}},"44":{"start":{"line":83,"column":8},"end":{"line":84,"column":40}},"45":{"start":{"line":84,"column":12},"end":{"line":84,"column":40}},"46":{"start":{"line":86,"column":8},"end":{"line":86,"column":30}},"47":{"start":{"line":89,"column":4},"end":{"line":89,"column":28}},"48":{"start":{"line":90,"column":4},"end":{"line":90,"column":30}},"49":{"start":{"line":91,"column":4},"end":{"line":91,"column":26}},"50":{"start":{"line":92,"column":4},"end":{"line":92,"column":40}},"51":{"start":{"line":94,"column":4},"end":{"line":109,"column":5}},"52":{"start":{"line":95,"column":8},"end":{"line":95,"column":44}},"53":{"start":{"line":97,"column":8},"end":{"line":99,"column":17}},"54":{"start":{"line":98,"column":12},"end":{"line":98,"column":51}},"55":{"start":{"line":101,"column":8},"end":{"line":101,"column":34}},"56":{"start":{"line":103,"column":8},"end":{"line":106,"column":9}},"57":{"start":{"line":104,"column":12},"end":{"line":104,"column":53}},"58":{"start":{"line":105,"column":12},"end":{"line":105,"column":40}},"59":{"start":{"line":108,"column":8},"end":{"line":108,"column":20}},"60":{"start":{"line":115,"column":4},"end":{"line":115,"column":54}},"61":{"start":{"line":116,"column":4},"end":{"line":116,"column":64}},"62":{"start":{"line":117,"column":4},"end":{"line":117,"column":46}},"63":{"start":{"line":118,"column":4},"end":{"line":118,"column":48}},"64":{"start":{"line":119,"column":4},"end":{"line":119,"column":49}},"65":{"start":{"line":120,"column":4},"end":{"line":120,"column":50}},"66":{"start":{"line":121,"column":4},"end":{"line":121,"column":47}},"67":{"start":{"line":122,"column":4},"end":{"line":122,"column":52}},"68":{"start":{"line":123,"column":4},"end":{"line":123,"column":46}},"69":{"start":{"line":124,"column":4},"end":{"line":124,"column":58}},"70":{"start":{"line":129,"column":4},"end":{"line":168,"column":5}},"71":{"start":{"line":131,"column":8},"end":{"line":132,"column":24}},"72":{"start":{"line":132,"column":12},"end":{"line":132,"column":24}},"73":{"start":{"line":136,"column":8},"end":{"line":137,"column":29}},"74":{"start":{"line":137,"column":12},"end":{"line":137,"column":29}},"75":{"start":{"line":140,"column":8},"end":{"line":141,"column":40}},"76":{"start":{"line":141,"column":12},"end":{"line":141,"column":40}},"77":{"start":{"line":144,"column":8},"end":{"line":145,"column":41}},"78":{"start":{"line":145,"column":12},"end":{"line":145,"column":41}},"79":{"start":{"line":147,"column":8},"end":{"line":157,"column":9}},"80":{"start":{"line":148,"column":12},"end":{"line":148,"column":57}},"81":{"start":{"line":149,"column":12},"end":{"line":151,"column":13}},"82":{"start":{"line":150,"column":16},"end":{"line":150,"column":51}},"83":{"start":{"line":156,"column":12},"end":{"line":156,"column":40}},"84":{"start":{"line":163,"column":8},"end":{"line":167,"column":18}},"85":{"start":{"line":164,"column":12},"end":{"line":164,"column":34}},"86":{"start":{"line":166,"column":12},"end":{"line":166,"column":29}},"87":{"start":{"line":172,"column":4},"end":{"line":186,"column":6}},"88":{"start":{"line":173,"column":8},"end":{"line":173,"column":23}},"89":{"start":{"line":174,"column":8},"end":{"line":174,"column":35}},"90":{"start":{"line":175,"column":8},"end":{"line":176,"column":45}},"91":{"start":{"line":176,"column":12},"end":{"line":176,"column":45}},"92":{"start":{"line":178,"column":8},"end":{"line":185,"column":11}},"93":{"start":{"line":179,"column":12},"end":{"line":181,"column":32}},"94":{"start":{"line":180,"column":16},"end":{"line":181,"column":32}},"95":{"start":{"line":181,"column":20},"end":{"line":181,"column":32}},"96":{"start":{"line":182,"column":12},"end":{"line":182,"column":25}},"97":{"start":{"line":184,"column":12},"end":{"line":184,"column":37}},"98":{"start":{"line":188,"column":4},"end":{"line":196,"column":6}},"99":{"start":{"line":189,"column":8},"end":{"line":191,"column":9}},"100":{"start":{"line":190,"column":12},"end":{"line":190,"column":32}},"101":{"start":{"line":192,"column":8},"end":{"line":194,"column":9}},"102":{"start":{"line":193,"column":12},"end":{"line":193,"column":83}},"103":{"start":{"line":195,"column":8},"end":{"line":195,"column":40}},"104":{"start":{"line":198,"column":4},"end":{"line":207,"column":6}},"105":{"start":{"line":199,"column":8},"end":{"line":199,"column":28}},"106":{"start":{"line":200,"column":8},"end":{"line":206,"column":11}},"107":{"start":{"line":201,"column":12},"end":{"line":203,"column":17}},"108":{"start":{"line":202,"column":18},"end":{"line":202,"column":52}},"109":{"start":{"line":205,"column":12},"end":{"line":205,"column":40}},"110":{"start":{"line":209,"column":4},"end":{"line":221,"column":6}},"111":{"start":{"line":210,"column":8},"end":{"line":212,"column":11}},"112":{"start":{"line":211,"column":12},"end":{"line":211,"column":46}},"113":{"start":{"line":214,"column":8},"end":{"line":220,"column":11}},"114":{"start":{"line":215,"column":12},"end":{"line":217,"column":17}},"115":{"start":{"line":216,"column":18},"end":{"line":216,"column":67}},"116":{"start":{"line":219,"column":12},"end":{"line":219,"column":51}},"117":{"start":{"line":223,"column":4},"end":{"line":244,"column":5}},"118":{"start":{"line":224,"column":8},"end":{"line":224,"column":24}},"119":{"start":{"line":226,"column":8},"end":{"line":228,"column":9}},"120":{"start":{"line":227,"column":12},"end":{"line":227,"column":81}},"121":{"start":{"line":229,"column":8},"end":{"line":229,"column":30}},"122":{"start":{"line":231,"column":8},"end":{"line":231,"column":28}},"123":{"start":{"line":233,"column":8},"end":{"line":237,"column":10}},"124":{"start":{"line":239,"column":8},"end":{"line":241,"column":9}},"125":{"start":{"line":240,"column":12},"end":{"line":240,"column":54}},"126":{"start":{"line":243,"column":8},"end":{"line":243,"column":50}},"127":{"start":{"line":246,"column":4},"end":{"line":246,"column":29}},"128":{"start":{"line":248,"column":4},"end":{"line":250,"column":6}},"129":{"start":{"line":249,"column":8},"end":{"line":249,"column":60}},"130":{"start":{"line":252,"column":4},"end":{"line":262,"column":6}},"131":{"start":{"line":253,"column":8},"end":{"line":253,"column":35}},"132":{"start":{"line":255,"column":8},"end":{"line":256,"column":25}},"133":{"start":{"line":256,"column":12},"end":{"line":256,"column":25}},"134":{"start":{"line":258,"column":8},"end":{"line":259,"column":45}},"135":{"start":{"line":259,"column":12},"end":{"line":259,"column":45}},"136":{"start":{"line":261,"column":8},"end":{"line":261,"column":21}},"137":{"start":{"line":269,"column":4},"end":{"line":274,"column":6}},"138":{"start":{"line":270,"column":8},"end":{"line":270,"column":34}},"139":{"start":{"line":271,"column":8},"end":{"line":273,"column":51}},"140":{"start":{"line":278,"column":4},"end":{"line":278,"column":39}},"141":{"start":{"line":280,"column":4},"end":{"line":303,"column":5}},"142":{"start":{"line":281,"column":8},"end":{"line":281,"column":24}},"143":{"start":{"line":282,"column":8},"end":{"line":284,"column":9}},"144":{"start":{"line":283,"column":12},"end":{"line":283,"column":79}},"145":{"start":{"line":286,"column":8},"end":{"line":302,"column":11}},"146":{"start":{"line":299,"column":20},"end":{"line":299,"column":51}},"147":{"start":{"line":305,"column":4},"end":{"line":318,"column":6}},"148":{"start":{"line":306,"column":8},"end":{"line":315,"column":9}},"149":{"start":{"line":307,"column":12},"end":{"line":307,"column":34}},"150":{"start":{"line":308,"column":12},"end":{"line":314,"column":13}},"151":{"start":{"line":310,"column":16},"end":{"line":310,"column":39}},"152":{"start":{"line":311,"column":16},"end":{"line":313,"column":17}},"153":{"start":{"line":312,"column":20},"end":{"line":312,"column":29}},"154":{"start":{"line":317,"column":8},"end":{"line":317,"column":20}},"155":{"start":{"line":320,"column":4},"end":{"line":320,"column":27}},"156":{"start":{"line":322,"column":4},"end":{"line":332,"column":6}},"157":{"start":{"line":323,"column":8},"end":{"line":331,"column":9}},"158":{"start":{"line":324,"column":12},"end":{"line":327,"column":13}},"159":{"start":{"line":326,"column":16},"end":{"line":326,"column":36}},"160":{"start":{"line":328,"column":12},"end":{"line":328,"column":66}},"161":{"start":{"line":330,"column":12},"end":{"line":330,"column":52}},"162":{"start":{"line":336,"column":4},"end":{"line":345,"column":6}},"163":{"start":{"line":337,"column":8},"end":{"line":339,"column":9}},"164":{"start":{"line":338,"column":12},"end":{"line":338,"column":32}},"165":{"start":{"line":340,"column":8},"end":{"line":340,"column":35}},"166":{"start":{"line":341,"column":8},"end":{"line":343,"column":9}},"167":{"start":{"line":342,"column":12},"end":{"line":342,"column":32}},"168":{"start":{"line":344,"column":8},"end":{"line":344,"column":40}},"169":{"start":{"line":350,"column":4},"end":{"line":371,"column":6}},"170":{"start":{"line":351,"column":8},"end":{"line":351,"column":23}},"171":{"start":{"line":352,"column":8},"end":{"line":352,"column":46}},"172":{"start":{"line":353,"column":8},"end":{"line":353,"column":45}},"173":{"start":{"line":355,"column":8},"end":{"line":368,"column":9}},"174":{"start":{"line":356,"column":12},"end":{"line":356,"column":40}},"175":{"start":{"line":357,"column":12},"end":{"line":357,"column":39}},"176":{"start":{"line":358,"column":12},"end":{"line":360,"column":13}},"177":{"start":{"line":359,"column":16},"end":{"line":359,"column":47}},"178":{"start":{"line":361,"column":12},"end":{"line":367,"column":13}},"179":{"start":{"line":362,"column":16},"end":{"line":362,"column":55}},"180":{"start":{"line":363,"column":16},"end":{"line":366,"column":17}},"181":{"start":{"line":364,"column":20},"end":{"line":364,"column":52}},"182":{"start":{"line":365,"column":20},"end":{"line":365,"column":26}},"183":{"start":{"line":370,"column":8},"end":{"line":370,"column":21}},"184":{"start":{"line":373,"column":4},"end":{"line":388,"column":6}},"185":{"start":{"line":374,"column":8},"end":{"line":374,"column":39}},"186":{"start":{"line":375,"column":8},"end":{"line":377,"column":9}},"187":{"start":{"line":376,"column":12},"end":{"line":376,"column":48}},"188":{"start":{"line":379,"column":8},"end":{"line":384,"column":9}},"189":{"start":{"line":380,"column":12},"end":{"line":380,"column":40}},"190":{"start":{"line":381,"column":12},"end":{"line":381,"column":34}},"191":{"start":{"line":382,"column":12},"end":{"line":382,"column":46}},"192":{"start":{"line":383,"column":12},"end":{"line":383,"column":43}},"193":{"start":{"line":386,"column":8},"end":{"line":387,"column":60}},"194":{"start":{"line":390,"column":4},"end":{"line":440,"column":6}},"195":{"start":{"line":391,"column":8},"end":{"line":395,"column":9}},"196":{"start":{"line":392,"column":12},"end":{"line":394,"column":14}},"197":{"start":{"line":398,"column":8},"end":{"line":399,"column":25}},"198":{"start":{"line":399,"column":12},"end":{"line":399,"column":25}},"199":{"start":{"line":401,"column":8},"end":{"line":401,"column":40}},"200":{"start":{"line":402,"column":8},"end":{"line":416,"column":9}},"201":{"start":{"line":408,"column":12},"end":{"line":411,"column":13}},"202":{"start":{"line":410,"column":16},"end":{"line":410,"column":56}},"203":{"start":{"line":415,"column":12},"end":{"line":415,"column":25}},"204":{"start":{"line":421,"column":8},"end":{"line":422,"column":52}},"205":{"start":{"line":422,"column":12},"end":{"line":422,"column":52}},"206":{"start":{"line":428,"column":8},"end":{"line":429,"column":25}},"207":{"start":{"line":429,"column":12},"end":{"line":429,"column":25}},"208":{"start":{"line":433,"column":8},"end":{"line":434,"column":24}},"209":{"start":{"line":434,"column":12},"end":{"line":434,"column":24}},"210":{"start":{"line":438,"column":8},"end":{"line":439,"column":47}},"211":{"start":{"line":442,"column":4},"end":{"line":468,"column":6}},"212":{"start":{"line":443,"column":8},"end":{"line":443,"column":41}},"213":{"start":{"line":444,"column":8},"end":{"line":444,"column":35}},"214":{"start":{"line":446,"column":8},"end":{"line":456,"column":9}},"215":{"start":{"line":447,"column":12},"end":{"line":449,"column":13}},"216":{"start":{"line":448,"column":16},"end":{"line":448,"column":36}},"217":{"start":{"line":450,"column":12},"end":{"line":454,"column":13}},"218":{"start":{"line":451,"column":16},"end":{"line":453,"column":17}},"219":{"start":{"line":452,"column":20},"end":{"line":452,"column":40}},"220":{"start":{"line":455,"column":12},"end":{"line":455,"column":24}},"221":{"start":{"line":458,"column":8},"end":{"line":465,"column":11}},"222":{"start":{"line":459,"column":12},"end":{"line":459,"column":38}},"223":{"start":{"line":463,"column":12},"end":{"line":464,"column":37}},"224":{"start":{"line":464,"column":16},"end":{"line":464,"column":37}},"225":{"start":{"line":467,"column":8},"end":{"line":467,"column":20}},"226":{"start":{"line":471,"column":4},"end":{"line":471,"column":59}},"227":{"start":{"line":473,"column":4},"end":{"line":473,"column":22}},"228":{"start":{"line":474,"column":4},"end":{"line":474,"column":32}},"229":{"start":{"line":477,"column":4},"end":{"line":477,"column":27}},"230":{"start":{"line":481,"column":4},"end":{"line":499,"column":6}},"231":{"start":{"line":482,"column":8},"end":{"line":482,"column":38}},"232":{"start":{"line":485,"column":8},"end":{"line":496,"column":9}},"233":{"start":{"line":486,"column":12},"end":{"line":486,"column":39}},"234":{"start":{"line":489,"column":12},"end":{"line":489,"column":36}},"235":{"start":{"line":491,"column":12},"end":{"line":495,"column":15}},"236":{"start":{"line":498,"column":8},"end":{"line":498,"column":19}},"237":{"start":{"line":501,"column":4},"end":{"line":501,"column":45}},"238":{"start":{"line":507,"column":4},"end":{"line":610,"column":6}},"239":{"start":{"line":508,"column":8},"end":{"line":508,"column":24}},"240":{"start":{"line":510,"column":8},"end":{"line":510,"column":51}},"241":{"start":{"line":511,"column":8},"end":{"line":511,"column":47}},"242":{"start":{"line":515,"column":8},"end":{"line":520,"column":11}},"243":{"start":{"line":522,"column":8},"end":{"line":526,"column":9}},"244":{"start":{"line":525,"column":12},"end":{"line":525,"column":24}},"245":{"start":{"line":531,"column":8},"end":{"line":531,"column":73}},"246":{"start":{"line":531,"column":49},"end":{"line":531,"column":70}},"247":{"start":{"line":534,"column":8},"end":{"line":534,"column":64}},"248":{"start":{"line":536,"column":8},"end":{"line":607,"column":11}},"249":{"start":{"line":540,"column":16},"end":{"line":540,"column":37}},"250":{"start":{"line":541,"column":16},"end":{"line":541,"column":39}},"251":{"start":{"line":542,"column":16},"end":{"line":542,"column":57}},"252":{"start":{"line":544,"column":16},"end":{"line":549,"column":17}},"253":{"start":{"line":545,"column":20},"end":{"line":548,"column":22}},"254":{"start":{"line":551,"column":16},"end":{"line":590,"column":17}},"255":{"start":{"line":552,"column":20},"end":{"line":553,"column":31}},"256":{"start":{"line":553,"column":24},"end":{"line":553,"column":31}},"257":{"start":{"line":555,"column":20},"end":{"line":555,"column":45}},"258":{"start":{"line":556,"column":20},"end":{"line":558,"column":21}},"259":{"start":{"line":557,"column":24},"end":{"line":557,"column":52}},"260":{"start":{"line":560,"column":20},"end":{"line":560,"column":43}},"261":{"start":{"line":561,"column":20},"end":{"line":561,"column":42}},"262":{"start":{"line":562,"column":20},"end":{"line":562,"column":30}},"263":{"start":{"line":564,"column":20},"end":{"line":577,"column":21}},"264":{"start":{"line":565,"column":24},"end":{"line":565,"column":40}},"265":{"start":{"line":566,"column":27},"end":{"line":577,"column":21}},"266":{"start":{"line":569,"column":24},"end":{"line":569,"column":60}},"267":{"start":{"line":571,"column":24},"end":{"line":575,"column":46}},"268":{"start":{"line":574,"column":30},"end":{"line":574,"column":47}},"269":{"start":{"line":576,"column":24},"end":{"line":576,"column":49}},"270":{"start":{"line":579,"column":20},"end":{"line":585,"column":21}},"271":{"start":{"line":580,"column":24},"end":{"line":584,"column":26}},"272":{"start":{"line":589,"column":20},"end":{"line":589,"column":41}},"273":{"start":{"line":592,"column":16},"end":{"line":594,"column":19}},"274":{"start":{"line":593,"column":20},"end":{"line":593,"column":34}},"275":{"start":{"line":596,"column":16},"end":{"line":598,"column":19}},"276":{"start":{"line":597,"column":20},"end":{"line":597,"column":31}},"277":{"start":{"line":601,"column":16},"end":{"line":603,"column":17}},"278":{"start":{"line":602,"column":20},"end":{"line":602,"column":40}},"279":{"start":{"line":605,"column":16},"end":{"line":605,"column":29}},"280":{"start":{"line":609,"column":8},"end":{"line":609,"column":20}},"281":{"start":{"line":612,"column":4},"end":{"line":628,"column":5}},"282":{"start":{"line":613,"column":8},"end":{"line":627,"column":11}},"283":{"start":{"line":614,"column":12},"end":{"line":614,"column":45}},"284":{"start":{"line":615,"column":12},"end":{"line":626,"column":13}},"285":{"start":{"line":616,"column":24},"end":{"line":616,"column":34}},"286":{"start":{"line":618,"column":24},"end":{"line":618,"column":61}},"287":{"start":{"line":623,"column":20},"end":{"line":625,"column":54}},"288":{"start":{"line":629,"column":4},"end":{"line":629,"column":44}},"289":{"start":{"line":631,"column":4},"end":{"line":634,"column":5}},"290":{"start":{"line":632,"column":8},"end":{"line":632,"column":44}},"291":{"start":{"line":633,"column":8},"end":{"line":633,"column":63}},"292":{"start":{"line":635,"column":4},"end":{"line":635,"column":62}},"293":{"start":{"line":641,"column":4},"end":{"line":650,"column":6}},"294":{"start":{"line":642,"column":8},"end":{"line":647,"column":9}},"295":{"start":{"line":643,"column":12},"end":{"line":645,"column":45}},"296":{"start":{"line":646,"column":12},"end":{"line":646,"column":24}},"297":{"start":{"line":648,"column":8},"end":{"line":648,"column":72}},"298":{"start":{"line":649,"column":8},"end":{"line":649,"column":20}},"299":{"start":{"line":652,"column":4},"end":{"line":652,"column":24}},"300":{"start":{"line":653,"column":4},"end":{"line":653,"column":36}},"301":{"start":{"line":656,"column":4},"end":{"line":670,"column":5}},"302":{"start":{"line":657,"column":8},"end":{"line":657,"column":38}},"303":{"start":{"line":658,"column":8},"end":{"line":660,"column":9}},"304":{"start":{"line":659,"column":12},"end":{"line":659,"column":41}},"305":{"start":{"line":662,"column":8},"end":{"line":667,"column":9}},"306":{"start":{"line":663,"column":12},"end":{"line":666,"column":14}},"307":{"start":{"line":669,"column":8},"end":{"line":669,"column":35}},"308":{"start":{"line":671,"column":4},"end":{"line":671,"column":42}},"309":{"start":{"line":675,"column":4},"end":{"line":685,"column":5}},"310":{"start":{"line":676,"column":8},"end":{"line":676,"column":38}},"311":{"start":{"line":677,"column":8},"end":{"line":682,"column":9}},"312":{"start":{"line":678,"column":12},"end":{"line":678,"column":47}},"313":{"start":{"line":679,"column":12},"end":{"line":681,"column":13}},"314":{"start":{"line":680,"column":16},"end":{"line":680,"column":46}},"315":{"start":{"line":684,"column":8},"end":{"line":684,"column":43}},"316":{"start":{"line":686,"column":4},"end":{"line":686,"column":42}},"317":{"start":{"line":692,"column":4},"end":{"line":696,"column":6}},"318":{"start":{"line":693,"column":8},"end":{"line":695,"column":20}},"319":{"start":{"line":694,"column":12},"end":{"line":694,"column":67}},"320":{"start":{"line":702,"column":4},"end":{"line":706,"column":6}},"321":{"start":{"line":703,"column":8},"end":{"line":705,"column":20}},"322":{"start":{"line":704,"column":12},"end":{"line":704,"column":74}},"323":{"start":{"line":710,"column":4},"end":{"line":710,"column":59}},"324":{"start":{"line":712,"column":4},"end":{"line":763,"column":6}},"325":{"start":{"line":713,"column":8},"end":{"line":713,"column":24}},"326":{"start":{"line":717,"column":8},"end":{"line":762,"column":9}},"327":{"start":{"line":718,"column":12},"end":{"line":718,"column":43}},"328":{"start":{"line":719,"column":12},"end":{"line":719,"column":51}},"329":{"start":{"line":721,"column":12},"end":{"line":734,"column":15}},"330":{"start":{"line":722,"column":16},"end":{"line":722,"column":41}},"331":{"start":{"line":723,"column":16},"end":{"line":733,"column":17}},"332":{"start":{"line":724,"column":20},"end":{"line":724,"column":35}},"333":{"start":{"line":725,"column":20},"end":{"line":725,"column":53}},"334":{"start":{"line":726,"column":20},"end":{"line":726,"column":61}},"335":{"start":{"line":728,"column":20},"end":{"line":731,"column":52}},"336":{"start":{"line":732,"column":20},"end":{"line":732,"column":45}},"337":{"start":{"line":737,"column":12},"end":{"line":737,"column":46}},"338":{"start":{"line":738,"column":12},"end":{"line":738,"column":48}},"339":{"start":{"line":740,"column":12},"end":{"line":740,"column":39}},"340":{"start":{"line":741,"column":12},"end":{"line":746,"column":13}},"341":{"start":{"line":742,"column":16},"end":{"line":745,"column":17}},"342":{"start":{"line":744,"column":24},"end":{"line":744,"column":56}},"343":{"start":{"line":749,"column":12},"end":{"line":752,"column":15}},"344":{"start":{"line":754,"column":12},"end":{"line":754,"column":68}},"345":{"start":{"line":757,"column":12},"end":{"line":757,"column":69}},"346":{"start":{"line":759,"column":12},"end":{"line":761,"column":13}},"347":{"start":{"line":760,"column":16},"end":{"line":760,"column":66}},"348":{"start":{"line":767,"column":4},"end":{"line":782,"column":5}},"349":{"start":{"line":768,"column":8},"end":{"line":768,"column":60}},"350":{"start":{"line":771,"column":8},"end":{"line":771,"column":42}},"351":{"start":{"line":771,"column":35},"end":{"line":771,"column":42}},"352":{"start":{"line":774,"column":8},"end":{"line":774,"column":57}},"353":{"start":{"line":777,"column":8},"end":{"line":777,"column":29}},"354":{"start":{"line":777,"column":22},"end":{"line":777,"column":29}},"355":{"start":{"line":779,"column":8},"end":{"line":781,"column":10}},"356":{"start":{"line":780,"column":12},"end":{"line":780,"column":84}},"357":{"start":{"line":784,"column":4},"end":{"line":818,"column":5}},"358":{"start":{"line":785,"column":8},"end":{"line":785,"column":24}},"359":{"start":{"line":786,"column":8},"end":{"line":786,"column":28}},"360":{"start":{"line":788,"column":8},"end":{"line":788,"column":43}},"361":{"start":{"line":790,"column":8},"end":{"line":808,"column":9}},"362":{"start":{"line":791,"column":12},"end":{"line":791,"column":33}},"363":{"start":{"line":792,"column":12},"end":{"line":792,"column":39}},"364":{"start":{"line":793,"column":12},"end":{"line":795,"column":13}},"365":{"start":{"line":794,"column":16},"end":{"line":794,"column":36}},"366":{"start":{"line":799,"column":12},"end":{"line":801,"column":13}},"367":{"start":{"line":800,"column":16},"end":{"line":800,"column":48}},"368":{"start":{"line":804,"column":12},"end":{"line":804,"column":37}},"369":{"start":{"line":807,"column":12},"end":{"line":807,"column":47}},"370":{"start":{"line":811,"column":8},"end":{"line":815,"column":9}},"371":{"start":{"line":812,"column":12},"end":{"line":814,"column":13}},"372":{"start":{"line":813,"column":16},"end":{"line":813,"column":40}},"373":{"start":{"line":817,"column":8},"end":{"line":817,"column":25}},"374":{"start":{"line":820,"column":4},"end":{"line":826,"column":5}},"375":{"start":{"line":821,"column":8},"end":{"line":823,"column":11}},"376":{"start":{"line":822,"column":12},"end":{"line":822,"column":36}},"377":{"start":{"line":825,"column":8},"end":{"line":825,"column":20}},"378":{"start":{"line":828,"column":4},"end":{"line":832,"column":6}},"379":{"start":{"line":829,"column":8},"end":{"line":831,"column":11}},"380":{"start":{"line":830,"column":12},"end":{"line":830,"column":38}},"381":{"start":{"line":834,"column":4},"end":{"line":834,"column":19}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":8},"end":{"line":20,"column":8}},{"start":{"line":20,"column":8},"end":{"line":20,"column":8}}]},"2":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":26,"column":8}},{"start":{"line":26,"column":8},"end":{"line":26,"column":8}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"4":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":14},"end":{"line":32,"column":38}},{"start":{"line":33,"column":10},"end":{"line":33,"column":34}}]},"5":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":20},"end":{"line":42,"column":20}},{"start":{"line":42,"column":20},"end":{"line":42,"column":20}}]},"6":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":24},"end":{"line":42,"column":31}},{"start":{"line":42,"column":35},"end":{"line":42,"column":39}},{"start":{"line":42,"column":43},"end":{"line":42,"column":76}}]},"7":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"8":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":66,"column":8}},{"start":{"line":66,"column":8},"end":{"line":66,"column":8}}]},"9":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":71,"column":8}},{"start":{"line":71,"column":8},"end":{"line":71,"column":8}}]},"10":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":8}},{"start":{"line":80,"column":8},"end":{"line":80,"column":8}}]},"11":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":8}},{"start":{"line":83,"column":8},"end":{"line":83,"column":8}}]},"12":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":8},"end":{"line":103,"column":8}},{"start":{"line":103,"column":8},"end":{"line":103,"column":8}}]},"13":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":12},"end":{"line":103,"column":19}},{"start":{"line":103,"column":23},"end":{"line":103,"column":64}}]},"14":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":8},"end":{"line":131,"column":8}},{"start":{"line":131,"column":8},"end":{"line":131,"column":8}}]},"15":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":136,"column":8}},{"start":{"line":136,"column":8},"end":{"line":136,"column":8}}]},"16":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":8},"end":{"line":140,"column":8}},{"start":{"line":140,"column":8},"end":{"line":140,"column":8}}]},"17":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":8},"end":{"line":144,"column":8}},{"start":{"line":144,"column":8},"end":{"line":144,"column":8}}]},"18":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":8},"end":{"line":147,"column":8}},{"start":{"line":147,"column":8},"end":{"line":147,"column":8}}]},"19":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":12},"end":{"line":149,"column":12}},{"start":{"line":149,"column":12},"end":{"line":149,"column":12}}]},"20":{"line":165,"type":"cond-expr","locations":[{"start":{"line":165,"column":37},"end":{"line":167,"column":9}},{"start":{"line":167,"column":12},"end":{"line":167,"column":16}}]},"21":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":16},"end":{"line":180,"column":16}},{"start":{"line":180,"column":16},"end":{"line":180,"column":16}}]},"22":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":8},"end":{"line":189,"column":8}},{"start":{"line":189,"column":8},"end":{"line":189,"column":8}}]},"23":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":8},"end":{"line":192,"column":8}},{"start":{"line":192,"column":8},"end":{"line":192,"column":8}}]},"24":{"line":201,"type":"binary-expr","locations":[{"start":{"line":201,"column":19},"end":{"line":201,"column":39}},{"start":{"line":201,"column":43},"end":{"line":203,"column":16}}]},"25":{"line":215,"type":"binary-expr","locations":[{"start":{"line":215,"column":19},"end":{"line":215,"column":40}},{"start":{"line":215,"column":44},"end":{"line":217,"column":16}}]},"26":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":8},"end":{"line":226,"column":8}},{"start":{"line":226,"column":8},"end":{"line":226,"column":8}}]},"27":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":8},"end":{"line":239,"column":8}},{"start":{"line":239,"column":8},"end":{"line":239,"column":8}}]},"28":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":8},"end":{"line":255,"column":8}},{"start":{"line":255,"column":8},"end":{"line":255,"column":8}}]},"29":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8}},{"start":{"line":258,"column":8},"end":{"line":258,"column":8}}]},"30":{"line":271,"type":"cond-expr","locations":[{"start":{"line":272,"column":12},"end":{"line":272,"column":30}},{"start":{"line":273,"column":12},"end":{"line":273,"column":50}}]},"31":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":8},"end":{"line":282,"column":8}},{"start":{"line":282,"column":8},"end":{"line":282,"column":8}}]},"32":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8}},{"start":{"line":306,"column":8},"end":{"line":306,"column":8}}]},"33":{"line":306,"type":"binary-expr","locations":[{"start":{"line":306,"column":12},"end":{"line":306,"column":17}},{"start":{"line":306,"column":21},"end":{"line":306,"column":46}}]},"34":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":12},"end":{"line":308,"column":12}},{"start":{"line":308,"column":12},"end":{"line":308,"column":12}}]},"35":{"line":308,"type":"binary-expr","locations":[{"start":{"line":308,"column":16},"end":{"line":308,"column":40}},{"start":{"line":309,"column":14},"end":{"line":309,"column":41}}]},"36":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":16},"end":{"line":311,"column":16}},{"start":{"line":311,"column":16},"end":{"line":311,"column":16}}]},"37":{"line":323,"type":"if","locations":[{"start":{"line":323,"column":8},"end":{"line":323,"column":8}},{"start":{"line":323,"column":8},"end":{"line":323,"column":8}}]},"38":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":12},"end":{"line":324,"column":12}},{"start":{"line":324,"column":12},"end":{"line":324,"column":12}}]},"39":{"line":324,"type":"binary-expr","locations":[{"start":{"line":324,"column":16},"end":{"line":324,"column":39}},{"start":{"line":325,"column":14},"end":{"line":325,"column":37}}]},"40":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":8},"end":{"line":337,"column":8}},{"start":{"line":337,"column":8},"end":{"line":337,"column":8}}]},"41":{"line":341,"type":"if","locations":[{"start":{"line":341,"column":8},"end":{"line":341,"column":8}},{"start":{"line":341,"column":8},"end":{"line":341,"column":8}}]},"42":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":12},"end":{"line":358,"column":12}},{"start":{"line":358,"column":12},"end":{"line":358,"column":12}}]},"43":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":16},"end":{"line":363,"column":16}},{"start":{"line":363,"column":16},"end":{"line":363,"column":16}}]},"44":{"line":375,"type":"if","locations":[{"start":{"line":375,"column":8},"end":{"line":375,"column":8}},{"start":{"line":375,"column":8},"end":{"line":375,"column":8}}]},"45":{"line":386,"type":"binary-expr","locations":[{"start":{"line":386,"column":15},"end":{"line":386,"column":36}},{"start":{"line":387,"column":13},"end":{"line":387,"column":59}}]},"46":{"line":391,"type":"if","locations":[{"start":{"line":391,"column":8},"end":{"line":391,"column":8}},{"start":{"line":391,"column":8},"end":{"line":391,"column":8}}]},"47":{"line":398,"type":"if","locations":[{"start":{"line":398,"column":8},"end":{"line":398,"column":8}},{"start":{"line":398,"column":8},"end":{"line":398,"column":8}}]},"48":{"line":402,"type":"if","locations":[{"start":{"line":402,"column":8},"end":{"line":402,"column":8}},{"start":{"line":402,"column":8},"end":{"line":402,"column":8}}]},"49":{"line":408,"type":"if","locations":[{"start":{"line":408,"column":12},"end":{"line":408,"column":12}},{"start":{"line":408,"column":12},"end":{"line":408,"column":12}}]},"50":{"line":408,"type":"binary-expr","locations":[{"start":{"line":408,"column":16},"end":{"line":408,"column":50}},{"start":{"line":409,"column":14},"end":{"line":409,"column":42}}]},"51":{"line":421,"type":"if","locations":[{"start":{"line":421,"column":8},"end":{"line":421,"column":8}},{"start":{"line":421,"column":8},"end":{"line":421,"column":8}}]},"52":{"line":421,"type":"binary-expr","locations":[{"start":{"line":421,"column":12},"end":{"line":421,"column":16}},{"start":{"line":421,"column":20},"end":{"line":421,"column":33}}]},"53":{"line":428,"type":"if","locations":[{"start":{"line":428,"column":8},"end":{"line":428,"column":8}},{"start":{"line":428,"column":8},"end":{"line":428,"column":8}}]},"54":{"line":433,"type":"if","locations":[{"start":{"line":433,"column":8},"end":{"line":433,"column":8}},{"start":{"line":433,"column":8},"end":{"line":433,"column":8}}]},"55":{"line":438,"type":"binary-expr","locations":[{"start":{"line":438,"column":15},"end":{"line":438,"column":47}},{"start":{"line":439,"column":13},"end":{"line":439,"column":46}}]},"56":{"line":446,"type":"if","locations":[{"start":{"line":446,"column":8},"end":{"line":446,"column":8}},{"start":{"line":446,"column":8},"end":{"line":446,"column":8}}]},"57":{"line":447,"type":"if","locations":[{"start":{"line":447,"column":12},"end":{"line":447,"column":12}},{"start":{"line":447,"column":12},"end":{"line":447,"column":12}}]},"58":{"line":451,"type":"if","locations":[{"start":{"line":451,"column":16},"end":{"line":451,"column":16}},{"start":{"line":451,"column":16},"end":{"line":451,"column":16}}]},"59":{"line":463,"type":"if","locations":[{"start":{"line":463,"column":12},"end":{"line":463,"column":12}},{"start":{"line":463,"column":12},"end":{"line":463,"column":12}}]},"60":{"line":485,"type":"if","locations":[{"start":{"line":485,"column":8},"end":{"line":485,"column":8}},{"start":{"line":485,"column":8},"end":{"line":485,"column":8}}]},"61":{"line":522,"type":"if","locations":[{"start":{"line":522,"column":8},"end":{"line":522,"column":8}},{"start":{"line":522,"column":8},"end":{"line":522,"column":8}}]},"62":{"line":544,"type":"if","locations":[{"start":{"line":544,"column":16},"end":{"line":544,"column":16}},{"start":{"line":544,"column":16},"end":{"line":544,"column":16}}]},"63":{"line":552,"type":"if","locations":[{"start":{"line":552,"column":20},"end":{"line":552,"column":20}},{"start":{"line":552,"column":20},"end":{"line":552,"column":20}}]},"64":{"line":556,"type":"if","locations":[{"start":{"line":556,"column":20},"end":{"line":556,"column":20}},{"start":{"line":556,"column":20},"end":{"line":556,"column":20}}]},"65":{"line":564,"type":"if","locations":[{"start":{"line":564,"column":20},"end":{"line":564,"column":20}},{"start":{"line":564,"column":20},"end":{"line":564,"column":20}}]},"66":{"line":564,"type":"binary-expr","locations":[{"start":{"line":564,"column":24},"end":{"line":564,"column":41}},{"start":{"line":564,"column":45},"end":{"line":564,"column":53}}]},"67":{"line":566,"type":"if","locations":[{"start":{"line":566,"column":27},"end":{"line":566,"column":27}},{"start":{"line":566,"column":27},"end":{"line":566,"column":27}}]},"68":{"line":579,"type":"if","locations":[{"start":{"line":579,"column":20},"end":{"line":579,"column":20}},{"start":{"line":579,"column":20},"end":{"line":579,"column":20}}]},"69":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":16},"end":{"line":601,"column":16}},{"start":{"line":601,"column":16},"end":{"line":601,"column":16}}]},"70":{"line":615,"type":"switch","locations":[{"start":{"line":616,"column":16},"end":{"line":616,"column":34}},{"start":{"line":618,"column":16},"end":{"line":618,"column":61}},{"start":{"line":619,"column":16},"end":{"line":625,"column":54}}]},"71":{"line":642,"type":"if","locations":[{"start":{"line":642,"column":8},"end":{"line":642,"column":8}},{"start":{"line":642,"column":8},"end":{"line":642,"column":8}}]},"72":{"line":658,"type":"if","locations":[{"start":{"line":658,"column":8},"end":{"line":658,"column":8}},{"start":{"line":658,"column":8},"end":{"line":658,"column":8}}]},"73":{"line":662,"type":"if","locations":[{"start":{"line":662,"column":8},"end":{"line":662,"column":8}},{"start":{"line":662,"column":8},"end":{"line":662,"column":8}}]},"74":{"line":677,"type":"if","locations":[{"start":{"line":677,"column":8},"end":{"line":677,"column":8}},{"start":{"line":677,"column":8},"end":{"line":677,"column":8}}]},"75":{"line":679,"type":"if","locations":[{"start":{"line":679,"column":12},"end":{"line":679,"column":12}},{"start":{"line":679,"column":12},"end":{"line":679,"column":12}}]},"76":{"line":684,"type":"binary-expr","locations":[{"start":{"line":684,"column":15},"end":{"line":684,"column":21}},{"start":{"line":684,"column":25},"end":{"line":684,"column":42}}]},"77":{"line":717,"type":"if","locations":[{"start":{"line":717,"column":8},"end":{"line":717,"column":8}},{"start":{"line":717,"column":8},"end":{"line":717,"column":8}}]},"78":{"line":723,"type":"if","locations":[{"start":{"line":723,"column":16},"end":{"line":723,"column":16}},{"start":{"line":723,"column":16},"end":{"line":723,"column":16}}]},"79":{"line":742,"type":"if","locations":[{"start":{"line":742,"column":16},"end":{"line":742,"column":16}},{"start":{"line":742,"column":16},"end":{"line":742,"column":16}}]},"80":{"line":742,"type":"binary-expr","locations":[{"start":{"line":742,"column":20},"end":{"line":742,"column":53}},{"start":{"line":743,"column":20},"end":{"line":743,"column":48}}]},"81":{"line":759,"type":"if","locations":[{"start":{"line":759,"column":12},"end":{"line":759,"column":12}},{"start":{"line":759,"column":12},"end":{"line":759,"column":12}}]},"82":{"line":759,"type":"binary-expr","locations":[{"start":{"line":759,"column":16},"end":{"line":759,"column":30}},{"start":{"line":759,"column":34},"end":{"line":759,"column":83}}]},"83":{"line":771,"type":"if","locations":[{"start":{"line":771,"column":8},"end":{"line":771,"column":8}},{"start":{"line":771,"column":8},"end":{"line":771,"column":8}}]},"84":{"line":777,"type":"if","locations":[{"start":{"line":777,"column":8},"end":{"line":777,"column":8}},{"start":{"line":777,"column":8},"end":{"line":777,"column":8}}]},"85":{"line":793,"type":"if","locations":[{"start":{"line":793,"column":12},"end":{"line":793,"column":12}},{"start":{"line":793,"column":12},"end":{"line":793,"column":12}}]},"86":{"line":799,"type":"if","locations":[{"start":{"line":799,"column":12},"end":{"line":799,"column":12}},{"start":{"line":799,"column":12},"end":{"line":799,"column":12}}]},"87":{"line":812,"type":"if","locations":[{"start":{"line":812,"column":12},"end":{"line":812,"column":12}},{"start":{"line":812,"column":12},"end":{"line":812,"column":12}}]}},"code":["var Ap = Array.prototype;","var slice = Ap.slice;","var map = Ap.map;","var each = Ap.forEach;","var Op = Object.prototype;","var objToStr = Op.toString;","var funObjStr = objToStr.call(function(){});","var strObjStr = objToStr.call(\"\");","var hasOwn = Op.hasOwnProperty;","","module.exports = function () {","","    var exports = {};","","    // A type is an object with a .check method that takes a value and returns","    // true or false according to whether the value matches the type.","","    function Type(check, name) {","        var self = this;","        if (!(self instanceof Type)) {","            throw new Error(\"Type constructor cannot be invoked without 'new'\");","        }","","        // Unfortunately we can't elegantly reuse isFunction and isString,","        // here, because this code is executed while defining those types.","        if (objToStr.call(check) !== funObjStr) {","            throw new Error(check + \" is not a function\");","        }","","        // The `name` parameter can be either a function or a string.","        var nameObjStr = objToStr.call(name);","        if (!(nameObjStr === funObjStr ||","          nameObjStr === strObjStr)) {","            throw new Error(name + \" is neither a function nor a string\");","        }","","        Object.defineProperties(self, {","            name: {value: name},","            check: {","                value: function (value, deep) {","                    var result = check.call(self, value, deep);","                    if (!result && deep && objToStr.call(deep) === funObjStr)","                        deep(self, value);","                    return result;","                }","            }","        });","    }","","    var Tp = Type.prototype;","","    // Throughout this file we use Object.defineProperty to prevent","    // redefinition of exported properties.","    exports.Type = Type;","","    // Like .check, except that failure triggers an AssertionError.","    Tp.assert = function (value, deep) {","        if (!this.check(value, deep)) {","            var str = shallowStringify(value);","            throw new Error(str + \" does not match type \" + this);","        }","        return true;","    };","","    function shallowStringify(value) {","        if (isObject.check(value))","            return \"{\" + Object.keys(value).map(function (key) {","                  return key + \": \" + value[key];","              }).join(\", \") + \"}\";","","        if (isArray.check(value))","            return \"[\" + value.map(shallowStringify).join(\", \") + \"]\";","","        return JSON.stringify(value);","    }","","    Tp.toString = function () {","        var name = this.name;","","        if (isString.check(name))","            return name;","","        if (isFunction.check(name))","            return name.call(this) + \"\";","","        return name + \" type\";","    };","","    var builtInCtorFns = [];","    var builtInCtorTypes = [];","    var builtInTypes = {};","    exports.builtInTypes = builtInTypes;","","    function defBuiltInType(example, name) {","        var objStr = objToStr.call(example);","","        var type = new Type(function (value) {","            return objToStr.call(value) === objStr;","        }, name);","","        builtInTypes[name] = type;","","        if (example && typeof example.constructor === \"function\") {","            builtInCtorFns.push(example.constructor);","            builtInCtorTypes.push(type);","        }","","        return type;","    }","","    // These types check the underlying [[Class]] attribute of the given","    // value, rather than using the problematic typeof operator. Note however","    // that no subtyping is considered; so, for instance, isObject.check","    // returns false for [], /./, new Date, and null.","    var isString = defBuiltInType(\"truthy\", \"string\");","    var isFunction = defBuiltInType(function () {}, \"function\");","    var isArray = defBuiltInType([], \"array\");","    var isObject = defBuiltInType({}, \"object\");","    var isRegExp = defBuiltInType(/./, \"RegExp\");","    var isDate = defBuiltInType(new Date, \"Date\");","    var isNumber = defBuiltInType(3, \"number\");","    var isBoolean = defBuiltInType(true, \"boolean\");","    var isNull = defBuiltInType(null, \"null\");","    var isUndefined = defBuiltInType(void 0, \"undefined\");","","    // There are a number of idiomatic ways of expressing types, so this","    // function serves to coerce them all to actual Type objects. Note that","    // providing the name argument is not necessary in most cases.","    function toType(from, name) {","        // The toType function should of course be idempotent.","        if (from instanceof Type)","            return from;","","        // The Def type is used as a helper for constructing compound","        // interface types for AST nodes.","        if (from instanceof Def)","            return from.type;","","        // Support [ElemType] syntax.","        if (isArray.check(from))","            return Type.fromArray(from);","","        // Support { someField: FieldType, ... } syntax.","        if (isObject.check(from))","            return Type.fromObject(from);","","        if (isFunction.check(from)) {","            var bicfIndex = builtInCtorFns.indexOf(from);","            if (bicfIndex >= 0) {","                return builtInCtorTypes[bicfIndex];","            }","","            // If isFunction.check(from), and from is not a built-in","            // constructor, assume from is a binary predicate function we can","            // use to define the type.","            return new Type(from, name);","        }","","        // As a last resort, toType returns a type that matches any value that","        // is === from. This is primarily useful for literal values like","        // toType(null), but it has the additional advantage of allowing","        // toType to be a total function.","        return new Type(function (value) {","            return value === from;","        }, isUndefined.check(name) ? function () {","            return from + \"\";","        } : name);","    }","","    // Returns a type that matches the given value iff any of type1, type2,","    // etc. match the value.","    Type.or = function (/* type1, type2, ... */) {","        var types = [];","        var len = arguments.length;","        for (var i = 0; i < len; ++i)","            types.push(toType(arguments[i]));","","        return new Type(function (value, deep) {","            for (var i = 0; i < len; ++i)","                if (types[i].check(value, deep))","                    return true;","            return false;","        }, function () {","            return types.join(\" | \");","        });","    };","","    Type.fromArray = function (arr) {","        if (!isArray.check(arr)) {","            throw new Error(\"\");","        }","        if (arr.length !== 1) {","            throw new Error(\"only one element type is permitted for typed arrays\");","        }","        return toType(arr[0]).arrayOf();","    };","","    Tp.arrayOf = function () {","        var elemType = this;","        return new Type(function (value, deep) {","            return isArray.check(value) && value.every(function (elem) {","                  return elemType.check(elem, deep);","              });","        }, function () {","            return \"[\" + elemType + \"]\";","        });","    };","","    Type.fromObject = function (obj) {","        var fields = Object.keys(obj).map(function (name) {","            return new Field(name, obj[name]);","        });","","        return new Type(function (value, deep) {","            return isObject.check(value) && fields.every(function (field) {","                  return field.type.check(value[field.name], deep);","              });","        }, function () {","            return \"{ \" + fields.join(\", \") + \" }\";","        });","    };","","    function Field(name, type, defaultFn, hidden) {","        var self = this;","","        if (!(self instanceof Field)) {","            throw new Error(\"Field constructor cannot be invoked without 'new'\");","        }","        isString.assert(name);","","        type = toType(type);","","        var properties = {","            name: {value: name},","            type: {value: type},","            hidden: {value: !!hidden}","        };","","        if (isFunction.check(defaultFn)) {","            properties.defaultFn = {value: defaultFn};","        }","","        Object.defineProperties(self, properties);","    }","","    var Fp = Field.prototype;","","    Fp.toString = function () {","        return JSON.stringify(this.name) + \": \" + this.type;","    };","","    Fp.getValue = function (obj) {","        var value = obj[this.name];","","        if (!isUndefined.check(value))","            return value;","","        if (this.defaultFn)","            value = this.defaultFn.call(obj);","","        return value;","    };","","    // Define a type whose name is registered in a namespace (the defCache) so","    // that future definitions will return the same type given the same name.","    // In particular, this system allows for circular and forward definitions.","    // The Def object d returned from Type.def may be used to configure the","    // type d.type by calling methods such as d.bases, d.build, and d.field.","    Type.def = function (typeName) {","        isString.assert(typeName);","        return hasOwn.call(defCache, typeName)","          ? defCache[typeName]","          : defCache[typeName] = new Def(typeName);","    };","","    // In order to return the same Def instance every time Type.def is called","    // with a particular name, those instances need to be stored in a cache.","    var defCache = Object.create(null);","","    function Def(typeName) {","        var self = this;","        if (!(self instanceof Def)) {","            throw new Error(\"Def constructor cannot be invoked without 'new'\");","        }","","        Object.defineProperties(self, {","            typeName: {value: typeName},","            baseNames: {value: []},","            ownFields: {value: Object.create(null)},","","            // These two are populated during finalization.","            allSupertypes: {value: Object.create(null)}, // Includes own typeName.","            supertypeList: {value: []}, // Linear inheritance hierarchy.","            allFields: {value: Object.create(null)}, // Includes inherited fields.","            fieldNames: {value: []}, // Non-hidden keys of allFields.","","            type: {","                value: new Type(function (value, deep) {","                    return self.check(value, deep);","                }, typeName)","            }","        });","    }","","    Def.fromValue = function (value) {","        if (value && typeof value === \"object\") {","            var type = value.type;","            if (typeof type === \"string\" &&","              hasOwn.call(defCache, type)) {","                var d = defCache[type];","                if (d.finalized) {","                    return d;","                }","            }","        }","","        return null;","    };","","    var Dp = Def.prototype;","","    Dp.isSupertypeOf = function (that) {","        if (that instanceof Def) {","            if (this.finalized !== true ||","              that.finalized !== true) {","                throw new Error(\"\");","            }","            return hasOwn.call(that.allSupertypes, this.typeName);","        } else {","            throw new Error(that + \" is not a Def\");","        }","    };","","    // Note that the list returned by this function is a copy of the internal","    // supertypeList, *without* the typeName itself as the first element.","    exports.getSupertypeNames = function (typeName) {","        if (!hasOwn.call(defCache, typeName)) {","            throw new Error(\"\");","        }","        var d = defCache[typeName];","        if (d.finalized !== true) {","            throw new Error(\"\");","        }","        return d.supertypeList.slice(1);","    };","","    // Returns an object mapping from every known type in the defCache to the","    // most specific supertype whose name is an own property of the candidates","    // object.","    exports.computeSupertypeLookupTable = function (candidates) {","        var table = {};","        var typeNames = Object.keys(defCache);","        var typeNameCount = typeNames.length;","","        for (var i = 0; i < typeNameCount; ++i) {","            var typeName = typeNames[i];","            var d = defCache[typeName];","            if (d.finalized !== true) {","                throw new Error(\"\" + typeName);","            }","            for (var j = 0; j < d.supertypeList.length; ++j) {","                var superTypeName = d.supertypeList[j];","                if (hasOwn.call(candidates, superTypeName)) {","                    table[typeName] = superTypeName;","                    break;","                }","            }","        }","","        return table;","    };","","    Dp.checkAllFields = function (value, deep) {","        var allFields = this.allFields;","        if (this.finalized !== true) {","            throw new Error(\"\" + this.typeName);","        }","","        function checkFieldByName(name) {","            var field = allFields[name];","            var type = field.type;","            var child = field.getValue(value);","            return type.check(child, deep);","        }","","        return isObject.check(value)","          && Object.keys(allFields).every(checkFieldByName);","    };","","    Dp.check = function (value, deep) {","        if (this.finalized !== true) {","            throw new Error(","              \"prematurely checking unfinalized type \" + this.typeName","            );","        }","","        // A Def type can only match an object value.","        if (!isObject.check(value))","            return false;","","        var vDef = Def.fromValue(value);","        if (!vDef) {","            // If we couldn't infer the Def associated with the given value,","            // and we expected it to be a SourceLocation or a Position, it was","            // probably just missing a \"type\" field (because Esprima does not","            // assign a type property to such nodes). Be optimistic and let","            // this.checkAllFields make the final decision.","            if (this.typeName === \"SourceLocation\" ||","              this.typeName === \"Position\") {","                return this.checkAllFields(value, deep);","            }","","            // Calling this.checkAllFields for any other type of node is both","            // bad for performance and way too forgiving.","            return false;","        }","","        // If checking deeply and vDef === this, then we only need to call","        // checkAllFields once. Calling checkAllFields is too strict when deep","        // is false, because then we only care about this.isSupertypeOf(vDef).","        if (deep && vDef === this)","            return this.checkAllFields(value, deep);","","        // In most cases we rely exclusively on isSupertypeOf to make O(1)","        // subtyping determinations. This suffices in most situations outside","        // of unit tests, since interface conformance is checked whenever new","        // instances are created using builder functions.","        if (!this.isSupertypeOf(vDef))","            return false;","","        // The exception is when deep is true; then, we recursively check all","        // fields.","        if (!deep)","            return true;","","        // Use the more specific Def (vDef) to perform the deep check, but","        // shallow-check fields defined by the less specific Def (this).","        return vDef.checkAllFields(value, deep)","          && this.checkAllFields(value, false);","    };","","    Dp.bases = function () {","        var args = slice.call(arguments);","        var bases = this.baseNames;","","        if (this.finalized) {","            if (args.length !== bases.length) {","                throw new Error(\"\");","            }","            for (var i = 0; i < args.length; i++) {","                if (args[i] !== bases[i]) {","                    throw new Error(\"\");","                }","            }","            return this;","        }","","        args.forEach(function (baseName) {","            isString.assert(baseName);","","            // This indexOf lookup may be O(n), but the typical number of base","            // names is very small, and indexOf is a native Array method.","            if (bases.indexOf(baseName) < 0)","                bases.push(baseName);","        });","","        return this; // For chaining.","    };","","    // False by default until .build(...) is called on an instance.","    Object.defineProperty(Dp, \"buildable\", {value: false});","","    var builders = {};","    exports.builders = builders;","","    // This object is used as prototype for any node created by a builder.","    var nodePrototype = {};","","    // Call this function to define a new method to be shared by all AST","     // nodes. The replaced method (if any) is returned for easy wrapping.","    exports.defineMethod = function (name, func) {","        var old = nodePrototype[name];","","        // Pass undefined as func to delete nodePrototype[name].","        if (isUndefined.check(func)) {","            delete nodePrototype[name];","","        } else {","            isFunction.assert(func);","","            Object.defineProperty(nodePrototype, name, {","                enumerable: true, // For discoverability.","                configurable: true, // For delete proto[name].","                value: func","            });","        }","","        return old;","    };","","    var isArrayOfString = isString.arrayOf();","","    // Calling the .build method of a Def simultaneously marks the type as","    // buildable (by defining builders[getBuilderName(typeName)]) and","    // specifies the order of arguments that should be passed to the builder","    // function to create an instance of the type.","    Dp.build = function (/* param1, param2, ... */) {","        var self = this;","","        var newBuildParams = slice.call(arguments);","        isArrayOfString.assert(newBuildParams);","","        // Calling Def.prototype.build multiple times has the effect of merely","        // redefining this property.","        Object.defineProperty(self, \"buildParams\", {","            value: newBuildParams,","            writable: false,","            enumerable: false,","            configurable: true","        });","","        if (self.buildable) {","            // If this Def is already buildable, update self.buildParams and","            // continue using the old builder function.","            return self;","        }","","        // Every buildable type will have its \"type\" field filled in","        // automatically. This includes types that are not subtypes of Node,","        // like SourceLocation, but that seems harmless (TODO?).","        self.field(\"type\", String, function () { return self.typeName });","","        // Override Dp.buildable for this Def instance.","        Object.defineProperty(self, \"buildable\", {value: true});","","        Object.defineProperty(builders, getBuilderName(self.typeName), {","            enumerable: true,","","            value: function () {","                var args = arguments;","                var argc = args.length;","                var built = Object.create(nodePrototype);","","                if (!self.finalized) {","                    throw new Error(","                      \"attempting to instantiate unfinalized type \" +","                      self.typeName","                    );","                }","","                function add(param, i) {","                    if (hasOwn.call(built, param))","                        return;","","                    var all = self.allFields;","                    if (!hasOwn.call(all, param)) {","                        throw new Error(\"\" + param);","                    }","","                    var field = all[param];","                    var type = field.type;","                    var value;","","                    if (isNumber.check(i) && i < argc) {","                        value = args[i];","                    } else if (field.defaultFn) {","                        // Expose the partially-built object to the default","                        // function as its `this` object.","                        value = field.defaultFn.call(built);","                    } else {","                        var message = \"no value or default function given for field \" +","                          JSON.stringify(param) + \" of \" + self.typeName + \"(\" +","                          self.buildParams.map(function (name) {","                              return all[name];","                          }).join(\", \") + \")\";","                        throw new Error(message);","                    }","","                    if (!type.check(value)) {","                        throw new Error(","                          shallowStringify(value) +","                          \" does not match field \" + field +","                          \" of type \" + self.typeName","                        );","                    }","","                    // TODO Could attach getters and setters here to enforce","                    // dynamic type safety.","                    built[param] = value;","                }","","                self.buildParams.forEach(function (param, i) {","                    add(param, i);","                });","","                Object.keys(self.allFields).forEach(function (param) {","                    add(param); // Use the default value.","                });","","                // Make sure that the \"type\" field was filled automatically.","                if (built.type !== self.typeName) {","                    throw new Error(\"\");","                }","","                return built;","            }","        });","","        return self; // For chaining.","    };","","    function getBuilderName(typeName) {","        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {","            var len = upperCasePrefix.length;","            switch (len) {","                case 0: return \"\";","                // If there's only one initial capital letter, just lower-case it.","                case 1: return upperCasePrefix.toLowerCase();","                default:","                    // If there's more than one initial capital letter, lower-case","                    // all but the last one, so that XMLDefaultDeclaration (for","                    // example) becomes xmlDefaultDeclaration.","                    return upperCasePrefix.slice(","                        0, len - 1).toLowerCase() +","                      upperCasePrefix.charAt(len - 1);","            }","        });","    }","    exports.getBuilderName = getBuilderName;","","    function getStatementBuilderName(typeName) {","        typeName = getBuilderName(typeName);","        return typeName.replace(/(Expression)?$/, \"Statement\");","    }","    exports.getStatementBuilderName = getStatementBuilderName;","","    // The reason fields are specified using .field(...) instead of an object","    // literal syntax is somewhat subtle: the object literal syntax would","    // support only one key and one value, but with .field(...) we can pass","    // any number of arguments to specify the field.","    Dp.field = function (name, type, defaultFn, hidden) {","        if (this.finalized) {","            console.error(\"Ignoring attempt to redefine field \" +","              JSON.stringify(name) + \" of finalized type \" +","              JSON.stringify(this.typeName));","            return this;","        }","        this.ownFields[name] = new Field(name, type, defaultFn, hidden);","        return this; // For chaining.","    };","","    var namedTypes = {};","    exports.namedTypes = namedTypes;","","    // Like Object.keys, but aware of what fields each AST type should have.","    function getFieldNames(object) {","        var d = Def.fromValue(object);","        if (d) {","            return d.fieldNames.slice(0);","        }","","        if (\"type\" in object) {","            throw new Error(","              \"did not recognize object of type \" +","              JSON.stringify(object.type)","            );","        }","","        return Object.keys(object);","    }","    exports.getFieldNames = getFieldNames;","","    // Get the value of an object property, taking object.type and default","    // functions into account.","    function getFieldValue(object, fieldName) {","        var d = Def.fromValue(object);","        if (d) {","            var field = d.allFields[fieldName];","            if (field) {","                return field.getValue(object);","            }","        }","","        return object && object[fieldName];","    }","    exports.getFieldValue = getFieldValue;","","    // Iterate over all defined fields of an object, including those missing","    // or undefined, passing each field name and effective value (as returned","    // by getFieldValue) to the callback. If the object has no corresponding","    // Def, the callback will never be called.","    exports.eachField = function (object, callback, context) {","        getFieldNames(object).forEach(function (name) {","            callback.call(this, name, getFieldValue(object, name));","        }, context);","    };","","    // Similar to eachField, except that iteration stops as soon as the","    // callback returns a truthy value. Like Array.prototype.some, the final","    // result is either true or false to indicates whether the callback","    // returned true for any element or not.","    exports.someField = function (object, callback, context) {","        return getFieldNames(object).some(function (name) {","            return callback.call(this, name, getFieldValue(object, name));","        }, context);","    };","","    // This property will be overridden as true by individual Def instances","    // when they are finalized.","    Object.defineProperty(Dp, \"finalized\", {value: false});","","    Dp.finalize = function () {","        var self = this;","","        // It's not an error to finalize a type more than once, but only the","        // first call to .finalize does anything.","        if (!self.finalized) {","            var allFields = self.allFields;","            var allSupertypes = self.allSupertypes;","","            self.baseNames.forEach(function (name) {","                var def = defCache[name];","                if (def instanceof Def) {","                    def.finalize();","                    extend(allFields, def.allFields);","                    extend(allSupertypes, def.allSupertypes);","                } else {","                    var message = \"unknown supertype name \" +","                      JSON.stringify(name) +","                      \" for subtype \" +","                      JSON.stringify(self.typeName);","                    throw new Error(message);","                }","            });","","            // TODO Warn if fields are overridden with incompatible types.","            extend(allFields, self.ownFields);","            allSupertypes[self.typeName] = self;","","            self.fieldNames.length = 0;","            for (var fieldName in allFields) {","                if (hasOwn.call(allFields, fieldName) &&","                    !allFields[fieldName].hidden) {","                        self.fieldNames.push(fieldName);","                }","            }","","            // Types are exported only once they have been finalized.","            Object.defineProperty(namedTypes, self.typeName, {","                enumerable: true,","                value: self.type","            });","","            Object.defineProperty(self, \"finalized\", {value: true});","","            // A linearization of the inheritance hierarchy.","            populateSupertypeList(self.typeName, self.supertypeList);","","            if (self.buildable && self.supertypeList.lastIndexOf(\"Expression\") >= 0) {","                wrapExpressionBuilderWithStatement(self.typeName);","            }","        }","    };","","    // Adds an additional builder for Expression subtypes","    // that wraps the built Expression in an ExpressionStatements.","    function wrapExpressionBuilderWithStatement(typeName) {","        var wrapperName = getStatementBuilderName(typeName);","","        // skip if the builder already exists","        if (builders[wrapperName]) return;","","        // the builder function to wrap with builders.ExpressionStatement","        var wrapped = builders[getBuilderName(typeName)];","","        // skip if there is nothing to wrap","        if (!wrapped) return;","","        builders[wrapperName] = function () {","            return builders.expressionStatement(wrapped.apply(builders, arguments));","        };","    }","","    function populateSupertypeList(typeName, list) {","        list.length = 0;","        list.push(typeName);","","        var lastSeen = Object.create(null);","","        for (var pos = 0; pos < list.length; ++pos) {","            typeName = list[pos];","            var d = defCache[typeName];","            if (d.finalized !== true) {","                throw new Error(\"\");","            }","","            // If we saw typeName earlier in the breadth-first traversal,","            // delete the last-seen occurrence.","            if (hasOwn.call(lastSeen, typeName)) {","                delete list[lastSeen[typeName]];","            }","","            // Record the new index of the last-seen occurrence of typeName.","            lastSeen[typeName] = pos;","","            // Enqueue the base names of this type.","            list.push.apply(list, d.baseNames);","        }","","        // Compaction loop to remove array holes.","        for (var to = 0, from = to, len = list.length; from < len; ++from) {","            if (hasOwn.call(list, from)) {","                list[to++] = list[from];","            }","        }","","        list.length = to;","    }","","    function extend(into, from) {","        Object.keys(from).forEach(function (name) {","            into[name] = from[name];","        });","","        return into;","    };","","    exports.finalize = function () {","        Object.keys(defCache).forEach(function (name) {","            defCache[name].finalize();","        });","    };","","    return exports;","};",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"18":1,"19":566,"20":566,"21":0,"26":566,"27":0,"31":566,"32":566,"34":0,"37":566,"41":4059,"42":4059,"43":0,"44":4059,"50":1,"54":1,"57":1,"58":1522,"59":0,"60":0,"62":1522,"65":1,"66":0,"67":0,"68":0,"71":0,"72":0,"74":0,"77":1,"78":10,"80":10,"81":9,"83":1,"84":1,"86":0,"89":1,"90":1,"91":1,"92":1,"94":1,"95":10,"97":10,"98":3876,"101":10,"103":10,"104":8,"105":8,"108":10,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"129":1,"131":961,"132":145,"136":816,"137":348,"140":468,"141":71,"144":397,"145":2,"147":395,"148":248,"149":248,"150":248,"156":0,"163":147,"164":0,"166":0,"172":1,"173":131,"174":131,"175":131,"176":349,"178":131,"179":0,"180":0,"181":0,"182":0,"184":1,"188":1,"189":71,"190":0,"192":71,"193":0,"195":71,"198":1,"199":72,"200":72,"201":183,"202":324,"205":0,"209":1,"210":2,"211":4,"214":2,"215":0,"216":0,"219":0,"223":1,"224":541,"226":541,"227":0,"229":541,"231":541,"233":541,"239":541,"240":264,"243":541,"246":1,"248":1,"249":0,"252":1,"253":0,"255":0,"256":0,"258":0,"259":0,"261":0,"269":1,"270":580,"271":580,"278":1,"280":1,"281":199,"282":199,"283":0,"286":199,"299":0,"305":1,"306":0,"307":0,"308":0,"310":0,"311":0,"312":0,"317":0,"320":1,"322":1,"323":0,"324":0,"326":0,"328":0,"330":0,"336":1,"337":0,"338":0,"340":0,"341":0,"342":0,"344":0,"350":1,"351":0,"352":0,"353":0,"355":0,"356":0,"357":0,"358":0,"359":0,"361":0,"362":0,"363":0,"364":0,"365":0,"370":0,"373":1,"374":0,"375":0,"376":0,"379":1,"380":0,"381":0,"382":0,"383":0,"386":0,"390":1,"391":0,"392":0,"398":0,"399":0,"401":0,"402":0,"408":0,"410":0,"415":0,"421":0,"422":0,"428":0,"429":0,"433":0,"434":0,"438":0,"442":1,"443":206,"444":206,"446":206,"447":0,"448":0,"450":0,"451":0,"452":0,"455":0,"458":206,"459":218,"463":218,"464":208,"467":206,"471":1,"473":1,"474":1,"477":1,"481":1,"482":0,"485":0,"486":0,"489":0,"491":0,"498":0,"501":1,"507":1,"508":183,"510":183,"511":183,"515":183,"522":183,"525":14,"531":169,"534":169,"536":169,"540":0,"541":0,"542":0,"544":0,"545":0,"551":1,"552":0,"553":0,"555":0,"556":0,"557":0,"560":0,"561":0,"562":0,"564":0,"565":0,"566":0,"569":0,"571":0,"574":0,"576":0,"579":0,"580":0,"589":0,"592":0,"593":0,"596":0,"597":0,"601":0,"602":0,"605":0,"609":169,"612":1,"613":262,"614":262,"615":262,"616":0,"618":236,"623":26,"629":1,"631":1,"632":47,"633":47,"635":1,"641":1,"642":537,"643":0,"646":0,"648":537,"649":537,"652":1,"653":1,"656":1,"657":0,"658":0,"659":0,"662":0,"663":0,"669":0,"671":1,"675":1,"676":0,"677":0,"678":0,"679":0,"680":0,"684":0,"686":1,"692":1,"693":0,"694":0,"702":1,"703":0,"704":0,"710":1,"712":1,"713":407,"717":407,"718":199,"719":199,"721":199,"722":208,"723":208,"724":208,"725":208,"726":208,"728":0,"732":0,"737":199,"738":199,"740":199,"741":199,"742":1012,"744":620,"749":199,"754":199,"757":199,"759":199,"760":47,"767":1,"768":47,"771":47,"774":46,"777":46,"779":46,"780":0,"784":1,"785":199,"786":199,"788":199,"790":199,"791":989,"792":989,"793":989,"794":0,"799":989,"800":150,"804":989,"807":989,"811":199,"812":989,"813":839,"817":199,"820":1,"821":615,"822":1898,"825":615,"828":1,"829":1,"830":199,"834":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/shared.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/shared.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":4,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":1,"2":4,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}},"2":{"name":"(anonymous_2)","line":10,"loc":{"start":{"line":10,"column":18},"end":{"line":10,"column":34}}},"3":{"name":"(anonymous_3)","line":11,"loc":{"start":{"line":11,"column":24},"end":{"line":11,"column":41}}},"4":{"name":"(anonymous_4)","line":22,"loc":{"start":{"line":22,"column":16},"end":{"line":22,"column":28}}},"5":{"name":"(anonymous_5)","line":23,"loc":{"start":{"line":23,"column":22},"end":{"line":23,"column":34}}},"6":{"name":"(anonymous_6)","line":24,"loc":{"start":{"line":24,"column":17},"end":{"line":24,"column":29}}},"7":{"name":"(anonymous_7)","line":25,"loc":{"start":{"line":25,"column":16},"end":{"line":25,"column":28}}},"8":{"name":"(anonymous_8)","line":26,"loc":{"start":{"line":26,"column":21},"end":{"line":26,"column":33}}},"9":{"name":"(anonymous_9)","line":37,"loc":{"start":{"line":37,"column":35},"end":{"line":37,"column":52}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":46,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":21}},"3":{"start":{"line":3,"column":4},"end":{"line":3,"column":50}},"4":{"start":{"line":4,"column":4},"end":{"line":4,"column":26}},"5":{"start":{"line":5,"column":4},"end":{"line":5,"column":37}},"6":{"start":{"line":6,"column":4},"end":{"line":6,"column":34}},"7":{"start":{"line":10,"column":4},"end":{"line":14,"column":6}},"8":{"start":{"line":11,"column":8},"end":{"line":13,"column":37}},"9":{"start":{"line":12,"column":12},"end":{"line":12,"column":58}},"10":{"start":{"line":18,"column":4},"end":{"line":27,"column":6}},"11":{"start":{"line":22,"column":30},"end":{"line":22,"column":42}},"12":{"start":{"line":23,"column":36},"end":{"line":23,"column":46}},"13":{"start":{"line":24,"column":31},"end":{"line":24,"column":44}},"14":{"start":{"line":25,"column":30},"end":{"line":25,"column":42}},"15":{"start":{"line":29,"column":4},"end":{"line":35,"column":6}},"16":{"start":{"line":37,"column":4},"end":{"line":43,"column":36}},"17":{"start":{"line":38,"column":8},"end":{"line":39,"column":24}},"18":{"start":{"line":39,"column":12},"end":{"line":39,"column":24}},"19":{"start":{"line":40,"column":8},"end":{"line":40,"column":32}},"20":{"start":{"line":41,"column":8},"end":{"line":42,"column":29}},"21":{"start":{"line":45,"column":4},"end":{"line":45,"column":19}}},"branchMap":{"1":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":19},"end":{"line":12,"column":40}},{"start":{"line":12,"column":44},"end":{"line":12,"column":57}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]},"3":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":17},"end":{"line":41,"column":34}},{"start":{"line":42,"column":8},"end":{"line":42,"column":27}}]}},"code":["module.exports = function (fork) {","    var exports = {};","    var types = fork.use(require(\"../lib/types\"));","    var Type = types.Type;","    var builtin = types.builtInTypes;","    var isNumber = builtin.number;","","    // An example of constructing a new type with arbitrary constraints from","    // an existing type.","    exports.geq = function (than) {","        return new Type(function (value) {","            return isNumber.check(value) && value >= than;","        }, isNumber + \" >= \" + than);","    };","","    // Default value-returning functions that may optionally be passed as a","    // third argument to Def.prototype.field.","    exports.defaults = {","        // Functions were used because (among other reasons) that's the most","        // elegant way to allow for the emptyArray one always to give a new","        // array instance.","        \"null\": function () { return null },","        \"emptyArray\": function () { return [] },","        \"false\": function () { return false },","        \"true\": function () { return true },","        \"undefined\": function () {}","    };","","    var naiveIsPrimitive = Type.or(","      builtin.string,","      builtin.number,","      builtin.boolean,","      builtin.null,","      builtin.undefined","    );","","    exports.isPrimitive = new Type(function (value) {","        if (value === null)","            return true;","        var type = typeof value;","        return !(type === \"object\" ||","        type === \"function\");","    }, naiveIsPrimitive.toString());","","    return exports;","};"],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"10":1,"11":4,"12":0,"18":1,"22":0,"23":0,"24":0,"25":0,"29":1,"37":1,"38":0,"39":0,"40":0,"41":0,"45":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/babel6-core.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/def/babel6-core.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1},"b":{},"f":{"1":1,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}},"2":{"name":"(anonymous_2)","line":59,"loc":{"start":{"line":59,"column":28},"end":{"line":59,"column":40}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":168,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":31}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":48}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":61}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":27}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":25}},"7":{"start":{"line":11,"column":2},"end":{"line":14,"column":45}},"8":{"start":{"line":16,"column":2},"end":{"line":19,"column":52}},"9":{"start":{"line":21,"column":2},"end":{"line":25,"column":66}},"10":{"start":{"line":27,"column":2},"end":{"line":31,"column":66}},"11":{"start":{"line":34,"column":2},"end":{"line":37,"column":28}},"12":{"start":{"line":39,"column":2},"end":{"line":42,"column":28}},"13":{"start":{"line":44,"column":2},"end":{"line":47,"column":44}},"14":{"start":{"line":49,"column":2},"end":{"line":52,"column":29}},"15":{"start":{"line":54,"column":2},"end":{"line":61,"column":7}},"16":{"start":{"line":60,"column":6},"end":{"line":60,"column":50}},"17":{"start":{"line":63,"column":2},"end":{"line":68,"column":4}},"18":{"start":{"line":71,"column":2},"end":{"line":74,"column":53}},"19":{"start":{"line":77,"column":2},"end":{"line":89,"column":29}},"20":{"start":{"line":91,"column":2},"end":{"line":96,"column":51}},"21":{"start":{"line":98,"column":2},"end":{"line":104,"column":4}},"22":{"start":{"line":107,"column":2},"end":{"line":110,"column":39}},"23":{"start":{"line":112,"column":2},"end":{"line":125,"column":29}},"24":{"start":{"line":127,"column":2},"end":{"line":134,"column":4}},"25":{"start":{"line":137,"column":2},"end":{"line":143,"column":29}},"26":{"start":{"line":145,"column":2},"end":{"line":148,"column":42}},"27":{"start":{"line":150,"column":2},"end":{"line":153,"column":42}},"28":{"start":{"line":155,"column":2},"end":{"line":162,"column":37}},"29":{"start":{"line":165,"column":2},"end":{"line":167,"column":13}}},"branchMap":{},"code":["module.exports = function (fork) {","  fork.use(require(\"./babel\"));","","  // var types = fork.types;","  var types = fork.use(require(\"../lib/types\"));","  // var defaults = fork.shared.defaults;","  var defaults = fork.use(require(\"../lib/shared\")).defaults;","  var def = types.Type.def;","  var or = types.Type.or;","","  def(\"Directive\")","    .bases(\"Node\")","    .build(\"value\")","    .field(\"value\", def(\"DirectiveLiteral\"));","","  def(\"DirectiveLiteral\")","    .bases(\"Node\", \"Expression\")","    .build(\"value\")","    .field(\"value\", String, defaults[\"use strict\"]);","","  def(\"BlockStatement\")","    .bases(\"Statement\")","    .build(\"body\")","    .field(\"body\", [def(\"Statement\")])","    .field(\"directives\", [def(\"Directive\")], defaults.emptyArray);","","  def(\"Program\")","    .bases(\"Node\")","    .build(\"body\")","    .field(\"body\", [def(\"Statement\")])","    .field(\"directives\", [def(\"Directive\")], defaults.emptyArray);","","  // Split Literal","  def(\"StringLiteral\")","    .bases(\"Literal\")","    .build(\"value\")","    .field(\"value\", String);","","  def(\"NumericLiteral\")","    .bases(\"Literal\")","    .build(\"value\")","    .field(\"value\", Number);","","  def(\"NullLiteral\")","    .bases(\"Literal\")","    .build()","    .field(\"value\", null, defaults[\"null\"]);","","  def(\"BooleanLiteral\")","    .bases(\"Literal\")","    .build(\"value\")","    .field(\"value\", Boolean);","","  def(\"RegExpLiteral\")","    .bases(\"Literal\")","    .build(\"pattern\", \"flags\")","    .field(\"pattern\", String)","    .field(\"flags\", String)","    .field(\"value\", RegExp, function () {","      return new RegExp(this.pattern, this.flags);","    });","","  var ObjectExpressionProperty = or(","    def(\"Property\"),","    def(\"ObjectMethod\"),","    def(\"ObjectProperty\"),","    def(\"SpreadProperty\")","  );","","  // Split Property -> ObjectProperty and ObjectMethod","  def(\"ObjectExpression\")","    .bases(\"Expression\")","    .build(\"properties\")","    .field(\"properties\", [ObjectExpressionProperty]);","","  // ObjectMethod hoist .value properties to own properties","  def(\"ObjectMethod\")","    .bases(\"Node\", \"Function\")","    .build(\"kind\", \"key\", \"params\", \"body\", \"computed\")","    .field(\"kind\", or(\"method\", \"get\", \"set\"))","    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))","    .field(\"params\", [def(\"Pattern\")])","    .field(\"body\", def(\"BlockStatement\"))","    .field(\"computed\", Boolean, defaults[\"false\"])","    .field(\"generator\", Boolean, defaults[\"false\"])","    .field(\"async\", Boolean, defaults[\"false\"])","    .field(\"decorators\",","           or([def(\"Decorator\")], null),","           defaults[\"null\"]);","","  def(\"ObjectProperty\")","    .bases(\"Node\")","    .build(\"key\", \"value\")","    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))","    .field(\"value\", or(def(\"Expression\"), def(\"Pattern\")))","    .field(\"computed\", Boolean, defaults[\"false\"]);","","  var ClassBodyElement = or(","    def(\"MethodDefinition\"),","    def(\"VariableDeclarator\"),","    def(\"ClassPropertyDefinition\"),","    def(\"ClassProperty\"),","    def(\"ClassMethod\")","  );","","  // MethodDefinition -> ClassMethod","  def(\"ClassBody\")","    .bases(\"Declaration\")","    .build(\"body\")","    .field(\"body\", [ClassBodyElement]);","","  def(\"ClassMethod\")","    .bases(\"Declaration\", \"Function\")","    .build(\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\")","    .field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"))","    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))","    .field(\"params\", [def(\"Pattern\")])","    .field(\"body\", def(\"BlockStatement\"))","    .field(\"computed\", Boolean, defaults[\"false\"])","    .field(\"static\", Boolean, defaults[\"false\"])","    .field(\"generator\", Boolean, defaults[\"false\"])","    .field(\"async\", Boolean, defaults[\"false\"])","    .field(\"decorators\",","           or([def(\"Decorator\")], null),","           defaults[\"null\"]);","","  var ObjectPatternProperty = or(","    def(\"Property\"),","    def(\"PropertyPattern\"),","    def(\"SpreadPropertyPattern\"),","    def(\"SpreadProperty\"), // Used by Esprima","    def(\"ObjectProperty\"), // Babel 6","    def(\"RestProperty\") // Babel 6","  );","","  // Split into RestProperty and SpreadProperty","  def(\"ObjectPattern\")","    .bases(\"Pattern\")","    .build(\"properties\")","    .field(\"properties\", [ObjectPatternProperty])","    .field(\"decorators\",","           or([def(\"Decorator\")], null),","           defaults[\"null\"]);","","  def(\"SpreadProperty\")","    .bases(\"Node\")","    .build(\"argument\")","    .field(\"argument\", def(\"Expression\"));","","  def(\"RestProperty\")","    .bases(\"Node\")","    .build(\"argument\")","    .field(\"argument\", def(\"Expression\"));","","  def(\"ForAwaitStatement\")","    .bases(\"Statement\")","    .build(\"left\", \"right\", \"body\")","    .field(\"left\", or(","      def(\"VariableDeclaration\"),","      def(\"Expression\")))","    .field(\"right\", def(\"Expression\"))","    .field(\"body\", def(\"Statement\"));","","  // The callee node of a dynamic import(...) expression.","  def(\"Import\")","    .bases(\"Expression\")","    .build();","};",""],"l":{"1":1,"2":1,"5":1,"7":1,"8":1,"9":1,"11":1,"16":1,"21":1,"27":1,"34":1,"39":1,"44":1,"49":1,"54":1,"60":0,"63":1,"71":1,"77":1,"91":1,"98":1,"107":1,"112":1,"127":1,"137":1,"145":1,"150":1,"155":1,"165":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/equiv.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/equiv.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}},"2":{"name":"astNodesAreEquivalent","line":11,"loc":{"start":{"line":11,"column":4},"end":{"line":11,"column":54}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":35},"end":{"line":21,"column":51}}},"4":{"name":"subscriptForProperty","line":37,"loc":{"start":{"line":37,"column":4},"end":{"line":37,"column":44}}},"5":{"name":"areEquivalent","line":44,"loc":{"start":{"line":44,"column":4},"end":{"line":44,"column":46}}},"6":{"name":"arraysAreEquivalent","line":73,"loc":{"start":{"line":73,"column":4},"end":{"line":73,"column":52}}},"7":{"name":"objectsAreEquivalent","line":108,"loc":{"start":{"line":108,"column":4},"end":{"line":108,"column":53}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":186,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":50}},"3":{"start":{"line":3,"column":4},"end":{"line":3,"column":44}},"4":{"start":{"line":4,"column":4},"end":{"line":4,"column":44}},"5":{"start":{"line":5,"column":4},"end":{"line":5,"column":43}},"6":{"start":{"line":6,"column":4},"end":{"line":6,"column":45}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":41}},"8":{"start":{"line":8,"column":4},"end":{"line":8,"column":45}},"9":{"start":{"line":9,"column":4},"end":{"line":9,"column":49}},"10":{"start":{"line":11,"column":4},"end":{"line":19,"column":5}},"11":{"start":{"line":12,"column":8},"end":{"line":16,"column":9}},"12":{"start":{"line":13,"column":12},"end":{"line":13,"column":35}},"13":{"start":{"line":15,"column":12},"end":{"line":15,"column":31}},"14":{"start":{"line":18,"column":8},"end":{"line":18,"column":48}},"15":{"start":{"line":21,"column":4},"end":{"line":35,"column":6}},"16":{"start":{"line":22,"column":8},"end":{"line":22,"column":29}},"17":{"start":{"line":23,"column":8},"end":{"line":34,"column":9}},"18":{"start":{"line":24,"column":12},"end":{"line":33,"column":13}},"19":{"start":{"line":25,"column":16},"end":{"line":27,"column":17}},"20":{"start":{"line":26,"column":20},"end":{"line":26,"column":59}},"21":{"start":{"line":29,"column":16},"end":{"line":32,"column":18}},"22":{"start":{"line":37,"column":4},"end":{"line":42,"column":5}},"23":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"24":{"start":{"line":39,"column":12},"end":{"line":39,"column":34}},"25":{"start":{"line":41,"column":8},"end":{"line":41,"column":52}},"26":{"start":{"line":44,"column":4},"end":{"line":71,"column":5}},"27":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"28":{"start":{"line":46,"column":12},"end":{"line":46,"column":24}},"29":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"30":{"start":{"line":50,"column":12},"end":{"line":50,"column":58}},"31":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"32":{"start":{"line":54,"column":12},"end":{"line":54,"column":59}},"33":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"34":{"start":{"line":58,"column":12},"end":{"line":58,"column":50}},"35":{"start":{"line":61,"column":8},"end":{"line":68,"column":9}},"36":{"start":{"line":62,"column":12},"end":{"line":67,"column":16}},"37":{"start":{"line":70,"column":8},"end":{"line":70,"column":22}},"38":{"start":{"line":73,"column":4},"end":{"line":106,"column":5}},"39":{"start":{"line":74,"column":8},"end":{"line":74,"column":26}},"40":{"start":{"line":75,"column":8},"end":{"line":75,"column":31}},"41":{"start":{"line":77,"column":8},"end":{"line":82,"column":9}},"42":{"start":{"line":78,"column":12},"end":{"line":80,"column":13}},"43":{"start":{"line":79,"column":16},"end":{"line":79,"column":43}},"44":{"start":{"line":81,"column":12},"end":{"line":81,"column":25}},"45":{"start":{"line":84,"column":8},"end":{"line":103,"column":9}},"46":{"start":{"line":85,"column":12},"end":{"line":87,"column":13}},"47":{"start":{"line":86,"column":16},"end":{"line":86,"column":36}},"48":{"start":{"line":89,"column":12},"end":{"line":91,"column":13}},"49":{"start":{"line":90,"column":16},"end":{"line":90,"column":29}},"50":{"start":{"line":93,"column":12},"end":{"line":95,"column":13}},"51":{"start":{"line":94,"column":16},"end":{"line":94,"column":29}},"52":{"start":{"line":97,"column":12},"end":{"line":102,"column":13}},"53":{"start":{"line":98,"column":16},"end":{"line":98,"column":56}},"54":{"start":{"line":99,"column":16},"end":{"line":101,"column":17}},"55":{"start":{"line":100,"column":20},"end":{"line":100,"column":58}},"56":{"start":{"line":105,"column":8},"end":{"line":105,"column":20}},"57":{"start":{"line":108,"column":4},"end":{"line":183,"column":5}},"58":{"start":{"line":109,"column":8},"end":{"line":109,"column":27}},"59":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"60":{"start":{"line":111,"column":12},"end":{"line":111,"column":25}},"61":{"start":{"line":115,"column":8},"end":{"line":120,"column":9}},"62":{"start":{"line":116,"column":12},"end":{"line":118,"column":13}},"63":{"start":{"line":117,"column":16},"end":{"line":117,"column":41}},"64":{"start":{"line":119,"column":12},"end":{"line":119,"column":25}},"65":{"start":{"line":122,"column":8},"end":{"line":122,"column":38}},"66":{"start":{"line":123,"column":8},"end":{"line":123,"column":39}},"67":{"start":{"line":125,"column":8},"end":{"line":125,"column":38}},"68":{"start":{"line":126,"column":8},"end":{"line":126,"column":39}},"69":{"start":{"line":128,"column":8},"end":{"line":151,"column":9}},"70":{"start":{"line":129,"column":12},"end":{"line":148,"column":13}},"71":{"start":{"line":130,"column":16},"end":{"line":130,"column":37}},"72":{"start":{"line":131,"column":16},"end":{"line":131,"column":52}},"73":{"start":{"line":132,"column":16},"end":{"line":132,"column":52}},"74":{"start":{"line":134,"column":16},"end":{"line":136,"column":17}},"75":{"start":{"line":135,"column":20},"end":{"line":135,"column":43}},"76":{"start":{"line":138,"column":16},"end":{"line":140,"column":17}},"77":{"start":{"line":139,"column":20},"end":{"line":139,"column":33}},"78":{"start":{"line":142,"column":16},"end":{"line":147,"column":17}},"79":{"start":{"line":143,"column":20},"end":{"line":143,"column":60}},"80":{"start":{"line":144,"column":20},"end":{"line":146,"column":21}},"81":{"start":{"line":145,"column":24},"end":{"line":145,"column":62}},"82":{"start":{"line":150,"column":12},"end":{"line":150,"column":24}},"83":{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},"84":{"start":{"line":154,"column":12},"end":{"line":154,"column":25}},"85":{"start":{"line":160,"column":8},"end":{"line":160,"column":44}},"86":{"start":{"line":162,"column":8},"end":{"line":164,"column":9}},"87":{"start":{"line":163,"column":12},"end":{"line":163,"column":40}},"88":{"start":{"line":166,"column":8},"end":{"line":175,"column":9}},"89":{"start":{"line":167,"column":12},"end":{"line":167,"column":29}},"90":{"start":{"line":169,"column":12},"end":{"line":172,"column":13}},"91":{"start":{"line":170,"column":16},"end":{"line":170,"column":39}},"92":{"start":{"line":171,"column":16},"end":{"line":171,"column":29}},"93":{"start":{"line":174,"column":12},"end":{"line":174,"column":35}},"94":{"start":{"line":177,"column":8},"end":{"line":180,"column":9}},"95":{"start":{"line":178,"column":12},"end":{"line":178,"column":35}},"96":{"start":{"line":179,"column":12},"end":{"line":179,"column":18}},"97":{"start":{"line":182,"column":8},"end":{"line":182,"column":21}},"98":{"start":{"line":185,"column":4},"end":{"line":185,"column":33}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":8},"end":{"line":12,"column":8}},{"start":{"line":12,"column":8},"end":{"line":12,"column":8}}]},"2":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]},"3":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":12},"end":{"line":24,"column":12}},{"start":{"line":24,"column":12},"end":{"line":24,"column":12}}]},"4":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":16},"end":{"line":25,"column":16}},{"start":{"line":25,"column":16},"end":{"line":25,"column":16}}]},"5":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]},"6":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"7":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"8":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"9":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"10":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":19},"end":{"line":58,"column":34}},{"start":{"line":58,"column":39},"end":{"line":58,"column":48}}]},"11":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]},"12":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":19},"end":{"line":62,"column":36}},{"start":{"line":63,"column":16},"end":{"line":63,"column":37}},{"start":{"line":64,"column":16},"end":{"line":64,"column":37}},{"start":{"line":65,"column":16},"end":{"line":65,"column":43}},{"start":{"line":66,"column":16},"end":{"line":66,"column":45}}]},"13":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":77,"column":8}},{"start":{"line":77,"column":8},"end":{"line":77,"column":8}}]},"14":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":12},"end":{"line":77,"column":29}},{"start":{"line":77,"column":33},"end":{"line":77,"column":53}}]},"15":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":12},"end":{"line":78,"column":12}},{"start":{"line":78,"column":12},"end":{"line":78,"column":12}}]},"16":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":12},"end":{"line":85,"column":12}},{"start":{"line":85,"column":12},"end":{"line":85,"column":12}}]},"17":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":89,"column":12}},{"start":{"line":89,"column":12},"end":{"line":89,"column":12}}]},"18":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":12},"end":{"line":93,"column":12}},{"start":{"line":93,"column":12},"end":{"line":93,"column":12}}]},"19":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":97,"column":12}},{"start":{"line":97,"column":12},"end":{"line":97,"column":12}}]},"20":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":16}},{"start":{"line":99,"column":16},"end":{"line":99,"column":16}}]},"21":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":110,"column":8}},{"start":{"line":110,"column":8},"end":{"line":110,"column":8}}]},"22":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"23":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":12},"end":{"line":116,"column":12}},{"start":{"line":116,"column":12},"end":{"line":116,"column":12}}]},"24":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":8},"end":{"line":128,"column":8}},{"start":{"line":128,"column":8},"end":{"line":128,"column":8}}]},"25":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":16}},{"start":{"line":134,"column":16},"end":{"line":134,"column":16}}]},"26":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":16},"end":{"line":138,"column":16}},{"start":{"line":138,"column":16},"end":{"line":138,"column":16}}]},"27":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":16},"end":{"line":142,"column":16}},{"start":{"line":142,"column":16},"end":{"line":142,"column":16}}]},"28":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":20},"end":{"line":144,"column":20}},{"start":{"line":144,"column":20},"end":{"line":144,"column":20}}]},"29":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":8},"end":{"line":153,"column":8}},{"start":{"line":153,"column":8},"end":{"line":153,"column":8}}]},"30":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":169,"column":12}},{"start":{"line":169,"column":12},"end":{"line":169,"column":12}}]}},"code":["module.exports = function (fork) {","    var types = fork.use(require('../lib/types'));","    var getFieldNames = types.getFieldNames;","    var getFieldValue = types.getFieldValue;","    var isArray = types.builtInTypes.array;","    var isObject = types.builtInTypes.object;","    var isDate = types.builtInTypes.Date;","    var isRegExp = types.builtInTypes.RegExp;","    var hasOwn = Object.prototype.hasOwnProperty;","","    function astNodesAreEquivalent(a, b, problemPath) {","        if (isArray.check(problemPath)) {","            problemPath.length = 0;","        } else {","            problemPath = null;","        }","","        return areEquivalent(a, b, problemPath);","    }","","    astNodesAreEquivalent.assert = function (a, b) {","        var problemPath = [];","        if (!astNodesAreEquivalent(a, b, problemPath)) {","            if (problemPath.length === 0) {","                if (a !== b) {","                    throw new Error(\"Nodes must be equal\");","                }","            } else {","                throw new Error(","                  \"Nodes differ in the following path: \" +","                  problemPath.map(subscriptForProperty).join(\"\")","                );","            }","        }","    };","","    function subscriptForProperty(property) {","        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {","            return \".\" + property;","        }","        return \"[\" + JSON.stringify(property) + \"]\";","    }","","    function areEquivalent(a, b, problemPath) {","        if (a === b) {","            return true;","        }","","        if (isArray.check(a)) {","            return arraysAreEquivalent(a, b, problemPath);","        }","","        if (isObject.check(a)) {","            return objectsAreEquivalent(a, b, problemPath);","        }","","        if (isDate.check(a)) {","            return isDate.check(b) && (+a === +b);","        }","","        if (isRegExp.check(a)) {","            return isRegExp.check(b) && (","                a.source === b.source &&","                a.global === b.global &&","                a.multiline === b.multiline &&","                a.ignoreCase === b.ignoreCase","              );","        }","","        return a == b;","    }","","    function arraysAreEquivalent(a, b, problemPath) {","        isArray.assert(a);","        var aLength = a.length;","","        if (!isArray.check(b) || b.length !== aLength) {","            if (problemPath) {","                problemPath.push(\"length\");","            }","            return false;","        }","","        for (var i = 0; i < aLength; ++i) {","            if (problemPath) {","                problemPath.push(i);","            }","","            if (i in a !== i in b) {","                return false;","            }","","            if (!areEquivalent(a[i], b[i], problemPath)) {","                return false;","            }","","            if (problemPath) {","                var problemPathTail = problemPath.pop();","                if (problemPathTail !== i) {","                    throw new Error(\"\" + problemPathTail);","                }","            }","        }","","        return true;","    }","","    function objectsAreEquivalent(a, b, problemPath) {","        isObject.assert(a);","        if (!isObject.check(b)) {","            return false;","        }","","        // Fast path for a common property of AST nodes.","        if (a.type !== b.type) {","            if (problemPath) {","                problemPath.push(\"type\");","            }","            return false;","        }","","        var aNames = getFieldNames(a);","        var aNameCount = aNames.length;","","        var bNames = getFieldNames(b);","        var bNameCount = bNames.length;","","        if (aNameCount === bNameCount) {","            for (var i = 0; i < aNameCount; ++i) {","                var name = aNames[i];","                var aChild = getFieldValue(a, name);","                var bChild = getFieldValue(b, name);","","                if (problemPath) {","                    problemPath.push(name);","                }","","                if (!areEquivalent(aChild, bChild, problemPath)) {","                    return false;","                }","","                if (problemPath) {","                    var problemPathTail = problemPath.pop();","                    if (problemPathTail !== name) {","                        throw new Error(\"\" + problemPathTail);","                    }","                }","            }","","            return true;","        }","","        if (!problemPath) {","            return false;","        }","","        // Since aNameCount !== bNameCount, we need to find some name that's","        // missing in aNames but present in bNames, or vice-versa.","","        var seenNames = Object.create(null);","","        for (i = 0; i < aNameCount; ++i) {","            seenNames[aNames[i]] = true;","        }","","        for (i = 0; i < bNameCount; ++i) {","            name = bNames[i];","","            if (!hasOwn.call(seenNames, name)) {","                problemPath.push(name);","                return false;","            }","","            delete seenNames[name];","        }","","        for (name in seenNames) {","            problemPath.push(name);","            break;","        }","","        return false;","    }","    ","    return astNodesAreEquivalent;","};",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"12":0,"13":0,"15":0,"18":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"29":0,"37":1,"38":0,"39":0,"41":0,"44":1,"45":0,"46":0,"49":0,"50":0,"53":0,"54":0,"57":0,"58":0,"61":0,"62":0,"70":0,"73":1,"74":0,"75":0,"77":0,"78":0,"79":0,"81":0,"84":0,"85":0,"86":0,"89":0,"90":0,"93":0,"94":0,"97":0,"98":0,"99":0,"100":0,"105":0,"108":1,"109":0,"110":0,"111":0,"115":0,"116":0,"117":0,"119":0,"122":0,"123":0,"125":0,"126":0,"128":0,"129":0,"130":0,"131":0,"132":0,"134":0,"135":0,"138":0,"139":0,"142":0,"143":0,"144":0,"145":0,"150":0,"153":0,"154":0,"160":0,"162":0,"163":0,"166":0,"167":0,"169":0,"170":0,"171":0,"174":0,"177":0,"178":0,"179":0,"182":0,"185":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/path.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/path.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":1,"116":0,"117":0,"118":0,"119":0,"120":0,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":1,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":1,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":1,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":1,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":33}}},"2":{"name":"Path","line":12,"loc":{"start":{"line":12,"column":4},"end":{"line":12,"column":43}}},"3":{"name":"getChildCache","line":44,"loc":{"start":{"line":44,"column":4},"end":{"line":44,"column":33}}},"4":{"name":"getChildPath","line":50,"loc":{"start":{"line":50,"column":4},"end":{"line":50,"column":38}}},"5":{"name":"getValueProperty","line":66,"loc":{"start":{"line":66,"column":26},"end":{"line":66,"column":58}}},"6":{"name":"get","line":70,"loc":{"start":{"line":70,"column":13},"end":{"line":70,"column":32}}},"7":{"name":"each","line":82,"loc":{"start":{"line":82,"column":14},"end":{"line":82,"column":47}}},"8":{"name":"map","line":106,"loc":{"start":{"line":106,"column":13},"end":{"line":106,"column":45}}},"9":{"name":"(anonymous_9)","line":109,"loc":{"start":{"line":109,"column":18},"end":{"line":109,"column":39}}},"10":{"name":"filter","line":116,"loc":{"start":{"line":116,"column":16},"end":{"line":116,"column":51}}},"11":{"name":"(anonymous_11)","line":119,"loc":{"start":{"line":119,"column":18},"end":{"line":119,"column":39}}},"12":{"name":"emptyMoves","line":128,"loc":{"start":{"line":128,"column":4},"end":{"line":128,"column":26}}},"13":{"name":"getMoves","line":129,"loc":{"start":{"line":129,"column":4},"end":{"line":129,"column":48}}},"14":{"name":"(anonymous_14)","line":174,"loc":{"start":{"line":174,"column":15},"end":{"line":174,"column":27}}},"15":{"name":"shift","line":186,"loc":{"start":{"line":186,"column":15},"end":{"line":186,"column":32}}},"16":{"name":"unshift","line":193,"loc":{"start":{"line":193,"column":17},"end":{"line":193,"column":40}}},"17":{"name":"push","line":200,"loc":{"start":{"line":200,"column":14},"end":{"line":200,"column":34}}},"18":{"name":"pop","line":206,"loc":{"start":{"line":206,"column":13},"end":{"line":206,"column":28}}},"19":{"name":"insertAt","line":214,"loc":{"start":{"line":214,"column":18},"end":{"line":214,"column":49}}},"20":{"name":"insertBefore","line":232,"loc":{"start":{"line":232,"column":22},"end":{"line":232,"column":50}}},"21":{"name":"insertAfter","line":242,"loc":{"start":{"line":242,"column":21},"end":{"line":242,"column":48}}},"22":{"name":"repairRelationshipWithParent","line":252,"loc":{"start":{"line":252,"column":4},"end":{"line":252,"column":48}}},"23":{"name":"replace","line":294,"loc":{"start":{"line":294,"column":17},"end":{"line":294,"column":47}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":21}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":17}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":26}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"6":{"start":{"line":7,"column":0},"end":{"line":369,"column":2}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":45}},"8":{"start":{"line":9,"column":4},"end":{"line":9,"column":43}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":45}},"10":{"start":{"line":12,"column":4},"end":{"line":40,"column":5}},"11":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"12":{"start":{"line":14,"column":12},"end":{"line":14,"column":80}},"13":{"start":{"line":17,"column":8},"end":{"line":24,"column":9}},"14":{"start":{"line":18,"column":12},"end":{"line":20,"column":13}},"15":{"start":{"line":19,"column":16},"end":{"line":19,"column":36}},"16":{"start":{"line":22,"column":12},"end":{"line":22,"column":30}},"17":{"start":{"line":23,"column":12},"end":{"line":23,"column":24}},"18":{"start":{"line":28,"column":8},"end":{"line":28,"column":27}},"19":{"start":{"line":31,"column":8},"end":{"line":31,"column":37}},"20":{"start":{"line":35,"column":8},"end":{"line":35,"column":25}},"21":{"start":{"line":39,"column":8},"end":{"line":39,"column":33}},"22":{"start":{"line":42,"column":4},"end":{"line":42,"column":28}},"23":{"start":{"line":44,"column":4},"end":{"line":48,"column":5}},"24":{"start":{"line":47,"column":8},"end":{"line":47,"column":78}},"25":{"start":{"line":50,"column":4},"end":{"line":62,"column":5}},"26":{"start":{"line":51,"column":8},"end":{"line":51,"column":40}},"27":{"start":{"line":52,"column":8},"end":{"line":52,"column":59}},"28":{"start":{"line":53,"column":8},"end":{"line":53,"column":36}},"29":{"start":{"line":54,"column":8},"end":{"line":60,"column":9}},"30":{"start":{"line":57,"column":12},"end":{"line":59,"column":14}},"31":{"start":{"line":61,"column":8},"end":{"line":61,"column":25}},"32":{"start":{"line":66,"column":4},"end":{"line":68,"column":6}},"33":{"start":{"line":67,"column":8},"end":{"line":67,"column":32}},"34":{"start":{"line":70,"column":4},"end":{"line":80,"column":6}},"35":{"start":{"line":71,"column":8},"end":{"line":71,"column":24}},"36":{"start":{"line":72,"column":8},"end":{"line":72,"column":30}},"37":{"start":{"line":73,"column":8},"end":{"line":73,"column":33}},"38":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"39":{"start":{"line":76,"column":12},"end":{"line":76,"column":48}},"40":{"start":{"line":79,"column":8},"end":{"line":79,"column":20}},"41":{"start":{"line":82,"column":4},"end":{"line":104,"column":6}},"42":{"start":{"line":83,"column":8},"end":{"line":83,"column":28}},"43":{"start":{"line":84,"column":8},"end":{"line":84,"column":36}},"44":{"start":{"line":85,"column":8},"end":{"line":85,"column":18}},"45":{"start":{"line":88,"column":8},"end":{"line":92,"column":9}},"46":{"start":{"line":89,"column":12},"end":{"line":91,"column":13}},"47":{"start":{"line":90,"column":16},"end":{"line":90,"column":44}},"48":{"start":{"line":98,"column":8},"end":{"line":98,"column":34}},"49":{"start":{"line":99,"column":8},"end":{"line":103,"column":9}},"50":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"51":{"start":{"line":101,"column":16},"end":{"line":101,"column":54}},"52":{"start":{"line":106,"column":4},"end":{"line":114,"column":6}},"53":{"start":{"line":107,"column":8},"end":{"line":107,"column":24}},"54":{"start":{"line":109,"column":8},"end":{"line":111,"column":20}},"55":{"start":{"line":110,"column":12},"end":{"line":110,"column":56}},"56":{"start":{"line":113,"column":8},"end":{"line":113,"column":22}},"57":{"start":{"line":116,"column":4},"end":{"line":126,"column":6}},"58":{"start":{"line":117,"column":8},"end":{"line":117,"column":24}},"59":{"start":{"line":119,"column":8},"end":{"line":123,"column":20}},"60":{"start":{"line":120,"column":12},"end":{"line":122,"column":13}},"61":{"start":{"line":121,"column":16},"end":{"line":121,"column":39}},"62":{"start":{"line":125,"column":8},"end":{"line":125,"column":22}},"63":{"start":{"line":128,"column":4},"end":{"line":128,"column":28}},"64":{"start":{"line":129,"column":4},"end":{"line":184,"column":5}},"65":{"start":{"line":130,"column":8},"end":{"line":130,"column":35}},"66":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"67":{"start":{"line":133,"column":12},"end":{"line":133,"column":30}},"68":{"start":{"line":136,"column":8},"end":{"line":136,"column":39}},"69":{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},"70":{"start":{"line":138,"column":12},"end":{"line":138,"column":30}},"71":{"start":{"line":141,"column":8},"end":{"line":141,"column":36}},"72":{"start":{"line":142,"column":8},"end":{"line":151,"column":9}},"73":{"start":{"line":143,"column":12},"end":{"line":143,"column":22}},"74":{"start":{"line":144,"column":12},"end":{"line":144,"column":25}},"75":{"start":{"line":145,"column":15},"end":{"line":151,"column":9}},"76":{"start":{"line":146,"column":12},"end":{"line":146,"column":39}},"77":{"start":{"line":147,"column":12},"end":{"line":147,"column":25}},"78":{"start":{"line":149,"column":12},"end":{"line":149,"column":39}},"79":{"start":{"line":150,"column":12},"end":{"line":150,"column":40}},"80":{"start":{"line":153,"column":8},"end":{"line":153,"column":31}},"81":{"start":{"line":154,"column":8},"end":{"line":154,"column":29}},"82":{"start":{"line":156,"column":8},"end":{"line":156,"column":40}},"83":{"start":{"line":157,"column":8},"end":{"line":157,"column":40}},"84":{"start":{"line":159,"column":8},"end":{"line":170,"column":9}},"85":{"start":{"line":160,"column":12},"end":{"line":169,"column":13}},"86":{"start":{"line":161,"column":16},"end":{"line":161,"column":44}},"87":{"start":{"line":162,"column":16},"end":{"line":164,"column":17}},"88":{"start":{"line":163,"column":20},"end":{"line":163,"column":40}},"89":{"start":{"line":165,"column":16},"end":{"line":165,"column":42}},"90":{"start":{"line":166,"column":16},"end":{"line":166,"column":42}},"91":{"start":{"line":167,"column":16},"end":{"line":167,"column":44}},"92":{"start":{"line":168,"column":16},"end":{"line":168,"column":32}},"93":{"start":{"line":172,"column":8},"end":{"line":172,"column":28}},"94":{"start":{"line":174,"column":8},"end":{"line":183,"column":10}},"95":{"start":{"line":175,"column":12},"end":{"line":182,"column":13}},"96":{"start":{"line":176,"column":16},"end":{"line":176,"column":48}},"97":{"start":{"line":177,"column":16},"end":{"line":179,"column":17}},"98":{"start":{"line":178,"column":20},"end":{"line":178,"column":40}},"99":{"start":{"line":180,"column":16},"end":{"line":180,"column":44}},"100":{"start":{"line":181,"column":16},"end":{"line":181,"column":55}},"101":{"start":{"line":186,"column":4},"end":{"line":191,"column":6}},"102":{"start":{"line":187,"column":8},"end":{"line":187,"column":38}},"103":{"start":{"line":188,"column":8},"end":{"line":188,"column":40}},"104":{"start":{"line":189,"column":8},"end":{"line":189,"column":15}},"105":{"start":{"line":190,"column":8},"end":{"line":190,"column":22}},"106":{"start":{"line":193,"column":4},"end":{"line":198,"column":6}},"107":{"start":{"line":194,"column":8},"end":{"line":194,"column":52}},"108":{"start":{"line":195,"column":8},"end":{"line":195,"column":69}},"109":{"start":{"line":196,"column":8},"end":{"line":196,"column":15}},"110":{"start":{"line":197,"column":8},"end":{"line":197,"column":22}},"111":{"start":{"line":200,"column":4},"end":{"line":204,"column":6}},"112":{"start":{"line":201,"column":8},"end":{"line":201,"column":35}},"113":{"start":{"line":202,"column":8},"end":{"line":202,"column":41}},"114":{"start":{"line":203,"column":8},"end":{"line":203,"column":60}},"115":{"start":{"line":206,"column":4},"end":{"line":212,"column":6}},"116":{"start":{"line":207,"column":8},"end":{"line":207,"column":35}},"117":{"start":{"line":208,"column":8},"end":{"line":208,"column":40}},"118":{"start":{"line":209,"column":8},"end":{"line":209,"column":44}},"119":{"start":{"line":210,"column":8},"end":{"line":210,"column":28}},"120":{"start":{"line":211,"column":8},"end":{"line":211,"column":32}},"121":{"start":{"line":214,"column":4},"end":{"line":230,"column":6}},"122":{"start":{"line":215,"column":8},"end":{"line":215,"column":36}},"123":{"start":{"line":216,"column":8},"end":{"line":216,"column":51}},"124":{"start":{"line":217,"column":8},"end":{"line":219,"column":9}},"125":{"start":{"line":218,"column":12},"end":{"line":218,"column":24}},"126":{"start":{"line":221,"column":8},"end":{"line":221,"column":35}},"127":{"start":{"line":223,"column":8},"end":{"line":225,"column":9}},"128":{"start":{"line":224,"column":12},"end":{"line":224,"column":53}},"129":{"start":{"line":227,"column":8},"end":{"line":227,"column":15}},"130":{"start":{"line":229,"column":8},"end":{"line":229,"column":20}},"131":{"start":{"line":232,"column":4},"end":{"line":240,"column":6}},"132":{"start":{"line":233,"column":8},"end":{"line":233,"column":33}},"133":{"start":{"line":234,"column":8},"end":{"line":234,"column":36}},"134":{"start":{"line":235,"column":8},"end":{"line":235,"column":39}},"135":{"start":{"line":236,"column":8},"end":{"line":238,"column":9}},"136":{"start":{"line":237,"column":12},"end":{"line":237,"column":44}},"137":{"start":{"line":239,"column":8},"end":{"line":239,"column":51}},"138":{"start":{"line":242,"column":4},"end":{"line":250,"column":6}},"139":{"start":{"line":243,"column":8},"end":{"line":243,"column":33}},"140":{"start":{"line":244,"column":8},"end":{"line":244,"column":36}},"141":{"start":{"line":245,"column":8},"end":{"line":245,"column":43}},"142":{"start":{"line":246,"column":8},"end":{"line":248,"column":9}},"143":{"start":{"line":247,"column":12},"end":{"line":247,"column":44}},"144":{"start":{"line":249,"column":8},"end":{"line":249,"column":51}},"145":{"start":{"line":252,"column":4},"end":{"line":292,"column":5}},"146":{"start":{"line":253,"column":8},"end":{"line":255,"column":9}},"147":{"start":{"line":254,"column":12},"end":{"line":254,"column":32}},"148":{"start":{"line":257,"column":8},"end":{"line":257,"column":33}},"149":{"start":{"line":258,"column":8},"end":{"line":261,"column":9}},"150":{"start":{"line":260,"column":12},"end":{"line":260,"column":24}},"151":{"start":{"line":263,"column":8},"end":{"line":263,"column":35}},"152":{"start":{"line":264,"column":8},"end":{"line":264,"column":44}},"153":{"start":{"line":267,"column":8},"end":{"line":282,"column":9}},"154":{"start":{"line":268,"column":12},"end":{"line":268,"column":42}},"155":{"start":{"line":269,"column":15},"end":{"line":282,"column":9}},"156":{"start":{"line":272,"column":12},"end":{"line":272,"column":52}},"157":{"start":{"line":273,"column":12},"end":{"line":275,"column":13}},"158":{"start":{"line":274,"column":16},"end":{"line":274,"column":50}},"159":{"start":{"line":280,"column":12},"end":{"line":280,"column":48}},"160":{"start":{"line":281,"column":12},"end":{"line":281,"column":42}},"161":{"start":{"line":284,"column":8},"end":{"line":286,"column":9}},"162":{"start":{"line":285,"column":12},"end":{"line":285,"column":32}},"163":{"start":{"line":287,"column":8},"end":{"line":289,"column":9}},"164":{"start":{"line":288,"column":12},"end":{"line":288,"column":32}},"165":{"start":{"line":291,"column":8},"end":{"line":291,"column":20}},"166":{"start":{"line":294,"column":4},"end":{"line":366,"column":6}},"167":{"start":{"line":295,"column":8},"end":{"line":295,"column":25}},"168":{"start":{"line":296,"column":8},"end":{"line":296,"column":48}},"169":{"start":{"line":297,"column":8},"end":{"line":297,"column":57}},"170":{"start":{"line":298,"column":8},"end":{"line":298,"column":37}},"171":{"start":{"line":300,"column":8},"end":{"line":300,"column":43}},"172":{"start":{"line":302,"column":8},"end":{"line":363,"column":9}},"173":{"start":{"line":303,"column":12},"end":{"line":303,"column":52}},"174":{"start":{"line":304,"column":12},"end":{"line":304,"column":75}},"175":{"start":{"line":306,"column":12},"end":{"line":306,"column":44}},"176":{"start":{"line":307,"column":12},"end":{"line":309,"column":13}},"177":{"start":{"line":308,"column":16},"end":{"line":308,"column":46}},"178":{"start":{"line":311,"column":12},"end":{"line":311,"column":79}},"179":{"start":{"line":313,"column":12},"end":{"line":315,"column":13}},"180":{"start":{"line":314,"column":16},"end":{"line":314,"column":36}},"181":{"start":{"line":316,"column":12},"end":{"line":318,"column":13}},"182":{"start":{"line":317,"column":16},"end":{"line":317,"column":36}},"183":{"start":{"line":320,"column":12},"end":{"line":320,"column":19}},"184":{"start":{"line":322,"column":12},"end":{"line":344,"column":13}},"185":{"start":{"line":323,"column":16},"end":{"line":323,"column":34}},"186":{"start":{"line":324,"column":16},"end":{"line":324,"column":46}},"187":{"start":{"line":325,"column":16},"end":{"line":325,"column":41}},"188":{"start":{"line":328,"column":16},"end":{"line":330,"column":17}},"189":{"start":{"line":329,"column":20},"end":{"line":329,"column":40}},"190":{"start":{"line":332,"column":16},"end":{"line":335,"column":17}},"191":{"start":{"line":333,"column":20},"end":{"line":333,"column":45}},"192":{"start":{"line":334,"column":20},"end":{"line":334,"column":45}},"193":{"start":{"line":337,"column":16},"end":{"line":339,"column":17}},"194":{"start":{"line":338,"column":20},"end":{"line":338,"column":69}},"195":{"start":{"line":341,"column":16},"end":{"line":343,"column":17}},"196":{"start":{"line":342,"column":20},"end":{"line":342,"column":40}},"197":{"start":{"line":346,"column":15},"end":{"line":363,"column":9}},"198":{"start":{"line":347,"column":12},"end":{"line":349,"column":13}},"199":{"start":{"line":348,"column":16},"end":{"line":348,"column":41}},"200":{"start":{"line":350,"column":12},"end":{"line":350,"column":62}},"201":{"start":{"line":351,"column":12},"end":{"line":351,"column":31}},"202":{"start":{"line":353,"column":15},"end":{"line":363,"column":9}},"203":{"start":{"line":354,"column":12},"end":{"line":354,"column":42}},"204":{"start":{"line":355,"column":12},"end":{"line":355,"column":30}},"205":{"start":{"line":356,"column":12},"end":{"line":356,"column":37}},"206":{"start":{"line":362,"column":12},"end":{"line":362,"column":54}},"207":{"start":{"line":365,"column":8},"end":{"line":365,"column":23}},"208":{"start":{"line":368,"column":4},"end":{"line":368,"column":16}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":13,"column":8}},{"start":{"line":13,"column":8},"end":{"line":13,"column":8}}]},"2":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":8},"end":{"line":17,"column":8}},{"start":{"line":17,"column":8},"end":{"line":17,"column":8}}]},"3":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":12}},{"start":{"line":18,"column":12},"end":{"line":18,"column":12}}]},"4":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":15},"end":{"line":47,"column":32}},{"start":{"line":47,"column":37},"end":{"line":47,"column":76}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"6":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":37}},{"start":{"line":56,"column":10},"end":{"line":56,"column":46}}]},"7":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":89,"column":12}},{"start":{"line":89,"column":12},"end":{"line":89,"column":12}}]},"8":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":18},"end":{"line":98,"column":25}},{"start":{"line":98,"column":29},"end":{"line":98,"column":33}}]},"9":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":100,"column":12}},{"start":{"line":100,"column":12},"end":{"line":100,"column":12}}]},"10":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":12},"end":{"line":120,"column":12}},{"start":{"line":120,"column":12},"end":{"line":120,"column":12}}]},"11":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":8},"end":{"line":132,"column":8}},{"start":{"line":132,"column":8},"end":{"line":132,"column":8}}]},"12":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":8},"end":{"line":137,"column":8}},{"start":{"line":137,"column":8},"end":{"line":137,"column":8}}]},"13":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":8},"end":{"line":142,"column":8}},{"start":{"line":142,"column":8},"end":{"line":142,"column":8}}]},"14":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":15},"end":{"line":145,"column":15}},{"start":{"line":145,"column":15},"end":{"line":145,"column":15}}]},"15":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":12},"end":{"line":160,"column":12}},{"start":{"line":160,"column":12},"end":{"line":160,"column":12}}]},"16":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":16},"end":{"line":162,"column":16}},{"start":{"line":162,"column":16},"end":{"line":162,"column":16}}]},"17":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":16},"end":{"line":177,"column":16}},{"start":{"line":177,"column":16},"end":{"line":177,"column":16}}]},"18":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":8},"end":{"line":217,"column":8}},{"start":{"line":217,"column":8},"end":{"line":217,"column":8}}]},"19":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":8},"end":{"line":253,"column":8}},{"start":{"line":253,"column":8},"end":{"line":253,"column":8}}]},"20":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8}},{"start":{"line":258,"column":8},"end":{"line":258,"column":8}}]},"21":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":8},"end":{"line":267,"column":8}},{"start":{"line":267,"column":8},"end":{"line":267,"column":8}}]},"22":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":15},"end":{"line":269,"column":15}},{"start":{"line":269,"column":15},"end":{"line":269,"column":15}}]},"23":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":12},"end":{"line":273,"column":12}},{"start":{"line":273,"column":12},"end":{"line":273,"column":12}}]},"24":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":8},"end":{"line":284,"column":8}},{"start":{"line":284,"column":8},"end":{"line":284,"column":8}}]},"25":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":8},"end":{"line":287,"column":8}},{"start":{"line":287,"column":8},"end":{"line":287,"column":8}}]},"26":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":8},"end":{"line":302,"column":8}},{"start":{"line":302,"column":8},"end":{"line":302,"column":8}}]},"27":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":12},"end":{"line":313,"column":12}},{"start":{"line":313,"column":12},"end":{"line":313,"column":12}}]},"28":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12}},{"start":{"line":316,"column":12},"end":{"line":316,"column":12}}]},"29":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":12},"end":{"line":322,"column":12}},{"start":{"line":322,"column":12},"end":{"line":322,"column":12}}]},"30":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":16},"end":{"line":328,"column":16}},{"start":{"line":328,"column":16},"end":{"line":328,"column":16}}]},"31":{"line":332,"type":"if","locations":[{"start":{"line":332,"column":16},"end":{"line":332,"column":16}},{"start":{"line":332,"column":16},"end":{"line":332,"column":16}}]},"32":{"line":341,"type":"if","locations":[{"start":{"line":341,"column":16},"end":{"line":341,"column":16}},{"start":{"line":341,"column":16},"end":{"line":341,"column":16}}]},"33":{"line":346,"type":"if","locations":[{"start":{"line":346,"column":15},"end":{"line":346,"column":15}},{"start":{"line":346,"column":15},"end":{"line":346,"column":15}}]},"34":{"line":347,"type":"if","locations":[{"start":{"line":347,"column":12},"end":{"line":347,"column":12}},{"start":{"line":347,"column":12},"end":{"line":347,"column":12}}]},"35":{"line":353,"type":"if","locations":[{"start":{"line":353,"column":15},"end":{"line":353,"column":15}},{"start":{"line":353,"column":15},"end":{"line":353,"column":15}}]}},"code":["var Ap = Array.prototype;","var slice = Ap.slice;","var map = Ap.map;","var Op = Object.prototype;","var hasOwn = Op.hasOwnProperty;","","module.exports = function (fork) {","    var types = fork.use(require(\"./types\"));","    var isArray = types.builtInTypes.array;","    var isNumber = types.builtInTypes.number;","","    function Path(value, parentPath, name) {","        if (!(this instanceof Path)) {","            throw new Error(\"Path constructor cannot be invoked without 'new'\");","        }","","        if (parentPath) {","            if (!(parentPath instanceof Path)) {","                throw new Error(\"\");","            }","        } else {","            parentPath = null;","            name = null;","        }","","        // The value encapsulated by this Path, generally equal to","        // parentPath.value[name] if we have a parentPath.","        this.value = value;","","        // The immediate parent Path of this Path.","        this.parentPath = parentPath;","","        // The name of the property of parentPath.value through which this","        // Path's value was reached.","        this.name = name;","","        // Calling path.get(\"child\") multiple times always returns the same","        // child Path object, for both performance and consistency reasons.","        this.__childCache = null;","    }","","    var Pp = Path.prototype;","","    function getChildCache(path) {","        // Lazily create the child cache. This also cheapens cache","        // invalidation, since you can just reset path.__childCache to null.","        return path.__childCache || (path.__childCache = Object.create(null));","    }","","    function getChildPath(path, name) {","        var cache = getChildCache(path);","        var actualChildValue = path.getValueProperty(name);","        var childPath = cache[name];","        if (!hasOwn.call(cache, name) ||","          // Ensure consistency between cache and reality.","          childPath.value !== actualChildValue) {","            childPath = cache[name] = new path.constructor(","              actualChildValue, path, name","            );","        }","        return childPath;","    }","","// This method is designed to be overridden by subclasses that need to","// handle missing properties, etc.","    Pp.getValueProperty = function getValueProperty(name) {","        return this.value[name];","    };","","    Pp.get = function get(name) {","        var path = this;","        var names = arguments;","        var count = names.length;","","        for (var i = 0; i < count; ++i) {","            path = getChildPath(path, names[i]);","        }","","        return path;","    };","","    Pp.each = function each(callback, context) {","        var childPaths = [];","        var len = this.value.length;","        var i = 0;","","        // Collect all the original child paths before invoking the callback.","        for (var i = 0; i < len; ++i) {","            if (hasOwn.call(this.value, i)) {","                childPaths[i] = this.get(i);","            }","        }","","        // Invoke the callback on just the original child paths, regardless of","        // any modifications made to the array by the callback. I chose these","        // semantics over cleverly invoking the callback on new elements because","        // this way is much easier to reason about.","        context = context || this;","        for (i = 0; i < len; ++i) {","            if (hasOwn.call(childPaths, i)) {","                callback.call(context, childPaths[i]);","            }","        }","    };","","    Pp.map = function map(callback, context) {","        var result = [];","","        this.each(function (childPath) {","            result.push(callback.call(this, childPath));","        }, context);","","        return result;","    };","","    Pp.filter = function filter(callback, context) {","        var result = [];","","        this.each(function (childPath) {","            if (callback.call(this, childPath)) {","                result.push(childPath);","            }","        }, context);","","        return result;","    };","","    function emptyMoves() {}","    function getMoves(path, offset, start, end) {","        isArray.assert(path.value);","","        if (offset === 0) {","            return emptyMoves;","        }","","        var length = path.value.length;","        if (length < 1) {","            return emptyMoves;","        }","","        var argc = arguments.length;","        if (argc === 2) {","            start = 0;","            end = length;","        } else if (argc === 3) {","            start = Math.max(start, 0);","            end = length;","        } else {","            start = Math.max(start, 0);","            end = Math.min(end, length);","        }","","        isNumber.assert(start);","        isNumber.assert(end);","","        var moves = Object.create(null);","        var cache = getChildCache(path);","","        for (var i = start; i < end; ++i) {","            if (hasOwn.call(path.value, i)) {","                var childPath = path.get(i);","                if (childPath.name !== i) {","                    throw new Error(\"\");","                }","                var newIndex = i + offset;","                childPath.name = newIndex;","                moves[newIndex] = childPath;","                delete cache[i];","            }","        }","","        delete cache.length;","","        return function () {","            for (var newIndex in moves) {","                var childPath = moves[newIndex];","                if (childPath.name !== +newIndex) {","                    throw new Error(\"\");","                }","                cache[newIndex] = childPath;","                path.value[newIndex] = childPath.value;","            }","        };","    }","","    Pp.shift = function shift() {","        var move = getMoves(this, -1);","        var result = this.value.shift();","        move();","        return result;","    };","","    Pp.unshift = function unshift(node) {","        var move = getMoves(this, arguments.length);","        var result = this.value.unshift.apply(this.value, arguments);","        move();","        return result;","    };","","    Pp.push = function push(node) {","        isArray.assert(this.value);","        delete getChildCache(this).length","        return this.value.push.apply(this.value, arguments);","    };","","    Pp.pop = function pop() {","        isArray.assert(this.value);","        var cache = getChildCache(this);","        delete cache[this.value.length - 1];","        delete cache.length;","        return this.value.pop();","    };","","    Pp.insertAt = function insertAt(index, node) {","        var argc = arguments.length;","        var move = getMoves(this, argc - 1, index);","        if (move === emptyMoves) {","            return this;","        }","","        index = Math.max(index, 0);","","        for (var i = 1; i < argc; ++i) {","            this.value[index + i - 1] = arguments[i];","        }","","        move();","","        return this;","    };","","    Pp.insertBefore = function insertBefore(node) {","        var pp = this.parentPath;","        var argc = arguments.length;","        var insertAtArgs = [this.name];","        for (var i = 0; i < argc; ++i) {","            insertAtArgs.push(arguments[i]);","        }","        return pp.insertAt.apply(pp, insertAtArgs);","    };","","    Pp.insertAfter = function insertAfter(node) {","        var pp = this.parentPath;","        var argc = arguments.length;","        var insertAtArgs = [this.name + 1];","        for (var i = 0; i < argc; ++i) {","            insertAtArgs.push(arguments[i]);","        }","        return pp.insertAt.apply(pp, insertAtArgs);","    };","","    function repairRelationshipWithParent(path) {","        if (!(path instanceof Path)) {","            throw new Error(\"\");","        }","","        var pp = path.parentPath;","        if (!pp) {","            // Orphan paths have no relationship to repair.","            return path;","        }","","        var parentValue = pp.value;","        var parentCache = getChildCache(pp);","","        // Make sure parentCache[path.name] is populated.","        if (parentValue[path.name] === path.value) {","            parentCache[path.name] = path;","        } else if (isArray.check(parentValue)) {","            // Something caused path.name to become out of date, so attempt to","            // recover by searching for path.value in parentValue.","            var i = parentValue.indexOf(path.value);","            if (i >= 0) {","                parentCache[path.name = i] = path;","            }","        } else {","            // If path.value disagrees with parentValue[path.name], and","            // path.name is not an array index, let path.value become the new","            // parentValue[path.name] and update parentCache accordingly.","            parentValue[path.name] = path.value;","            parentCache[path.name] = path;","        }","","        if (parentValue[path.name] !== path.value) {","            throw new Error(\"\");","        }","        if (path.parentPath.get(path.name) !== path) {","            throw new Error(\"\");","        }","","        return path;","    }","","    Pp.replace = function replace(replacement) {","        var results = [];","        var parentValue = this.parentPath.value;","        var parentCache = getChildCache(this.parentPath);","        var count = arguments.length;","","        repairRelationshipWithParent(this);","","        if (isArray.check(parentValue)) {","            var originalLength = parentValue.length;","            var move = getMoves(this.parentPath, count - 1, this.name + 1);","","            var spliceArgs = [this.name, 1];","            for (var i = 0; i < count; ++i) {","                spliceArgs.push(arguments[i]);","            }","","            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);","","            if (splicedOut[0] !== this.value) {","                throw new Error(\"\");","            }","            if (parentValue.length !== (originalLength - 1 + count)) {","                throw new Error(\"\");","            }","","            move();","","            if (count === 0) {","                delete this.value;","                delete parentCache[this.name];","                this.__childCache = null;","","            } else {","                if (parentValue[this.name] !== replacement) {","                    throw new Error(\"\");","                }","","                if (this.value !== replacement) {","                    this.value = replacement;","                    this.__childCache = null;","                }","","                for (i = 0; i < count; ++i) {","                    results.push(this.parentPath.get(this.name + i));","                }","","                if (results[0] !== this) {","                    throw new Error(\"\");","                }","            }","","        } else if (count === 1) {","            if (this.value !== replacement) {","                this.__childCache = null;","            }","            this.value = parentValue[this.name] = replacement;","            results.push(this);","","        } else if (count === 0) {","            delete parentValue[this.name];","            delete this.value;","            this.__childCache = null;","","            // Leave this path cached as parentCache[this.name], even though","            // it no longer has a value defined.","","        } else {","            throw new Error(\"Could not replace path\");","        }","","        return results;","    };","","    return Path;","};",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"12":1,"13":0,"14":0,"17":0,"18":0,"19":0,"22":0,"23":0,"28":0,"31":0,"35":0,"39":0,"42":1,"44":1,"47":0,"50":1,"51":0,"52":0,"53":0,"54":0,"57":0,"61":0,"66":1,"67":0,"70":1,"71":0,"72":0,"73":0,"75":0,"76":0,"79":0,"82":1,"83":0,"84":0,"85":0,"88":0,"89":0,"90":0,"98":0,"99":0,"100":0,"101":0,"106":1,"107":0,"109":0,"110":0,"113":0,"116":1,"117":0,"119":0,"120":0,"121":0,"125":0,"128":1,"129":1,"130":0,"132":0,"133":0,"136":0,"137":0,"138":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"149":0,"150":0,"153":0,"154":0,"156":0,"157":0,"159":0,"160":0,"161":0,"162":0,"163":0,"165":0,"166":0,"167":0,"168":0,"172":0,"174":0,"175":0,"176":0,"177":0,"178":0,"180":0,"181":0,"186":1,"187":0,"188":0,"189":0,"190":0,"193":1,"194":0,"195":0,"196":0,"197":0,"200":1,"201":0,"202":0,"203":0,"206":1,"207":0,"208":0,"209":0,"210":0,"211":0,"214":1,"215":0,"216":0,"217":0,"218":0,"221":0,"223":0,"224":0,"227":0,"229":0,"232":1,"233":0,"234":0,"235":0,"236":0,"237":0,"239":0,"242":1,"243":0,"244":0,"245":0,"246":0,"247":0,"249":0,"252":1,"253":0,"254":0,"257":0,"258":0,"260":0,"263":0,"264":0,"267":0,"268":0,"269":0,"272":0,"273":0,"274":0,"280":0,"281":0,"284":0,"285":0,"287":0,"288":0,"291":0,"294":1,"295":0,"296":0,"297":0,"298":0,"300":0,"302":0,"303":0,"304":0,"306":0,"307":0,"308":0,"311":0,"313":0,"314":0,"316":0,"317":0,"320":0,"322":0,"323":0,"324":0,"325":0,"328":0,"329":0,"332":0,"333":0,"334":0,"337":0,"338":0,"341":0,"342":0,"346":0,"347":0,"348":0,"350":0,"351":0,"353":0,"354":0,"355":0,"356":0,"362":0,"365":0,"368":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/node-path.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/node-path.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":1,"109":0,"110":1,"111":1,"112":10,"113":23,"114":1,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":1,"124":0,"125":0,"126":1,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":1,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":1,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0,0,0,0,0,0,0,0,0],"18":[0,0,0],"19":[0,0,0,0,0,0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0],"27":[0,0,0,0,0,0,0,0,0,0,0],"28":[0,0,0,0],"29":[0,0,0,0,0,0,0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0,0],"35":[0,0],"36":[0,0,0],"37":[0,0],"38":[0,0,0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":10,"16":23,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":33}}},"2":{"name":"NodePath","line":10,"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":47}}},"3":{"name":"(anonymous_3)","line":28,"loc":{"start":{"line":28,"column":17},"end":{"line":28,"column":29}}},"4":{"name":"(anonymous_4)","line":39,"loc":{"start":{"line":39,"column":17},"end":{"line":39,"column":29}}},"5":{"name":"(anonymous_5)","line":50,"loc":{"start":{"line":50,"column":17},"end":{"line":50,"column":29}}},"6":{"name":"(anonymous_6)","line":61,"loc":{"start":{"line":61,"column":18},"end":{"line":61,"column":30}}},"7":{"name":"(anonymous_7)","line":68,"loc":{"start":{"line":68,"column":16},"end":{"line":68,"column":28}}},"8":{"name":"(anonymous_8)","line":77,"loc":{"start":{"line":77,"column":23},"end":{"line":77,"column":35}}},"9":{"name":"(anonymous_9)","line":88,"loc":{"start":{"line":88,"column":25},"end":{"line":88,"column":37}}},"10":{"name":"(anonymous_10)","line":110,"loc":{"start":{"line":110,"column":24},"end":{"line":110,"column":36}}},"11":{"name":"(anonymous_11)","line":123,"loc":{"start":{"line":123,"column":27},"end":{"line":123,"column":43}}},"12":{"name":"(anonymous_12)","line":140,"loc":{"start":{"line":140,"column":22},"end":{"line":140,"column":57}}},"13":{"name":"isBinary","line":297,"loc":{"start":{"line":297,"column":4},"end":{"line":297,"column":28}}},"14":{"name":"isUnaryLike","line":302,"loc":{"start":{"line":302,"column":4},"end":{"line":302,"column":31}}},"15":{"name":"(anonymous_15)","line":321,"loc":{"start":{"line":321,"column":14},"end":{"line":321,"column":33}}},"16":{"name":"(anonymous_16)","line":322,"loc":{"start":{"line":322,"column":21},"end":{"line":322,"column":35}}},"17":{"name":"containsCallExpression","line":327,"loc":{"start":{"line":327,"column":4},"end":{"line":327,"column":42}}},"18":{"name":"(anonymous_18)","line":337,"loc":{"start":{"line":337,"column":41},"end":{"line":337,"column":64}}},"19":{"name":"(anonymous_19)","line":345,"loc":{"start":{"line":345,"column":32},"end":{"line":345,"column":44}}},"20":{"name":"(anonymous_20)","line":351,"loc":{"start":{"line":351,"column":27},"end":{"line":351,"column":39}}},"21":{"name":"firstInStatement","line":355,"loc":{"start":{"line":355,"column":4},"end":{"line":355,"column":36}}},"22":{"name":"cleanUpNodesAfterPrune","line":436,"loc":{"start":{"line":436,"column":4},"end":{"line":436,"column":55}}},"23":{"name":"cleanUpIfStatementAfterPrune","line":453,"loc":{"start":{"line":453,"column":4},"end":{"line":453,"column":55}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":476,"column":2}},"2":{"start":{"line":2,"column":4},"end":{"line":2,"column":45}},"3":{"start":{"line":3,"column":4},"end":{"line":3,"column":29}},"4":{"start":{"line":4,"column":4},"end":{"line":4,"column":27}},"5":{"start":{"line":5,"column":4},"end":{"line":5,"column":45}},"6":{"start":{"line":6,"column":4},"end":{"line":6,"column":43}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":43}},"8":{"start":{"line":8,"column":4},"end":{"line":8,"column":45}},"9":{"start":{"line":10,"column":4},"end":{"line":15,"column":5}},"10":{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},"11":{"start":{"line":12,"column":12},"end":{"line":12,"column":84}},"12":{"start":{"line":14,"column":8},"end":{"line":14,"column":49}},"13":{"start":{"line":17,"column":4},"end":{"line":24,"column":7}},"14":{"start":{"line":26,"column":4},"end":{"line":59,"column":7}},"15":{"start":{"line":29,"column":16},"end":{"line":32,"column":19}},"16":{"start":{"line":34,"column":16},"end":{"line":34,"column":33}},"17":{"start":{"line":40,"column":16},"end":{"line":43,"column":19}},"18":{"start":{"line":45,"column":16},"end":{"line":45,"column":35}},"19":{"start":{"line":51,"column":16},"end":{"line":54,"column":19}},"20":{"start":{"line":56,"column":16},"end":{"line":56,"column":34}},"21":{"start":{"line":61,"column":4},"end":{"line":66,"column":6}},"22":{"start":{"line":62,"column":8},"end":{"line":62,"column":25}},"23":{"start":{"line":63,"column":8},"end":{"line":63,"column":27}},"24":{"start":{"line":64,"column":8},"end":{"line":64,"column":26}},"25":{"start":{"line":65,"column":8},"end":{"line":65,"column":61}},"26":{"start":{"line":68,"column":4},"end":{"line":74,"column":6}},"27":{"start":{"line":69,"column":8},"end":{"line":69,"column":44}},"28":{"start":{"line":71,"column":8},"end":{"line":71,"column":23}},"29":{"start":{"line":73,"column":8},"end":{"line":73,"column":57}},"30":{"start":{"line":77,"column":4},"end":{"line":85,"column":6}},"31":{"start":{"line":78,"column":8},"end":{"line":78,"column":31}},"32":{"start":{"line":79,"column":8},"end":{"line":81,"column":9}},"33":{"start":{"line":80,"column":12},"end":{"line":80,"column":25}},"34":{"start":{"line":83,"column":8},"end":{"line":83,"column":33}},"35":{"start":{"line":84,"column":8},"end":{"line":84,"column":37}},"36":{"start":{"line":88,"column":4},"end":{"line":107,"column":6}},"37":{"start":{"line":89,"column":8},"end":{"line":89,"column":31}},"38":{"start":{"line":90,"column":8},"end":{"line":90,"column":33}},"39":{"start":{"line":92,"column":8},"end":{"line":100,"column":9}},"40":{"start":{"line":93,"column":12},"end":{"line":95,"column":13}},"41":{"start":{"line":94,"column":16},"end":{"line":94,"column":35}},"42":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"43":{"start":{"line":98,"column":16},"end":{"line":98,"column":35}},"44":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"45":{"start":{"line":103,"column":12},"end":{"line":103,"column":31}},"46":{"start":{"line":106,"column":8},"end":{"line":106,"column":26}},"47":{"start":{"line":110,"column":4},"end":{"line":121,"column":6}},"48":{"start":{"line":111,"column":8},"end":{"line":111,"column":31}},"49":{"start":{"line":112,"column":8},"end":{"line":112,"column":33}},"50":{"start":{"line":113,"column":8},"end":{"line":113,"column":35}},"51":{"start":{"line":115,"column":8},"end":{"line":118,"column":9}},"52":{"start":{"line":117,"column":12},"end":{"line":117,"column":43}},"53":{"start":{"line":120,"column":8},"end":{"line":120,"column":29}},"54":{"start":{"line":123,"column":4},"end":{"line":125,"column":6}},"55":{"start":{"line":124,"column":8},"end":{"line":124,"column":53}},"56":{"start":{"line":140,"column":4},"end":{"line":295,"column":6}},"57":{"start":{"line":141,"column":8},"end":{"line":141,"column":33}},"58":{"start":{"line":142,"column":8},"end":{"line":144,"column":9}},"59":{"start":{"line":143,"column":12},"end":{"line":143,"column":25}},"60":{"start":{"line":146,"column":8},"end":{"line":146,"column":30}},"61":{"start":{"line":149,"column":8},"end":{"line":151,"column":9}},"62":{"start":{"line":150,"column":12},"end":{"line":150,"column":25}},"63":{"start":{"line":154,"column":8},"end":{"line":156,"column":9}},"64":{"start":{"line":155,"column":12},"end":{"line":155,"column":25}},"65":{"start":{"line":158,"column":8},"end":{"line":163,"column":9}},"66":{"start":{"line":159,"column":12},"end":{"line":159,"column":31}},"67":{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},"68":{"start":{"line":161,"column":16},"end":{"line":161,"column":29}},"69":{"start":{"line":165,"column":8},"end":{"line":165,"column":30}},"70":{"start":{"line":167,"column":8},"end":{"line":287,"column":9}},"71":{"start":{"line":171,"column":16},"end":{"line":173,"column":44}},"72":{"start":{"line":177,"column":16},"end":{"line":211,"column":17}},"73":{"start":{"line":179,"column":24},"end":{"line":180,"column":52}},"74":{"start":{"line":185,"column":24},"end":{"line":185,"column":36}},"75":{"start":{"line":188,"column":24},"end":{"line":189,"column":52}},"76":{"start":{"line":193,"column":24},"end":{"line":193,"column":49}},"77":{"start":{"line":194,"column":24},"end":{"line":194,"column":48}},"78":{"start":{"line":195,"column":24},"end":{"line":195,"column":47}},"79":{"start":{"line":196,"column":24},"end":{"line":196,"column":48}},"80":{"start":{"line":198,"column":24},"end":{"line":200,"column":25}},"81":{"start":{"line":199,"column":28},"end":{"line":199,"column":40}},"82":{"start":{"line":202,"column":24},"end":{"line":207,"column":25}},"83":{"start":{"line":203,"column":28},"end":{"line":205,"column":29}},"84":{"start":{"line":204,"column":32},"end":{"line":204,"column":71}},"85":{"start":{"line":206,"column":28},"end":{"line":206,"column":40}},"86":{"start":{"line":210,"column":24},"end":{"line":210,"column":37}},"87":{"start":{"line":214,"column":16},"end":{"line":229,"column":17}},"88":{"start":{"line":220,"column":24},"end":{"line":220,"column":37}},"89":{"start":{"line":223,"column":24},"end":{"line":223,"column":58}},"90":{"start":{"line":228,"column":24},"end":{"line":228,"column":36}},"91":{"start":{"line":232,"column":16},"end":{"line":247,"column":17}},"92":{"start":{"line":243,"column":24},"end":{"line":243,"column":36}},"93":{"start":{"line":246,"column":24},"end":{"line":246,"column":37}},"94":{"start":{"line":250,"column":16},"end":{"line":253,"column":44}},"95":{"start":{"line":257,"column":16},"end":{"line":279,"column":17}},"96":{"start":{"line":263,"column":24},"end":{"line":263,"column":36}},"97":{"start":{"line":266,"column":24},"end":{"line":267,"column":52}},"98":{"start":{"line":270,"column":24},"end":{"line":271,"column":50}},"99":{"start":{"line":274,"column":24},"end":{"line":275,"column":52}},"100":{"start":{"line":278,"column":24},"end":{"line":278,"column":37}},"101":{"start":{"line":282,"column":16},"end":{"line":286,"column":17}},"102":{"start":{"line":285,"column":20},"end":{"line":285,"column":56}},"103":{"start":{"line":289,"column":8},"end":{"line":292,"column":24}},"104":{"start":{"line":292,"column":12},"end":{"line":292,"column":24}},"105":{"start":{"line":294,"column":8},"end":{"line":294,"column":21}},"106":{"start":{"line":297,"column":4},"end":{"line":300,"column":5}},"107":{"start":{"line":298,"column":8},"end":{"line":299,"column":45}},"108":{"start":{"line":302,"column":4},"end":{"line":308,"column":5}},"109":{"start":{"line":303,"column":8},"end":{"line":307,"column":64}},"110":{"start":{"line":310,"column":4},"end":{"line":310,"column":24}},"111":{"start":{"line":311,"column":4},"end":{"line":325,"column":7}},"112":{"start":{"line":322,"column":8},"end":{"line":324,"column":11}},"113":{"start":{"line":323,"column":12},"end":{"line":323,"column":31}},"114":{"start":{"line":327,"column":4},"end":{"line":343,"column":5}},"115":{"start":{"line":328,"column":8},"end":{"line":330,"column":9}},"116":{"start":{"line":329,"column":12},"end":{"line":329,"column":24}},"117":{"start":{"line":332,"column":8},"end":{"line":334,"column":9}},"118":{"start":{"line":333,"column":12},"end":{"line":333,"column":53}},"119":{"start":{"line":336,"column":8},"end":{"line":340,"column":9}},"120":{"start":{"line":337,"column":12},"end":{"line":339,"column":15}},"121":{"start":{"line":338,"column":16},"end":{"line":338,"column":53}},"122":{"start":{"line":342,"column":8},"end":{"line":342,"column":21}},"123":{"start":{"line":345,"column":4},"end":{"line":349,"column":6}},"124":{"start":{"line":346,"column":8},"end":{"line":346,"column":29}},"125":{"start":{"line":347,"column":8},"end":{"line":348,"column":45}},"126":{"start":{"line":351,"column":4},"end":{"line":353,"column":6}},"127":{"start":{"line":352,"column":8},"end":{"line":352,"column":38}},"128":{"start":{"line":355,"column":4},"end":{"line":431,"column":5}},"129":{"start":{"line":356,"column":8},"end":{"line":428,"column":9}},"130":{"start":{"line":357,"column":12},"end":{"line":357,"column":29}},"131":{"start":{"line":358,"column":12},"end":{"line":358,"column":38}},"132":{"start":{"line":360,"column":12},"end":{"line":367,"column":13}},"133":{"start":{"line":363,"column":16},"end":{"line":365,"column":17}},"134":{"start":{"line":364,"column":20},"end":{"line":364,"column":59}},"135":{"start":{"line":366,"column":16},"end":{"line":366,"column":28}},"136":{"start":{"line":369,"column":12},"end":{"line":375,"column":13}},"137":{"start":{"line":371,"column":16},"end":{"line":373,"column":17}},"138":{"start":{"line":372,"column":20},"end":{"line":372,"column":59}},"139":{"start":{"line":374,"column":16},"end":{"line":374,"column":28}},"140":{"start":{"line":377,"column":12},"end":{"line":384,"column":13}},"141":{"start":{"line":380,"column":16},"end":{"line":382,"column":17}},"142":{"start":{"line":381,"column":20},"end":{"line":381,"column":59}},"143":{"start":{"line":383,"column":16},"end":{"line":383,"column":25}},"144":{"start":{"line":386,"column":12},"end":{"line":392,"column":13}},"145":{"start":{"line":388,"column":16},"end":{"line":390,"column":17}},"146":{"start":{"line":389,"column":20},"end":{"line":389,"column":59}},"147":{"start":{"line":391,"column":16},"end":{"line":391,"column":25}},"148":{"start":{"line":394,"column":12},"end":{"line":400,"column":13}},"149":{"start":{"line":396,"column":16},"end":{"line":398,"column":17}},"150":{"start":{"line":397,"column":20},"end":{"line":397,"column":59}},"151":{"start":{"line":399,"column":16},"end":{"line":399,"column":25}},"152":{"start":{"line":402,"column":12},"end":{"line":408,"column":13}},"153":{"start":{"line":404,"column":16},"end":{"line":406,"column":17}},"154":{"start":{"line":405,"column":20},"end":{"line":405,"column":59}},"155":{"start":{"line":407,"column":16},"end":{"line":407,"column":25}},"156":{"start":{"line":410,"column":12},"end":{"line":416,"column":13}},"157":{"start":{"line":412,"column":16},"end":{"line":414,"column":17}},"158":{"start":{"line":413,"column":20},"end":{"line":413,"column":59}},"159":{"start":{"line":415,"column":16},"end":{"line":415,"column":25}},"160":{"start":{"line":418,"column":12},"end":{"line":425,"column":13}},"161":{"start":{"line":421,"column":16},"end":{"line":423,"column":17}},"162":{"start":{"line":422,"column":20},"end":{"line":422,"column":59}},"163":{"start":{"line":424,"column":16},"end":{"line":424,"column":25}},"164":{"start":{"line":427,"column":12},"end":{"line":427,"column":25}},"165":{"start":{"line":430,"column":8},"end":{"line":430,"column":20}},"166":{"start":{"line":436,"column":4},"end":{"line":451,"column":5}},"167":{"start":{"line":437,"column":8},"end":{"line":448,"column":9}},"168":{"start":{"line":438,"column":12},"end":{"line":438,"column":75}},"169":{"start":{"line":439,"column":12},"end":{"line":441,"column":13}},"170":{"start":{"line":440,"column":16},"end":{"line":440,"column":49}},"171":{"start":{"line":442,"column":15},"end":{"line":448,"column":9}},"172":{"start":{"line":443,"column":12},"end":{"line":445,"column":13}},"173":{"start":{"line":444,"column":16},"end":{"line":444,"column":49}},"174":{"start":{"line":446,"column":15},"end":{"line":448,"column":9}},"175":{"start":{"line":447,"column":12},"end":{"line":447,"column":60}},"176":{"start":{"line":450,"column":8},"end":{"line":450,"column":33}},"177":{"start":{"line":453,"column":4},"end":{"line":473,"column":5}},"178":{"start":{"line":454,"column":8},"end":{"line":454,"column":59}},"179":{"start":{"line":455,"column":8},"end":{"line":455,"column":59}},"180":{"start":{"line":456,"column":8},"end":{"line":456,"column":61}},"181":{"start":{"line":458,"column":8},"end":{"line":472,"column":9}},"182":{"start":{"line":459,"column":12},"end":{"line":459,"column":80}},"183":{"start":{"line":461,"column":12},"end":{"line":461,"column":57}},"184":{"start":{"line":462,"column":15},"end":{"line":472,"column":9}},"185":{"start":{"line":463,"column":12},"end":{"line":463,"column":85}},"186":{"start":{"line":465,"column":12},"end":{"line":467,"column":13}},"187":{"start":{"line":466,"column":16},"end":{"line":466,"column":64}},"188":{"start":{"line":469,"column":12},"end":{"line":469,"column":67}},"189":{"start":{"line":470,"column":12},"end":{"line":470,"column":61}},"190":{"start":{"line":471,"column":12},"end":{"line":471,"column":51}},"191":{"start":{"line":475,"column":4},"end":{"line":475,"column":20}}},"branchMap":{"1":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":8},"end":{"line":11,"column":8}},{"start":{"line":11,"column":8},"end":{"line":11,"column":8}}]},"2":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]},"3":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":15},"end":{"line":84,"column":17}},{"start":{"line":84,"column":21},"end":{"line":84,"column":28}},{"start":{"line":84,"column":32},"end":{"line":84,"column":36}}]},"4":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8}},{"start":{"line":92,"column":8},"end":{"line":92,"column":8}}]},"5":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":19},"end":{"line":93,"column":21}},{"start":{"line":93,"column":25},"end":{"line":93,"column":48}}]},"6":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":97,"column":12}},{"start":{"line":97,"column":12},"end":{"line":97,"column":12}}]},"7":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":15},"end":{"line":102,"column":17}},{"start":{"line":102,"column":21},"end":{"line":102,"column":44}}]},"8":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":15},"end":{"line":106,"column":17}},{"start":{"line":106,"column":21},"end":{"line":106,"column":25}}]},"9":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":20},"end":{"line":113,"column":22}},{"start":{"line":113,"column":26},"end":{"line":113,"column":34}}]},"10":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"11":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":31}},{"start":{"line":116,"column":10},"end":{"line":116,"column":38}}]},"12":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":15},"end":{"line":120,"column":20}},{"start":{"line":120,"column":24},"end":{"line":120,"column":28}}]},"13":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":8},"end":{"line":142,"column":8}},{"start":{"line":142,"column":8},"end":{"line":142,"column":8}}]},"14":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":8},"end":{"line":149,"column":8}},{"start":{"line":149,"column":8},"end":{"line":149,"column":8}}]},"15":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":8},"end":{"line":154,"column":8}},{"start":{"line":154,"column":8},"end":{"line":154,"column":8}}]},"16":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":12},"end":{"line":160,"column":12}},{"start":{"line":160,"column":12},"end":{"line":160,"column":12}}]},"17":{"line":167,"type":"switch","locations":[{"start":{"line":168,"column":12},"end":{"line":168,"column":35}},{"start":{"line":169,"column":12},"end":{"line":169,"column":33}},{"start":{"line":170,"column":12},"end":{"line":173,"column":44}},{"start":{"line":175,"column":12},"end":{"line":175,"column":36}},{"start":{"line":176,"column":12},"end":{"line":211,"column":17}},{"start":{"line":213,"column":12},"end":{"line":229,"column":17}},{"start":{"line":231,"column":12},"end":{"line":247,"column":17}},{"start":{"line":249,"column":12},"end":{"line":253,"column":44}},{"start":{"line":255,"column":12},"end":{"line":255,"column":40}},{"start":{"line":256,"column":12},"end":{"line":279,"column":17}},{"start":{"line":281,"column":12},"end":{"line":286,"column":17}}]},"18":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":23},"end":{"line":171,"column":57}},{"start":{"line":172,"column":21},"end":{"line":172,"column":43}},{"start":{"line":173,"column":21},"end":{"line":173,"column":43}}]},"19":{"line":177,"type":"switch","locations":[{"start":{"line":178,"column":20},"end":{"line":180,"column":52}},{"start":{"line":182,"column":20},"end":{"line":182,"column":43}},{"start":{"line":183,"column":20},"end":{"line":183,"column":41}},{"start":{"line":184,"column":20},"end":{"line":185,"column":36}},{"start":{"line":187,"column":20},"end":{"line":189,"column":52}},{"start":{"line":191,"column":20},"end":{"line":191,"column":44}},{"start":{"line":192,"column":20},"end":{"line":207,"column":25}},{"start":{"line":209,"column":20},"end":{"line":210,"column":37}}]},"20":{"line":179,"type":"binary-expr","locations":[{"start":{"line":179,"column":31},"end":{"line":179,"column":53}},{"start":{"line":180,"column":29},"end":{"line":180,"column":51}}]},"21":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":31},"end":{"line":188,"column":53}},{"start":{"line":189,"column":29},"end":{"line":189,"column":51}}]},"22":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":24},"end":{"line":198,"column":24}},{"start":{"line":198,"column":24},"end":{"line":198,"column":24}}]},"23":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":24},"end":{"line":202,"column":24}},{"start":{"line":202,"column":24},"end":{"line":202,"column":24}}]},"24":{"line":202,"type":"binary-expr","locations":[{"start":{"line":202,"column":28},"end":{"line":202,"column":37}},{"start":{"line":202,"column":41},"end":{"line":202,"column":62}}]},"25":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":28},"end":{"line":203,"column":28}},{"start":{"line":203,"column":28},"end":{"line":203,"column":28}}]},"26":{"line":214,"type":"switch","locations":[{"start":{"line":215,"column":20},"end":{"line":220,"column":37}},{"start":{"line":222,"column":20},"end":{"line":223,"column":58}},{"start":{"line":225,"column":20},"end":{"line":228,"column":36}}]},"27":{"line":232,"type":"switch","locations":[{"start":{"line":233,"column":20},"end":{"line":233,"column":44}},{"start":{"line":234,"column":20},"end":{"line":234,"column":45}},{"start":{"line":235,"column":20},"end":{"line":235,"column":43}},{"start":{"line":236,"column":20},"end":{"line":236,"column":41}},{"start":{"line":237,"column":20},"end":{"line":237,"column":42}},{"start":{"line":238,"column":20},"end":{"line":238,"column":42}},{"start":{"line":239,"column":20},"end":{"line":239,"column":44}},{"start":{"line":240,"column":20},"end":{"line":240,"column":41}},{"start":{"line":241,"column":20},"end":{"line":241,"column":49}},{"start":{"line":242,"column":20},"end":{"line":243,"column":36}},{"start":{"line":245,"column":20},"end":{"line":246,"column":37}}]},"28":{"line":250,"type":"binary-expr","locations":[{"start":{"line":250,"column":23},"end":{"line":250,"column":57}},{"start":{"line":251,"column":21},"end":{"line":251,"column":47}},{"start":{"line":252,"column":21},"end":{"line":252,"column":43}},{"start":{"line":253,"column":21},"end":{"line":253,"column":43}}]},"29":{"line":257,"type":"switch","locations":[{"start":{"line":258,"column":20},"end":{"line":258,"column":43}},{"start":{"line":259,"column":20},"end":{"line":259,"column":41}},{"start":{"line":260,"column":20},"end":{"line":260,"column":42}},{"start":{"line":261,"column":20},"end":{"line":261,"column":44}},{"start":{"line":262,"column":20},"end":{"line":263,"column":36}},{"start":{"line":265,"column":20},"end":{"line":267,"column":52}},{"start":{"line":269,"column":20},"end":{"line":271,"column":50}},{"start":{"line":273,"column":20},"end":{"line":275,"column":52}},{"start":{"line":277,"column":20},"end":{"line":278,"column":37}}]},"30":{"line":266,"type":"binary-expr","locations":[{"start":{"line":266,"column":31},"end":{"line":266,"column":53}},{"start":{"line":267,"column":29},"end":{"line":267,"column":51}}]},"31":{"line":270,"type":"binary-expr","locations":[{"start":{"line":270,"column":31},"end":{"line":270,"column":51}},{"start":{"line":271,"column":29},"end":{"line":271,"column":49}}]},"32":{"line":274,"type":"binary-expr","locations":[{"start":{"line":274,"column":31},"end":{"line":274,"column":53}},{"start":{"line":275,"column":29},"end":{"line":275,"column":51}}]},"33":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":16},"end":{"line":282,"column":16}},{"start":{"line":282,"column":16},"end":{"line":282,"column":16}}]},"34":{"line":282,"type":"binary-expr","locations":[{"start":{"line":282,"column":20},"end":{"line":282,"column":51}},{"start":{"line":283,"column":18},"end":{"line":283,"column":40}},{"start":{"line":284,"column":18},"end":{"line":284,"column":40}}]},"35":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":8},"end":{"line":289,"column":8}},{"start":{"line":289,"column":8},"end":{"line":289,"column":8}}]},"36":{"line":289,"type":"binary-expr","locations":[{"start":{"line":289,"column":12},"end":{"line":289,"column":44}},{"start":{"line":290,"column":10},"end":{"line":290,"column":39}},{"start":{"line":291,"column":10},"end":{"line":291,"column":33}}]},"37":{"line":298,"type":"binary-expr","locations":[{"start":{"line":298,"column":15},"end":{"line":298,"column":45}},{"start":{"line":299,"column":13},"end":{"line":299,"column":44}}]},"38":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":15},"end":{"line":303,"column":44}},{"start":{"line":306,"column":14},"end":{"line":306,"column":29}},{"start":{"line":306,"column":33},"end":{"line":306,"column":60}},{"start":{"line":307,"column":14},"end":{"line":307,"column":30}},{"start":{"line":307,"column":34},"end":{"line":307,"column":62}}]},"39":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":8},"end":{"line":328,"column":8}},{"start":{"line":328,"column":8},"end":{"line":328,"column":8}}]},"40":{"line":332,"type":"if","locations":[{"start":{"line":332,"column":8},"end":{"line":332,"column":8}},{"start":{"line":332,"column":8},"end":{"line":332,"column":8}}]},"41":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":8},"end":{"line":336,"column":8}},{"start":{"line":336,"column":8},"end":{"line":336,"column":8}}]},"42":{"line":347,"type":"binary-expr","locations":[{"start":{"line":347,"column":15},"end":{"line":347,"column":48}},{"start":{"line":348,"column":13},"end":{"line":348,"column":44}}]},"43":{"line":360,"type":"if","locations":[{"start":{"line":360,"column":12},"end":{"line":360,"column":12}},{"start":{"line":360,"column":12},"end":{"line":360,"column":12}}]},"44":{"line":360,"type":"binary-expr","locations":[{"start":{"line":360,"column":16},"end":{"line":360,"column":46}},{"start":{"line":361,"column":14},"end":{"line":361,"column":41}},{"start":{"line":362,"column":14},"end":{"line":362,"column":29}}]},"45":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":16},"end":{"line":363,"column":16}},{"start":{"line":363,"column":16},"end":{"line":363,"column":16}}]},"46":{"line":369,"type":"if","locations":[{"start":{"line":369,"column":12},"end":{"line":369,"column":12}},{"start":{"line":369,"column":12},"end":{"line":369,"column":12}}]},"47":{"line":369,"type":"binary-expr","locations":[{"start":{"line":369,"column":16},"end":{"line":369,"column":51}},{"start":{"line":370,"column":14},"end":{"line":370,"column":40}}]},"48":{"line":371,"type":"if","locations":[{"start":{"line":371,"column":16},"end":{"line":371,"column":16}},{"start":{"line":371,"column":16},"end":{"line":371,"column":16}}]},"49":{"line":377,"type":"if","locations":[{"start":{"line":377,"column":12},"end":{"line":377,"column":12}},{"start":{"line":377,"column":12},"end":{"line":377,"column":12}}]},"50":{"line":377,"type":"binary-expr","locations":[{"start":{"line":377,"column":16},"end":{"line":377,"column":50}},{"start":{"line":378,"column":14},"end":{"line":378,"column":48}},{"start":{"line":379,"column":14},"end":{"line":379,"column":29}}]},"51":{"line":380,"type":"if","locations":[{"start":{"line":380,"column":16},"end":{"line":380,"column":16}},{"start":{"line":380,"column":16},"end":{"line":380,"column":16}}]},"52":{"line":386,"type":"if","locations":[{"start":{"line":386,"column":12},"end":{"line":386,"column":12}},{"start":{"line":386,"column":12},"end":{"line":386,"column":12}}]},"53":{"line":386,"type":"binary-expr","locations":[{"start":{"line":386,"column":16},"end":{"line":386,"column":46}},{"start":{"line":387,"column":14},"end":{"line":387,"column":36}}]},"54":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":16},"end":{"line":388,"column":16}},{"start":{"line":388,"column":16},"end":{"line":388,"column":16}}]},"55":{"line":394,"type":"if","locations":[{"start":{"line":394,"column":12},"end":{"line":394,"column":12}},{"start":{"line":394,"column":12},"end":{"line":394,"column":12}}]},"56":{"line":394,"type":"binary-expr","locations":[{"start":{"line":394,"column":16},"end":{"line":394,"column":48}},{"start":{"line":395,"column":14},"end":{"line":395,"column":36}}]},"57":{"line":396,"type":"if","locations":[{"start":{"line":396,"column":16},"end":{"line":396,"column":16}},{"start":{"line":396,"column":16},"end":{"line":396,"column":16}}]},"58":{"line":402,"type":"if","locations":[{"start":{"line":402,"column":12},"end":{"line":402,"column":12}},{"start":{"line":402,"column":12},"end":{"line":402,"column":12}}]},"59":{"line":402,"type":"binary-expr","locations":[{"start":{"line":402,"column":16},"end":{"line":402,"column":53}},{"start":{"line":403,"column":14},"end":{"line":403,"column":34}}]},"60":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":16},"end":{"line":404,"column":16}},{"start":{"line":404,"column":16},"end":{"line":404,"column":16}}]},"61":{"line":410,"type":"if","locations":[{"start":{"line":410,"column":12},"end":{"line":410,"column":12}},{"start":{"line":410,"column":12},"end":{"line":410,"column":12}}]},"62":{"line":410,"type":"binary-expr","locations":[{"start":{"line":410,"column":16},"end":{"line":410,"column":32}},{"start":{"line":411,"column":14},"end":{"line":411,"column":34}}]},"63":{"line":412,"type":"if","locations":[{"start":{"line":412,"column":16},"end":{"line":412,"column":16}},{"start":{"line":412,"column":16},"end":{"line":412,"column":16}}]},"64":{"line":418,"type":"if","locations":[{"start":{"line":418,"column":12},"end":{"line":418,"column":12}},{"start":{"line":418,"column":12},"end":{"line":418,"column":12}}]},"65":{"line":418,"type":"binary-expr","locations":[{"start":{"line":418,"column":16},"end":{"line":418,"column":47}},{"start":{"line":419,"column":14},"end":{"line":419,"column":28}},{"start":{"line":420,"column":14},"end":{"line":420,"column":38}}]},"66":{"line":421,"type":"if","locations":[{"start":{"line":421,"column":16},"end":{"line":421,"column":16}},{"start":{"line":421,"column":16},"end":{"line":421,"column":16}}]},"67":{"line":437,"type":"if","locations":[{"start":{"line":437,"column":8},"end":{"line":437,"column":8}},{"start":{"line":437,"column":8},"end":{"line":437,"column":8}}]},"68":{"line":439,"type":"if","locations":[{"start":{"line":439,"column":12},"end":{"line":439,"column":12}},{"start":{"line":439,"column":12},"end":{"line":439,"column":12}}]},"69":{"line":439,"type":"binary-expr","locations":[{"start":{"line":439,"column":16},"end":{"line":439,"column":29}},{"start":{"line":439,"column":33},"end":{"line":439,"column":58}}]},"70":{"line":442,"type":"if","locations":[{"start":{"line":442,"column":15},"end":{"line":442,"column":15}},{"start":{"line":442,"column":15},"end":{"line":442,"column":15}}]},"71":{"line":443,"type":"if","locations":[{"start":{"line":443,"column":12},"end":{"line":443,"column":12}},{"start":{"line":443,"column":12},"end":{"line":443,"column":12}}]},"72":{"line":446,"type":"if","locations":[{"start":{"line":446,"column":15},"end":{"line":446,"column":15}},{"start":{"line":446,"column":15},"end":{"line":446,"column":15}}]},"73":{"line":458,"type":"if","locations":[{"start":{"line":458,"column":8},"end":{"line":458,"column":8}},{"start":{"line":458,"column":8},"end":{"line":458,"column":8}}]},"74":{"line":458,"type":"binary-expr","locations":[{"start":{"line":458,"column":12},"end":{"line":458,"column":23}},{"start":{"line":458,"column":27},"end":{"line":458,"column":37}}]},"75":{"line":462,"type":"if","locations":[{"start":{"line":462,"column":15},"end":{"line":462,"column":15}},{"start":{"line":462,"column":15},"end":{"line":462,"column":15}}]},"76":{"line":462,"type":"binary-expr","locations":[{"start":{"line":462,"column":19},"end":{"line":462,"column":30}},{"start":{"line":462,"column":34},"end":{"line":462,"column":43}}]},"77":{"line":465,"type":"if","locations":[{"start":{"line":465,"column":12},"end":{"line":465,"column":12}},{"start":{"line":465,"column":12},"end":{"line":465,"column":12}}]},"78":{"line":465,"type":"binary-expr","locations":[{"start":{"line":465,"column":16},"end":{"line":465,"column":55}},{"start":{"line":465,"column":59},"end":{"line":465,"column":90}}]}},"code":["module.exports = function (fork) {","    var types = fork.use(require(\"./types\"));","    var n = types.namedTypes;","    var b = types.builders;","    var isNumber = types.builtInTypes.number;","    var isArray = types.builtInTypes.array;","    var Path = fork.use(require(\"./path\"));","    var Scope = fork.use(require(\"./scope\"));","","    function NodePath(value, parentPath, name) {","        if (!(this instanceof NodePath)) {","            throw new Error(\"NodePath constructor cannot be invoked without 'new'\");","        }","        Path.call(this, value, parentPath, name);","    }","","    var NPp = NodePath.prototype = Object.create(Path.prototype, {","        constructor: {","            value: NodePath,","            enumerable: false,","            writable: true,","            configurable: true","        }","    });","","    Object.defineProperties(NPp, {","        node: {","            get: function () {","                Object.defineProperty(this, \"node\", {","                    configurable: true, // Enable deletion.","                    value: this._computeNode()","                });","","                return this.node;","            }","        },","","        parent: {","            get: function () {","                Object.defineProperty(this, \"parent\", {","                    configurable: true, // Enable deletion.","                    value: this._computeParent()","                });","","                return this.parent;","            }","        },","","        scope: {","            get: function () {","                Object.defineProperty(this, \"scope\", {","                    configurable: true, // Enable deletion.","                    value: this._computeScope()","                });","","                return this.scope;","            }","        }","    });","","    NPp.replace = function () {","        delete this.node;","        delete this.parent;","        delete this.scope;","        return Path.prototype.replace.apply(this, arguments);","    };","","    NPp.prune = function () {","        var remainingNodePath = this.parent;","","        this.replace();","","        return cleanUpNodesAfterPrune(remainingNodePath);","    };","","    // The value of the first ancestor Path whose value is a Node.","    NPp._computeNode = function () {","        var value = this.value;","        if (n.Node.check(value)) {","            return value;","        }","","        var pp = this.parentPath;","        return pp && pp.node || null;","    };","","    // The first ancestor Path whose value is a Node distinct from this.node.","    NPp._computeParent = function () {","        var value = this.value;","        var pp = this.parentPath;","","        if (!n.Node.check(value)) {","            while (pp && !n.Node.check(pp.value)) {","                pp = pp.parentPath;","            }","","            if (pp) {","                pp = pp.parentPath;","            }","        }","","        while (pp && !n.Node.check(pp.value)) {","            pp = pp.parentPath;","        }","","        return pp || null;","    };","","    // The closest enclosing scope that governs this node.","    NPp._computeScope = function () {","        var value = this.value;","        var pp = this.parentPath;","        var scope = pp && pp.scope;","","        if (n.Node.check(value) &&","          Scope.isEstablishedBy(value)) {","            scope = new Scope(this, scope);","        }","","        return scope || null;","    };","","    NPp.getValueProperty = function (name) {","        return types.getFieldValue(this.value, name);","    };","","    /**","     * Determine whether this.node needs to be wrapped in parentheses in order","     * for a parser to reproduce the same local AST structure.","     *","     * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression","     * whose operator is \"+\" needs parentheses, because `1 + 2 * 3` would","     * parse differently.","     *","     * If assumeExpressionContext === true, we don't worry about edge cases","     * like an anonymous FunctionExpression appearing lexically first in its","     * enclosing statement and thus needing parentheses to avoid being parsed","     * as a FunctionDeclaration with a missing name.","     */","    NPp.needsParens = function (assumeExpressionContext) {","        var pp = this.parentPath;","        if (!pp) {","            return false;","        }","","        var node = this.value;","","        // Only expressions need parentheses.","        if (!n.Expression.check(node)) {","            return false;","        }","","        // Identifiers never need parentheses.","        if (node.type === \"Identifier\") {","            return false;","        }","","        while (!n.Node.check(pp.value)) {","            pp = pp.parentPath;","            if (!pp) {","                return false;","            }","        }","","        var parent = pp.value;","","        switch (node.type) {","            case \"UnaryExpression\":","            case \"SpreadElement\":","            case \"SpreadProperty\":","                return parent.type === \"MemberExpression\"","                  && this.name === \"object\"","                  && parent.object === node;","","            case \"BinaryExpression\":","            case \"LogicalExpression\":","                switch (parent.type) {","                    case \"CallExpression\":","                        return this.name === \"callee\"","                          && parent.callee === node;","","                    case \"UnaryExpression\":","                    case \"SpreadElement\":","                    case \"SpreadProperty\":","                        return true;","","                    case \"MemberExpression\":","                        return this.name === \"object\"","                          && parent.object === node;","","                    case \"BinaryExpression\":","                    case \"LogicalExpression\":","                        var po = parent.operator;","                        var pp = PRECEDENCE[po];","                        var no = node.operator;","                        var np = PRECEDENCE[no];","","                        if (pp > np) {","                            return true;","                        }","","                        if (pp === np && this.name === \"right\") {","                            if (parent.right !== node) {","                                throw new Error(\"Nodes must be equal\");","                            }","                            return true;","                        }","","                    default:","                        return false;","                }","","            case \"SequenceExpression\":","                switch (parent.type) {","                    case \"ForStatement\":","                        // Although parentheses wouldn't hurt around sequence","                        // expressions in the head of for loops, traditional style","                        // dictates that e.g. i++, j++ should not be wrapped with","                        // parentheses.","                        return false;","","                    case \"ExpressionStatement\":","                        return this.name !== \"expression\";","","                    default:","                        // Otherwise err on the side of overparenthesization, adding","                        // explicit exceptions above if this proves overzealous.","                        return true;","                }","","            case \"YieldExpression\":","                switch (parent.type) {","                    case \"BinaryExpression\":","                    case \"LogicalExpression\":","                    case \"UnaryExpression\":","                    case \"SpreadElement\":","                    case \"SpreadProperty\":","                    case \"CallExpression\":","                    case \"MemberExpression\":","                    case \"NewExpression\":","                    case \"ConditionalExpression\":","                    case \"YieldExpression\":","                        return true;","","                    default:","                        return false;","                }","","            case \"Literal\":","                return parent.type === \"MemberExpression\"","                  && isNumber.check(node.value)","                  && this.name === \"object\"","                  && parent.object === node;","","            case \"AssignmentExpression\":","            case \"ConditionalExpression\":","                switch (parent.type) {","                    case \"UnaryExpression\":","                    case \"SpreadElement\":","                    case \"SpreadProperty\":","                    case \"BinaryExpression\":","                    case \"LogicalExpression\":","                        return true;","","                    case \"CallExpression\":","                        return this.name === \"callee\"","                          && parent.callee === node;","","                    case \"ConditionalExpression\":","                        return this.name === \"test\"","                          && parent.test === node;","","                    case \"MemberExpression\":","                        return this.name === \"object\"","                          && parent.object === node;","","                    default:","                        return false;","                }","","            default:","                if (parent.type === \"NewExpression\" &&","                  this.name === \"callee\" &&","                  parent.callee === node) {","                    return containsCallExpression(node);","                }","        }","","        if (assumeExpressionContext !== true &&","          !this.canBeFirstInStatement() &&","          this.firstInStatement())","            return true;","","        return false;","    };","","    function isBinary(node) {","        return n.BinaryExpression.check(node)","          || n.LogicalExpression.check(node);","    }","","    function isUnaryLike(node) {","        return n.UnaryExpression.check(node)","          // I considered making SpreadElement and SpreadProperty subtypes","          // of UnaryExpression, but they're not really Expression nodes.","          || (n.SpreadElement && n.SpreadElement.check(node))","          || (n.SpreadProperty && n.SpreadProperty.check(node));","    }","","    var PRECEDENCE = {};","    [[\"||\"],","        [\"&&\"],","        [\"|\"],","        [\"^\"],","        [\"&\"],","        [\"==\", \"===\", \"!=\", \"!==\"],","        [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],","        [\">>\", \"<<\", \">>>\"],","        [\"+\", \"-\"],","        [\"*\", \"/\", \"%\"]","    ].forEach(function (tier, i) {","        tier.forEach(function (op) {","            PRECEDENCE[op] = i;","        });","    });","","    function containsCallExpression(node) {","        if (n.CallExpression.check(node)) {","            return true;","        }","","        if (isArray.check(node)) {","            return node.some(containsCallExpression);","        }","","        if (n.Node.check(node)) {","            return types.someField(node, function (name, child) {","                return containsCallExpression(child);","            });","        }","","        return false;","    }","","    NPp.canBeFirstInStatement = function () {","        var node = this.node;","        return !n.FunctionExpression.check(node)","          && !n.ObjectExpression.check(node);","    };","","    NPp.firstInStatement = function () {","        return firstInStatement(this);","    };","","    function firstInStatement(path) {","        for (var node, parent; path.parent; path = path.parent) {","            node = path.node;","            parent = path.parent.node;","","            if (n.BlockStatement.check(parent) &&","              path.parent.name === \"body\" &&","              path.name === 0) {","                if (parent.body[0] !== node) {","                    throw new Error(\"Nodes must be equal\");","                }","                return true;","            }","","            if (n.ExpressionStatement.check(parent) &&","              path.name === \"expression\") {","                if (parent.expression !== node) {","                    throw new Error(\"Nodes must be equal\");","                }","                return true;","            }","","            if (n.SequenceExpression.check(parent) &&","              path.parent.name === \"expressions\" &&","              path.name === 0) {","                if (parent.expressions[0] !== node) {","                    throw new Error(\"Nodes must be equal\");","                }","                continue;","            }","","            if (n.CallExpression.check(parent) &&","              path.name === \"callee\") {","                if (parent.callee !== node) {","                    throw new Error(\"Nodes must be equal\");","                }","                continue;","            }","","            if (n.MemberExpression.check(parent) &&","              path.name === \"object\") {","                if (parent.object !== node) {","                    throw new Error(\"Nodes must be equal\");","                }","                continue;","            }","","            if (n.ConditionalExpression.check(parent) &&","              path.name === \"test\") {","                if (parent.test !== node) {","                    throw new Error(\"Nodes must be equal\");","                }","                continue;","            }","","            if (isBinary(parent) &&","              path.name === \"left\") {","                if (parent.left !== node) {","                    throw new Error(\"Nodes must be equal\");","                }","                continue;","            }","","            if (n.UnaryExpression.check(parent) &&","              !parent.prefix &&","              path.name === \"argument\") {","                if (parent.argument !== node) {","                    throw new Error(\"Nodes must be equal\");","                }","                continue;","            }","","            return false;","        }","","        return true;","    }","","    /**","     * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.","     */","    function cleanUpNodesAfterPrune(remainingNodePath) {","        if (n.VariableDeclaration.check(remainingNodePath.node)) {","            var declarations = remainingNodePath.get('declarations').value;","            if (!declarations || declarations.length === 0) {","                return remainingNodePath.prune();","            }","        } else if (n.ExpressionStatement.check(remainingNodePath.node)) {","            if (!remainingNodePath.get('expression').value) {","                return remainingNodePath.prune();","            }","        } else if (n.IfStatement.check(remainingNodePath.node)) {","            cleanUpIfStatementAfterPrune(remainingNodePath);","        }","","        return remainingNodePath;","    }","","    function cleanUpIfStatementAfterPrune(ifStatement) {","        var testExpression = ifStatement.get('test').value;","        var alternate = ifStatement.get('alternate').value;","        var consequent = ifStatement.get('consequent').value;","","        if (!consequent && !alternate) {","            var testExpressionStatement = b.expressionStatement(testExpression);","","            ifStatement.replace(testExpressionStatement);","        } else if (!consequent && alternate) {","            var negatedTestExpression = b.unaryExpression('!', testExpression, true);","","            if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {","                negatedTestExpression = testExpression.argument;","            }","","            ifStatement.get(\"test\").replace(negatedTestExpression);","            ifStatement.get(\"consequent\").replace(alternate);","            ifStatement.get(\"alternate\").replace();","        }","    }","","    return NodePath;","};",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"11":0,"12":0,"14":0,"17":1,"26":1,"29":0,"34":0,"40":0,"45":0,"51":0,"56":0,"61":1,"62":0,"63":0,"64":0,"65":0,"68":1,"69":0,"71":0,"73":0,"77":1,"78":0,"79":0,"80":0,"83":0,"84":0,"88":1,"89":0,"90":0,"92":0,"93":0,"94":0,"97":0,"98":0,"102":0,"103":0,"106":0,"110":1,"111":0,"112":0,"113":0,"115":0,"117":0,"120":0,"123":1,"124":0,"140":1,"141":0,"142":0,"143":0,"146":0,"149":0,"150":0,"154":0,"155":0,"158":0,"159":0,"160":0,"161":0,"165":0,"167":0,"171":0,"177":0,"179":0,"185":0,"188":0,"193":0,"194":0,"195":0,"196":0,"198":0,"199":0,"202":0,"203":0,"204":0,"206":0,"210":0,"214":0,"220":0,"223":0,"228":0,"232":0,"243":0,"246":0,"250":0,"257":0,"263":0,"266":0,"270":0,"274":0,"278":0,"282":0,"285":0,"289":0,"292":0,"294":0,"297":1,"298":0,"302":1,"303":0,"310":1,"311":1,"322":10,"323":23,"327":1,"328":0,"329":0,"332":0,"333":0,"336":0,"337":0,"338":0,"342":0,"345":1,"346":0,"347":0,"351":1,"352":0,"355":1,"356":0,"357":0,"358":0,"360":0,"363":0,"364":0,"366":0,"369":0,"371":0,"372":0,"374":0,"377":0,"380":0,"381":0,"383":0,"386":0,"388":0,"389":0,"391":0,"394":0,"396":0,"397":0,"399":0,"402":0,"404":0,"405":0,"407":0,"410":0,"412":0,"413":0,"415":0,"418":0,"421":0,"422":0,"424":0,"427":0,"430":0,"436":1,"437":0,"438":0,"439":0,"440":0,"442":0,"443":0,"444":0,"446":0,"447":0,"450":0,"453":1,"454":0,"455":0,"456":0,"458":0,"459":0,"461":0,"462":0,"463":0,"465":0,"466":0,"469":0,"470":0,"471":0,"475":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/scope.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/scope.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1,"27":0,"28":1,"29":1,"30":1,"31":0,"32":0,"33":1,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":0,"64":1,"65":0,"66":0,"67":1,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":1,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":1,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":1,"154":0,"155":0,"156":0,"157":0,"158":1,"159":0,"160":0,"161":0,"162":0,"163":1,"164":0,"165":0,"166":0,"167":0,"168":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0,0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"fnMap":{"1":{"name":"(anonymous_1)","line":3,"loc":{"start":{"line":3,"column":17},"end":{"line":3,"column":33}}},"2":{"name":"Scope","line":12,"loc":{"start":{"line":12,"column":4},"end":{"line":12,"column":38}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":28},"end":{"line":59,"column":43}}},"4":{"name":"(anonymous_4)","line":68,"loc":{"start":{"line":68,"column":18},"end":{"line":68,"column":33}}},"5":{"name":"(anonymous_5)","line":73,"loc":{"start":{"line":73,"column":22},"end":{"line":73,"column":37}}},"6":{"name":"(anonymous_6)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":43}}},"7":{"name":"(anonymous_7)","line":102,"loc":{"start":{"line":102,"column":25},"end":{"line":102,"column":52}}},"8":{"name":"(anonymous_8)","line":120,"loc":{"start":{"line":120,"column":14},"end":{"line":120,"column":30}}},"9":{"name":"(anonymous_9)","line":131,"loc":{"start":{"line":131,"column":21},"end":{"line":131,"column":33}}},"10":{"name":"(anonymous_10)","line":136,"loc":{"start":{"line":136,"column":18},"end":{"line":136,"column":30}}},"11":{"name":"scanScope","line":141,"loc":{"start":{"line":141,"column":4},"end":{"line":141,"column":51}}},"12":{"name":"recursiveScanScope","line":156,"loc":{"start":{"line":156,"column":4},"end":{"line":156,"column":60}}},"13":{"name":"(anonymous_13)","line":169,"loc":{"start":{"line":169,"column":22},"end":{"line":169,"column":42}}},"14":{"name":"(anonymous_14)","line":174,"loc":{"start":{"line":174,"column":36},"end":{"line":174,"column":56}}},"15":{"name":"(anonymous_15)","line":201,"loc":{"start":{"line":201,"column":34},"end":{"line":201,"column":56}}},"16":{"name":"pathHasValue","line":211,"loc":{"start":{"line":211,"column":4},"end":{"line":211,"column":39}}},"17":{"name":"recursiveScanChild","line":228,"loc":{"start":{"line":228,"column":4},"end":{"line":228,"column":60}}},"18":{"name":"addPattern","line":266,"loc":{"start":{"line":266,"column":4},"end":{"line":266,"column":47}}},"19":{"name":"(anonymous_19)","line":279,"loc":{"start":{"line":279,"column":47},"end":{"line":279,"column":70}}},"20":{"name":"(anonymous_20)","line":293,"loc":{"start":{"line":293,"column":45},"end":{"line":293,"column":67}}},"21":{"name":"addTypePattern","line":315,"loc":{"start":{"line":315,"column":4},"end":{"line":315,"column":48}}},"22":{"name":"(anonymous_22)","line":329,"loc":{"start":{"line":329,"column":16},"end":{"line":329,"column":31}}},"23":{"name":"(anonymous_23)","line":336,"loc":{"start":{"line":336,"column":20},"end":{"line":336,"column":35}}},"24":{"name":"(anonymous_24)","line":343,"loc":{"start":{"line":343,"column":24},"end":{"line":343,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":45}},"2":{"start":{"line":3,"column":0},"end":{"line":351,"column":2}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":45}},"4":{"start":{"line":5,"column":4},"end":{"line":5,"column":26}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":38}},"6":{"start":{"line":7,"column":4},"end":{"line":7,"column":31}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":43}},"8":{"start":{"line":9,"column":4},"end":{"line":9,"column":43}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":27}},"10":{"start":{"line":12,"column":4},"end":{"line":42,"column":5}},"11":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"12":{"start":{"line":14,"column":12},"end":{"line":14,"column":81}},"13":{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},"14":{"start":{"line":17,"column":12},"end":{"line":17,"column":32}},"15":{"start":{"line":19,"column":8},"end":{"line":19,"column":37}},"16":{"start":{"line":21,"column":8},"end":{"line":21,"column":18}},"17":{"start":{"line":23,"column":8},"end":{"line":31,"column":9}},"18":{"start":{"line":24,"column":12},"end":{"line":26,"column":13}},"19":{"start":{"line":25,"column":16},"end":{"line":25,"column":36}},"20":{"start":{"line":27,"column":12},"end":{"line":27,"column":42}},"21":{"start":{"line":29,"column":12},"end":{"line":29,"column":31}},"22":{"start":{"line":30,"column":12},"end":{"line":30,"column":22}},"23":{"start":{"line":33,"column":8},"end":{"line":41,"column":11}},"24":{"start":{"line":44,"column":4},"end":{"line":55,"column":6}},"25":{"start":{"line":57,"column":4},"end":{"line":57,"column":52}},"26":{"start":{"line":59,"column":4},"end":{"line":61,"column":6}},"27":{"start":{"line":60,"column":8},"end":{"line":60,"column":37}},"28":{"start":{"line":63,"column":4},"end":{"line":63,"column":29}},"29":{"start":{"line":66,"column":4},"end":{"line":66,"column":23}},"30":{"start":{"line":68,"column":4},"end":{"line":71,"column":6}},"31":{"start":{"line":69,"column":8},"end":{"line":69,"column":20}},"32":{"start":{"line":70,"column":8},"end":{"line":70,"column":48}},"33":{"start":{"line":73,"column":4},"end":{"line":76,"column":6}},"34":{"start":{"line":74,"column":8},"end":{"line":74,"column":20}},"35":{"start":{"line":75,"column":8},"end":{"line":75,"column":45}},"36":{"start":{"line":78,"column":4},"end":{"line":100,"column":6}},"37":{"start":{"line":79,"column":8},"end":{"line":85,"column":9}},"38":{"start":{"line":80,"column":12},"end":{"line":82,"column":13}},"39":{"start":{"line":81,"column":16},"end":{"line":81,"column":36}},"40":{"start":{"line":84,"column":12},"end":{"line":84,"column":26}},"41":{"start":{"line":89,"column":8},"end":{"line":89,"column":48}},"42":{"start":{"line":91,"column":8},"end":{"line":91,"column":20}},"43":{"start":{"line":93,"column":8},"end":{"line":93,"column":22}},"44":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"45":{"start":{"line":95,"column":12},"end":{"line":95,"column":20}},"46":{"start":{"line":98,"column":8},"end":{"line":98,"column":34}},"47":{"start":{"line":99,"column":8},"end":{"line":99,"column":69}},"48":{"start":{"line":102,"column":4},"end":{"line":118,"column":6}},"49":{"start":{"line":103,"column":8},"end":{"line":103,"column":61}},"50":{"start":{"line":105,"column":8},"end":{"line":105,"column":45}},"51":{"start":{"line":106,"column":8},"end":{"line":108,"column":9}},"52":{"start":{"line":107,"column":12},"end":{"line":107,"column":44}},"53":{"start":{"line":110,"column":8},"end":{"line":115,"column":10}},"54":{"start":{"line":117,"column":8},"end":{"line":117,"column":26}},"55":{"start":{"line":120,"column":4},"end":{"line":129,"column":6}},"56":{"start":{"line":121,"column":8},"end":{"line":128,"column":9}},"57":{"start":{"line":122,"column":12},"end":{"line":125,"column":13}},"58":{"start":{"line":124,"column":16},"end":{"line":124,"column":43}},"59":{"start":{"line":126,"column":12},"end":{"line":126,"column":60}},"60":{"start":{"line":127,"column":12},"end":{"line":127,"column":32}},"61":{"start":{"line":131,"column":4},"end":{"line":134,"column":6}},"62":{"start":{"line":132,"column":8},"end":{"line":132,"column":20}},"63":{"start":{"line":133,"column":8},"end":{"line":133,"column":29}},"64":{"start":{"line":136,"column":4},"end":{"line":139,"column":6}},"65":{"start":{"line":137,"column":8},"end":{"line":137,"column":20}},"66":{"start":{"line":138,"column":8},"end":{"line":138,"column":26}},"67":{"start":{"line":141,"column":4},"end":{"line":154,"column":5}},"68":{"start":{"line":142,"column":8},"end":{"line":142,"column":30}},"69":{"start":{"line":143,"column":8},"end":{"line":143,"column":31}},"70":{"start":{"line":145,"column":8},"end":{"line":153,"column":9}},"71":{"start":{"line":149,"column":12},"end":{"line":149,"column":52}},"72":{"start":{"line":152,"column":12},"end":{"line":152,"column":59}},"73":{"start":{"line":156,"column":4},"end":{"line":209,"column":5}},"74":{"start":{"line":157,"column":8},"end":{"line":157,"column":30}},"75":{"start":{"line":159,"column":8},"end":{"line":163,"column":9}},"76":{"start":{"line":162,"column":12},"end":{"line":162,"column":56}},"77":{"start":{"line":165,"column":8},"end":{"line":208,"column":9}},"78":{"start":{"line":168,"column":15},"end":{"line":208,"column":9}},"79":{"start":{"line":169,"column":12},"end":{"line":171,"column":15}},"80":{"start":{"line":170,"column":16},"end":{"line":170,"column":68}},"81":{"start":{"line":173,"column":15},"end":{"line":208,"column":9}},"82":{"start":{"line":174,"column":12},"end":{"line":176,"column":15}},"83":{"start":{"line":175,"column":16},"end":{"line":175,"column":48}},"84":{"start":{"line":178,"column":12},"end":{"line":178,"column":71}},"85":{"start":{"line":180,"column":15},"end":{"line":208,"column":9}},"86":{"start":{"line":181,"column":12},"end":{"line":181,"column":55}},"87":{"start":{"line":183,"column":15},"end":{"line":208,"column":9}},"88":{"start":{"line":184,"column":12},"end":{"line":184,"column":49}},"89":{"start":{"line":185,"column":12},"end":{"line":185,"column":71}},"90":{"start":{"line":187,"column":15},"end":{"line":208,"column":9}},"91":{"start":{"line":190,"column":12},"end":{"line":198,"column":14}},"92":{"start":{"line":200,"column":15},"end":{"line":208,"column":9}},"93":{"start":{"line":201,"column":12},"end":{"line":207,"column":15}},"94":{"start":{"line":202,"column":16},"end":{"line":202,"column":47}},"95":{"start":{"line":203,"column":16},"end":{"line":205,"column":17}},"96":{"start":{"line":204,"column":20},"end":{"line":204,"column":40}},"97":{"start":{"line":206,"column":16},"end":{"line":206,"column":68}},"98":{"start":{"line":211,"column":4},"end":{"line":226,"column":5}},"99":{"start":{"line":212,"column":8},"end":{"line":214,"column":9}},"100":{"start":{"line":213,"column":12},"end":{"line":213,"column":24}},"101":{"start":{"line":218,"column":8},"end":{"line":223,"column":9}},"102":{"start":{"line":222,"column":12},"end":{"line":222,"column":24}},"103":{"start":{"line":225,"column":8},"end":{"line":225,"column":21}},"104":{"start":{"line":228,"column":4},"end":{"line":264,"column":5}},"105":{"start":{"line":229,"column":8},"end":{"line":229,"column":30}},"106":{"start":{"line":231,"column":8},"end":{"line":263,"column":9}},"107":{"start":{"line":234,"column":15},"end":{"line":263,"column":9}},"108":{"start":{"line":236,"column":12},"end":{"line":236,"column":49}},"109":{"start":{"line":238,"column":15},"end":{"line":263,"column":9}},"110":{"start":{"line":240,"column":12},"end":{"line":240,"column":49}},"111":{"start":{"line":242,"column":15},"end":{"line":263,"column":9}},"112":{"start":{"line":243,"column":12},"end":{"line":259,"column":13}},"113":{"start":{"line":244,"column":16},"end":{"line":244,"column":53}},"114":{"start":{"line":245,"column":16},"end":{"line":245,"column":71}},"115":{"start":{"line":250,"column":16},"end":{"line":250,"column":75}},"116":{"start":{"line":256,"column":16},"end":{"line":258,"column":17}},"117":{"start":{"line":257,"column":20},"end":{"line":257,"column":52}},"118":{"start":{"line":262,"column":12},"end":{"line":262,"column":59}},"119":{"start":{"line":266,"column":4},"end":{"line":313,"column":5}},"120":{"start":{"line":267,"column":8},"end":{"line":267,"column":40}},"121":{"start":{"line":268,"column":8},"end":{"line":268,"column":43}},"122":{"start":{"line":270,"column":8},"end":{"line":312,"column":9}},"123":{"start":{"line":271,"column":12},"end":{"line":275,"column":13}},"124":{"start":{"line":272,"column":16},"end":{"line":272,"column":57}},"125":{"start":{"line":274,"column":16},"end":{"line":274,"column":55}},"126":{"start":{"line":277,"column":15},"end":{"line":312,"column":9}},"127":{"start":{"line":279,"column":12},"end":{"line":289,"column":15}},"128":{"start":{"line":280,"column":16},"end":{"line":280,"column":50}},"129":{"start":{"line":281,"column":16},"end":{"line":288,"column":17}},"130":{"start":{"line":282,"column":20},"end":{"line":282,"column":55}},"131":{"start":{"line":283,"column":24},"end":{"line":288,"column":17}},"132":{"start":{"line":284,"column":20},"end":{"line":284,"column":68}},"133":{"start":{"line":285,"column":23},"end":{"line":288,"column":17}},"134":{"start":{"line":287,"column":20},"end":{"line":287,"column":71}},"135":{"start":{"line":291,"column":15},"end":{"line":312,"column":9}},"136":{"start":{"line":293,"column":12},"end":{"line":301,"column":15}},"137":{"start":{"line":294,"column":16},"end":{"line":294,"column":48}},"138":{"start":{"line":295,"column":16},"end":{"line":300,"column":17}},"139":{"start":{"line":296,"column":20},"end":{"line":296,"column":54}},"140":{"start":{"line":297,"column":23},"end":{"line":300,"column":17}},"141":{"start":{"line":299,"column":20},"end":{"line":299,"column":70}},"142":{"start":{"line":303,"column":15},"end":{"line":312,"column":9}},"143":{"start":{"line":305,"column":12},"end":{"line":305,"column":61}},"144":{"start":{"line":307,"column":15},"end":{"line":312,"column":9}},"145":{"start":{"line":311,"column":12},"end":{"line":311,"column":62}},"146":{"start":{"line":315,"column":4},"end":{"line":327,"column":5}},"147":{"start":{"line":316,"column":8},"end":{"line":316,"column":40}},"148":{"start":{"line":317,"column":8},"end":{"line":317,"column":43}},"149":{"start":{"line":319,"column":8},"end":{"line":326,"column":9}},"150":{"start":{"line":320,"column":12},"end":{"line":324,"column":13}},"151":{"start":{"line":321,"column":16},"end":{"line":321,"column":54}},"152":{"start":{"line":323,"column":16},"end":{"line":323,"column":52}},"153":{"start":{"line":329,"column":4},"end":{"line":334,"column":6}},"154":{"start":{"line":330,"column":8},"end":{"line":332,"column":22}},"155":{"start":{"line":331,"column":12},"end":{"line":332,"column":22}},"156":{"start":{"line":332,"column":16},"end":{"line":332,"column":22}},"157":{"start":{"line":333,"column":8},"end":{"line":333,"column":21}},"158":{"start":{"line":336,"column":4},"end":{"line":341,"column":6}},"159":{"start":{"line":337,"column":8},"end":{"line":339,"column":22}},"160":{"start":{"line":338,"column":12},"end":{"line":339,"column":22}},"161":{"start":{"line":339,"column":16},"end":{"line":339,"column":22}},"162":{"start":{"line":340,"column":8},"end":{"line":340,"column":21}},"163":{"start":{"line":343,"column":4},"end":{"line":348,"column":6}},"164":{"start":{"line":344,"column":8},"end":{"line":344,"column":25}},"165":{"start":{"line":345,"column":8},"end":{"line":346,"column":33}},"166":{"start":{"line":346,"column":12},"end":{"line":346,"column":33}},"167":{"start":{"line":347,"column":8},"end":{"line":347,"column":21}},"168":{"start":{"line":350,"column":4},"end":{"line":350,"column":17}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":13,"column":8}},{"start":{"line":13,"column":8},"end":{"line":13,"column":8}}]},"2":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":16,"column":8}},{"start":{"line":16,"column":8},"end":{"line":16,"column":8}}]},"3":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]},"4":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":12},"end":{"line":24,"column":12}},{"start":{"line":24,"column":12},"end":{"line":24,"column":12}}]},"5":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]},"6":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":12},"end":{"line":80,"column":12}},{"start":{"line":80,"column":12},"end":{"line":80,"column":12}}]},"7":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":8},"end":{"line":103,"column":18}},{"start":{"line":103,"column":23},"end":{"line":103,"column":59}}]},"8":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":8}},{"start":{"line":106,"column":8},"end":{"line":106,"column":8}}]},"9":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":46},"end":{"line":113,"column":50}},{"start":{"line":113,"column":54},"end":{"line":113,"column":58}}]},"10":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":8}},{"start":{"line":121,"column":8},"end":{"line":121,"column":8}}]},"11":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":12},"end":{"line":121,"column":17}},{"start":{"line":121,"column":21},"end":{"line":121,"column":34}}]},"12":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":8},"end":{"line":145,"column":8}},{"start":{"line":145,"column":8},"end":{"line":145,"column":8}}]},"13":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":8},"end":{"line":159,"column":8}},{"start":{"line":159,"column":8},"end":{"line":159,"column":8}}]},"14":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":12},"end":{"line":159,"column":23}},{"start":{"line":160,"column":10},"end":{"line":160,"column":63}},{"start":{"line":161,"column":10},"end":{"line":161,"column":29}}]},"15":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":8},"end":{"line":165,"column":8}},{"start":{"line":165,"column":8},"end":{"line":165,"column":8}}]},"16":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":15},"end":{"line":168,"column":15}},{"start":{"line":168,"column":15},"end":{"line":168,"column":15}}]},"17":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":15},"end":{"line":173,"column":15}},{"start":{"line":173,"column":15},"end":{"line":173,"column":15}}]},"18":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":15},"end":{"line":180,"column":15}},{"start":{"line":180,"column":15},"end":{"line":180,"column":15}}]},"19":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":19},"end":{"line":180,"column":39}},{"start":{"line":180,"column":43},"end":{"line":180,"column":75}}]},"20":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":15},"end":{"line":183,"column":15}},{"start":{"line":183,"column":15},"end":{"line":183,"column":15}}]},"21":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":15},"end":{"line":187,"column":15}},{"start":{"line":187,"column":15},"end":{"line":187,"column":15}}]},"22":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":19},"end":{"line":187,"column":50}},{"start":{"line":188,"column":10},"end":{"line":188,"column":50}},{"start":{"line":189,"column":10},"end":{"line":189,"column":48}}]},"23":{"line":195,"type":"cond-expr","locations":[{"start":{"line":195,"column":36},"end":{"line":195,"column":43}},{"start":{"line":196,"column":16},"end":{"line":196,"column":41}}]},"24":{"line":196,"type":"cond-expr","locations":[{"start":{"line":196,"column":28},"end":{"line":196,"column":34}},{"start":{"line":196,"column":37},"end":{"line":196,"column":41}}]},"25":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":15},"end":{"line":200,"column":15}},{"start":{"line":200,"column":15},"end":{"line":200,"column":15}}]},"26":{"line":200,"type":"binary-expr","locations":[{"start":{"line":200,"column":19},"end":{"line":200,"column":35}},{"start":{"line":200,"column":39},"end":{"line":200,"column":62}}]},"27":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":16},"end":{"line":203,"column":16}},{"start":{"line":203,"column":16},"end":{"line":203,"column":16}}]},"28":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":8},"end":{"line":212,"column":8}},{"start":{"line":212,"column":8},"end":{"line":212,"column":8}}]},"29":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":8},"end":{"line":218,"column":8}},{"start":{"line":218,"column":8},"end":{"line":218,"column":8}}]},"30":{"line":218,"type":"binary-expr","locations":[{"start":{"line":218,"column":12},"end":{"line":218,"column":37}},{"start":{"line":219,"column":10},"end":{"line":219,"column":33}},{"start":{"line":220,"column":10},"end":{"line":220,"column":30}},{"start":{"line":221,"column":10},"end":{"line":221,"column":28}}]},"31":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":8},"end":{"line":231,"column":8}},{"start":{"line":231,"column":8},"end":{"line":231,"column":8}}]},"32":{"line":231,"type":"binary-expr","locations":[{"start":{"line":231,"column":12},"end":{"line":231,"column":17}},{"start":{"line":231,"column":21},"end":{"line":231,"column":43}}]},"33":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":15},"end":{"line":234,"column":15}},{"start":{"line":234,"column":15},"end":{"line":234,"column":15}}]},"34":{"line":234,"type":"binary-expr","locations":[{"start":{"line":234,"column":19},"end":{"line":234,"column":61}},{"start":{"line":235,"column":19},"end":{"line":235,"column":35}}]},"35":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":15},"end":{"line":238,"column":15}},{"start":{"line":238,"column":15},"end":{"line":238,"column":15}}]},"36":{"line":238,"type":"binary-expr","locations":[{"start":{"line":238,"column":19},"end":{"line":238,"column":46}},{"start":{"line":239,"column":10},"end":{"line":239,"column":49}}]},"37":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":15},"end":{"line":242,"column":15}},{"start":{"line":242,"column":15},"end":{"line":242,"column":15}}]},"38":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":12},"end":{"line":243,"column":12}},{"start":{"line":243,"column":12},"end":{"line":243,"column":12}}]},"39":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":16},"end":{"line":256,"column":16}},{"start":{"line":256,"column":16},"end":{"line":256,"column":16}}]},"40":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":8},"end":{"line":270,"column":8}},{"start":{"line":270,"column":8},"end":{"line":270,"column":8}}]},"41":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":12},"end":{"line":271,"column":12}},{"start":{"line":271,"column":12},"end":{"line":271,"column":12}}]},"42":{"line":277,"type":"if","locations":[{"start":{"line":277,"column":15},"end":{"line":277,"column":15}},{"start":{"line":277,"column":15},"end":{"line":277,"column":15}}]},"43":{"line":277,"type":"binary-expr","locations":[{"start":{"line":277,"column":19},"end":{"line":277,"column":43}},{"start":{"line":278,"column":10},"end":{"line":278,"column":49}}]},"44":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":16},"end":{"line":281,"column":16}},{"start":{"line":281,"column":16},"end":{"line":281,"column":16}}]},"45":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":24},"end":{"line":283,"column":24}},{"start":{"line":283,"column":24},"end":{"line":283,"column":24}}]},"46":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":23},"end":{"line":285,"column":23}},{"start":{"line":285,"column":23},"end":{"line":285,"column":23}}]},"47":{"line":285,"type":"binary-expr","locations":[{"start":{"line":285,"column":27},"end":{"line":285,"column":52}},{"start":{"line":286,"column":18},"end":{"line":286,"column":59}}]},"48":{"line":291,"type":"if","locations":[{"start":{"line":291,"column":15},"end":{"line":291,"column":15}},{"start":{"line":291,"column":15},"end":{"line":291,"column":15}}]},"49":{"line":291,"type":"binary-expr","locations":[{"start":{"line":291,"column":19},"end":{"line":291,"column":42}},{"start":{"line":292,"column":10},"end":{"line":292,"column":48}}]},"50":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":16},"end":{"line":295,"column":16}},{"start":{"line":295,"column":16},"end":{"line":295,"column":16}}]},"51":{"line":297,"type":"if","locations":[{"start":{"line":297,"column":23},"end":{"line":297,"column":23}},{"start":{"line":297,"column":23},"end":{"line":297,"column":23}}]},"52":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":27},"end":{"line":297,"column":51}},{"start":{"line":298,"column":18},"end":{"line":298,"column":57}}]},"53":{"line":303,"type":"if","locations":[{"start":{"line":303,"column":15},"end":{"line":303,"column":15}},{"start":{"line":303,"column":15},"end":{"line":303,"column":15}}]},"54":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":19},"end":{"line":303,"column":45}},{"start":{"line":304,"column":10},"end":{"line":304,"column":51}}]},"55":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":15},"end":{"line":307,"column":15}},{"start":{"line":307,"column":15},"end":{"line":307,"column":15}}]},"56":{"line":307,"type":"binary-expr","locations":[{"start":{"line":307,"column":20},"end":{"line":307,"column":51}},{"start":{"line":308,"column":10},"end":{"line":308,"column":56}},{"start":{"line":309,"column":11},"end":{"line":309,"column":43}},{"start":{"line":310,"column":10},"end":{"line":310,"column":57}}]},"57":{"line":319,"type":"if","locations":[{"start":{"line":319,"column":8},"end":{"line":319,"column":8}},{"start":{"line":319,"column":8},"end":{"line":319,"column":8}}]},"58":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":12},"end":{"line":320,"column":12}},{"start":{"line":320,"column":12},"end":{"line":320,"column":12}}]},"59":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":12},"end":{"line":331,"column":12}},{"start":{"line":331,"column":12},"end":{"line":331,"column":12}}]},"60":{"line":338,"type":"if","locations":[{"start":{"line":338,"column":12},"end":{"line":338,"column":12}},{"start":{"line":338,"column":12},"end":{"line":338,"column":12}}]}},"code":["var hasOwn = Object.prototype.hasOwnProperty;","","module.exports = function (fork) {","    var types = fork.use(require(\"./types\"));","    var Type = types.Type;","    var namedTypes = types.namedTypes;","    var Node = namedTypes.Node;","    var Expression = namedTypes.Expression;","    var isArray = types.builtInTypes.array;","    var b = types.builders;","","    function Scope(path, parentScope) {","        if (!(this instanceof Scope)) {","            throw new Error(\"Scope constructor cannot be invoked without 'new'\");","        }","        if (!(path instanceof fork.use(require(\"./node-path\")))) {","            throw new Error(\"\");","        }","        ScopeType.assert(path.value);","","        var depth;","","        if (parentScope) {","            if (!(parentScope instanceof Scope)) {","                throw new Error(\"\");","            }","            depth = parentScope.depth + 1;","        } else {","            parentScope = null;","            depth = 0;","        }","","        Object.defineProperties(this, {","            path: { value: path },","            node: { value: path.value },","            isGlobal: { value: !parentScope, enumerable: true },","            depth: { value: depth },","            parent: { value: parentScope },","            bindings: { value: {} },","            types: { value: {} },","        });","    }","","    var scopeTypes = [","        // Program nodes introduce global scopes.","        namedTypes.Program,","","        // Function is the supertype of FunctionExpression,","        // FunctionDeclaration, ArrowExpression, etc.","        namedTypes.Function,","","        // In case you didn't know, the caught parameter shadows any variable","        // of the same name in an outer scope.","        namedTypes.CatchClause","    ];","","    var ScopeType = Type.or.apply(Type, scopeTypes);","","    Scope.isEstablishedBy = function(node) {","        return ScopeType.check(node);","    };","","    var Sp = Scope.prototype;","","// Will be overridden after an instance lazily calls scanScope.","    Sp.didScan = false;","","    Sp.declares = function(name) {","        this.scan();","        return hasOwn.call(this.bindings, name);","    };","","    Sp.declaresType = function(name) {","        this.scan();","        return hasOwn.call(this.types, name);","    };","","    Sp.declareTemporary = function(prefix) {","        if (prefix) {","            if (!/^[a-z$_]/i.test(prefix)) {","                throw new Error(\"\");","            }","        } else {","            prefix = \"t$\";","        }","","        // Include this.depth in the name to make sure the name does not","        // collide with any variables in nested/enclosing scopes.","        prefix += this.depth.toString(36) + \"$\";","","        this.scan();","","        var index = 0;","        while (this.declares(prefix + index)) {","            ++index;","        }","","        var name = prefix + index;","        return this.bindings[name] = types.builders.identifier(name);","    };","","    Sp.injectTemporary = function(identifier, init) {","        identifier || (identifier = this.declareTemporary());","","        var bodyPath = this.path.get(\"body\");","        if (namedTypes.BlockStatement.check(bodyPath.value)) {","            bodyPath = bodyPath.get(\"body\");","        }","","        bodyPath.unshift(","          b.variableDeclaration(","            \"var\",","            [b.variableDeclarator(identifier, init || null)]","          )","        );","","        return identifier;","    };","","    Sp.scan = function(force) {","        if (force || !this.didScan) {","            for (var name in this.bindings) {","                // Empty out this.bindings, just in cases.","                delete this.bindings[name];","            }","            scanScope(this.path, this.bindings, this.types);","            this.didScan = true;","        }","    };","","    Sp.getBindings = function () {","        this.scan();","        return this.bindings;","    };","","    Sp.getTypes = function () {","        this.scan();","        return this.types;","    };","","    function scanScope(path, bindings, scopeTypes) {","        var node = path.value;","        ScopeType.assert(node);","","        if (namedTypes.CatchClause.check(node)) {","            // A catch clause establishes a new scope but the only variable","            // bound in that scope is the catch parameter. Any other","            // declarations create bindings in the outer scope.","            addPattern(path.get(\"param\"), bindings);","","        } else {","            recursiveScanScope(path, bindings, scopeTypes);","        }","    }","","    function recursiveScanScope(path, bindings, scopeTypes) {","        var node = path.value;","","        if (path.parent &&","          namedTypes.FunctionExpression.check(path.parent.node) &&","          path.parent.node.id) {","            addPattern(path.parent.get(\"id\"), bindings);","        }","","        if (!node) {","            // None of the remaining cases matter if node is falsy.","","        } else if (isArray.check(node)) {","            path.each(function(childPath) {","                recursiveScanChild(childPath, bindings, scopeTypes);","            });","","        } else if (namedTypes.Function.check(node)) {","            path.get(\"params\").each(function(paramPath) {","                addPattern(paramPath, bindings);","            });","","            recursiveScanChild(path.get(\"body\"), bindings, scopeTypes);","","        } else if (namedTypes.TypeAlias && namedTypes.TypeAlias.check(node)) {","            addTypePattern(path.get(\"id\"), scopeTypes);","","        } else if (namedTypes.VariableDeclarator.check(node)) {","            addPattern(path.get(\"id\"), bindings);","            recursiveScanChild(path.get(\"init\"), bindings, scopeTypes);","","        } else if (node.type === \"ImportSpecifier\" ||","          node.type === \"ImportNamespaceSpecifier\" ||","          node.type === \"ImportDefaultSpecifier\") {","            addPattern(","              // Esprima used to use the .name field to refer to the local","              // binding identifier for ImportSpecifier nodes, but .id for","              // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.","              // ESTree/Acorn/ESpree use .local for all three node types.","              path.get(node.local ? \"local\" :","                node.name ? \"name\" : \"id\"),","              bindings","            );","","        } else if (Node.check(node) && !Expression.check(node)) {","            types.eachField(node, function(name, child) {","                var childPath = path.get(name);","                if (!pathHasValue(childPath, child)) {","                    throw new Error(\"\");","                }","                recursiveScanChild(childPath, bindings, scopeTypes);","            });","        }","    }","","    function pathHasValue(path, value) {","        if (path.value === value) {","            return true;","        }","","        // Empty arrays are probably produced by defaults.emptyArray, in which","        // case is makes sense to regard them as equivalent, if not ===.","        if (Array.isArray(path.value) &&","          path.value.length === 0 &&","          Array.isArray(value) &&","          value.length === 0) {","            return true;","        }","","        return false;","    }","","    function recursiveScanChild(path, bindings, scopeTypes) {","        var node = path.value;","","        if (!node || Expression.check(node)) {","            // Ignore falsy values and Expressions.","","        } else if (namedTypes.FunctionDeclaration.check(node) &&","                   node.id !== null) {","            addPattern(path.get(\"id\"), bindings);","","        } else if (namedTypes.ClassDeclaration &&","          namedTypes.ClassDeclaration.check(node)) {","            addPattern(path.get(\"id\"), bindings);","","        } else if (ScopeType.check(node)) {","            if (namedTypes.CatchClause.check(node)) {","                var catchParamName = node.param.name;","                var hadBinding = hasOwn.call(bindings, catchParamName);","","                // Any declarations that occur inside the catch body that do","                // not have the same name as the catch parameter should count","                // as bindings in the outer scope.","                recursiveScanScope(path.get(\"body\"), bindings, scopeTypes);","","                // If a new binding matching the catch parameter name was","                // created while scanning the catch body, ignore it because it","                // actually refers to the catch parameter and not the outer","                // scope that we're currently scanning.","                if (!hadBinding) {","                    delete bindings[catchParamName];","                }","            }","","        } else {","            recursiveScanScope(path, bindings, scopeTypes);","        }","    }","","    function addPattern(patternPath, bindings) {","        var pattern = patternPath.value;","        namedTypes.Pattern.assert(pattern);","","        if (namedTypes.Identifier.check(pattern)) {","            if (hasOwn.call(bindings, pattern.name)) {","                bindings[pattern.name].push(patternPath);","            } else {","                bindings[pattern.name] = [patternPath];","            }","","        } else if (namedTypes.ObjectPattern &&","          namedTypes.ObjectPattern.check(pattern)) {","            patternPath.get('properties').each(function(propertyPath) {","                var property = propertyPath.value;","                if (namedTypes.Pattern.check(property)) {","                    addPattern(propertyPath, bindings);","                } else  if (namedTypes.Property.check(property)) {","                    addPattern(propertyPath.get('value'), bindings);","                } else if (namedTypes.SpreadProperty &&","                  namedTypes.SpreadProperty.check(property)) {","                    addPattern(propertyPath.get('argument'), bindings);","                }","            });","","        } else if (namedTypes.ArrayPattern &&","          namedTypes.ArrayPattern.check(pattern)) {","            patternPath.get('elements').each(function(elementPath) {","                var element = elementPath.value;","                if (namedTypes.Pattern.check(element)) {","                    addPattern(elementPath, bindings);","                } else if (namedTypes.SpreadElement &&","                  namedTypes.SpreadElement.check(element)) {","                    addPattern(elementPath.get(\"argument\"), bindings);","                }","            });","","        } else if (namedTypes.PropertyPattern &&","          namedTypes.PropertyPattern.check(pattern)) {","            addPattern(patternPath.get('pattern'), bindings);","","        } else if ((namedTypes.SpreadElementPattern &&","          namedTypes.SpreadElementPattern.check(pattern)) ||","          (namedTypes.SpreadPropertyPattern &&","          namedTypes.SpreadPropertyPattern.check(pattern))) {","            addPattern(patternPath.get('argument'), bindings);","        }","    }","","    function addTypePattern(patternPath, types) {","        var pattern = patternPath.value;","        namedTypes.Pattern.assert(pattern);","","        if (namedTypes.Identifier.check(pattern)) {","            if (hasOwn.call(types, pattern.name)) {","                types[pattern.name].push(patternPath);","            } else {","                types[pattern.name] = [patternPath];","            }","","        }","    }","","    Sp.lookup = function(name) {","        for (var scope = this; scope; scope = scope.parent)","            if (scope.declares(name))","                break;","        return scope;","    };","","    Sp.lookupType = function(name) {","        for (var scope = this; scope; scope = scope.parent)","            if (scope.declaresType(name))","                break;","        return scope;","    };","","    Sp.getGlobalScope = function() {","        var scope = this;","        while (!scope.isGlobal)","            scope = scope.parent;","        return scope;","    };","","    return Scope;","};",""],"l":{"1":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"13":0,"14":0,"16":0,"17":0,"19":0,"21":0,"23":0,"24":0,"25":0,"27":0,"29":0,"30":0,"33":0,"44":1,"57":1,"59":1,"60":0,"63":1,"66":1,"68":1,"69":0,"70":0,"73":1,"74":0,"75":0,"78":1,"79":0,"80":0,"81":0,"84":0,"89":0,"91":0,"93":0,"94":0,"95":0,"98":0,"99":0,"102":1,"103":0,"105":0,"106":0,"107":0,"110":0,"117":0,"120":1,"121":0,"122":0,"124":0,"126":0,"127":0,"131":1,"132":0,"133":0,"136":1,"137":0,"138":0,"141":1,"142":0,"143":0,"145":0,"149":0,"152":0,"156":1,"157":0,"159":0,"162":0,"165":0,"168":0,"169":0,"170":0,"173":0,"174":0,"175":0,"178":0,"180":0,"181":0,"183":0,"184":0,"185":0,"187":0,"190":0,"200":0,"201":0,"202":0,"203":0,"204":0,"206":0,"211":1,"212":0,"213":0,"218":0,"222":0,"225":0,"228":1,"229":0,"231":0,"234":0,"236":0,"238":0,"240":0,"242":0,"243":0,"244":0,"245":0,"250":0,"256":0,"257":0,"262":0,"266":1,"267":0,"268":0,"270":0,"271":0,"272":0,"274":0,"277":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"287":0,"291":0,"293":0,"294":0,"295":0,"296":0,"297":0,"299":0,"303":0,"305":0,"307":0,"311":0,"315":1,"316":0,"317":0,"319":0,"320":0,"321":0,"323":0,"329":1,"330":0,"331":0,"332":0,"333":0,"336":1,"337":0,"338":0,"339":0,"340":0,"343":1,"344":0,"345":0,"346":0,"347":0,"350":1}},"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/path-visitor.js":{"path":"/home/travis/build/npmtest/node-npmtest-ast-types/node_modules/ast-types/lib/path-visitor.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":1,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":1,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":1,"87":1,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":1,"123":0,"124":0,"125":0,"126":1,"127":0,"128":0,"129":0,"130":0,"131":1,"132":0,"133":1,"134":0,"135":1,"136":1,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":1,"154":1,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":1,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":1,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":1,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":1,"197":0,"198":1,"199":0,"200":0,"201":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"fnMap":{"1":{"name":"(anonymous_1)","line":3,"loc":{"start":{"line":3,"column":17},"end":{"line":3,"column":33}}},"2":{"name":"PathVisitor","line":12,"loc":{"start":{"line":12,"column":4},"end":{"line":12,"column":27}}},"3":{"name":"computeMethodNameTable","line":34,"loc":{"start":{"line":34,"column":4},"end":{"line":34,"column":45}}},"4":{"name":"fromMethodsObject","line":59,"loc":{"start":{"line":59,"column":36},"end":{"line":59,"column":72}}},"5":{"name":"Visitor","line":69,"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":27}}},"6":{"name":"extend","line":90,"loc":{"start":{"line":90,"column":4},"end":{"line":90,"column":36}}},"7":{"name":"visit","line":100,"loc":{"start":{"line":100,"column":24},"end":{"line":100,"column":54}}},"8":{"name":"(anonymous_8)","line":106,"loc":{"start":{"line":106,"column":16},"end":{"line":106,"column":28}}},"9":{"name":"AbortRequest","line":154,"loc":{"start":{"line":154,"column":23},"end":{"line":154,"column":47}}},"10":{"name":"(anonymous_10)","line":155,"loc":{"start":{"line":155,"column":16},"end":{"line":155,"column":28}}},"11":{"name":"(anonymous_11)","line":163,"loc":{"start":{"line":163,"column":25},"end":{"line":163,"column":37}}},"12":{"name":"(anonymous_12)","line":170,"loc":{"start":{"line":170,"column":16},"end":{"line":170,"column":59}}},"13":{"name":"(anonymous_13)","line":174,"loc":{"start":{"line":174,"column":28},"end":{"line":174,"column":44}}},"14":{"name":"visitChildren","line":208,"loc":{"start":{"line":208,"column":4},"end":{"line":208,"column":42}}},"15":{"name":"(anonymous_15)","line":253,"loc":{"start":{"line":253,"column":25},"end":{"line":253,"column":41}}},"16":{"name":"(anonymous_16)","line":260,"loc":{"start":{"line":260,"column":25},"end":{"line":260,"column":44}}},"17":{"name":"(anonymous_17)","line":268,"loc":{"start":{"line":268,"column":24},"end":{"line":268,"column":36}}},"18":{"name":"(anonymous_18)","line":272,"loc":{"start":{"line":272,"column":28},"end":{"line":272,"column":40}}},"19":{"name":"makeContextConstructor","line":276,"loc":{"start":{"line":276,"column":4},"end":{"line":276,"column":45}}},"20":{"name":"Context","line":277,"loc":{"start":{"line":277,"column":8},"end":{"line":277,"column":31}}},"21":{"name":"reset","line":321,"loc":{"start":{"line":321,"column":6},"end":{"line":321,"column":27}}},"22":{"name":"invokeVisitorMethod","line":336,"loc":{"start":{"line":336,"column":6},"end":{"line":336,"column":47}}},"23":{"name":"traverse","line":375,"loc":{"start":{"line":375,"column":6},"end":{"line":375,"column":42}}},"24":{"name":"visit","line":394,"loc":{"start":{"line":394,"column":6},"end":{"line":394,"column":39}}},"25":{"name":"reportChanged","line":412,"loc":{"start":{"line":412,"column":46},"end":{"line":412,"column":71}}},"26":{"name":"abort","line":416,"loc":{"start":{"line":416,"column":38},"end":{"line":416,"column":55}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":45}},"2":{"start":{"line":3,"column":0},"end":{"line":422,"column":2}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":45}},"4":{"start":{"line":5,"column":4},"end":{"line":5,"column":52}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":47}},"6":{"start":{"line":7,"column":4},"end":{"line":7,"column":43}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":45}},"8":{"start":{"line":9,"column":4},"end":{"line":9,"column":49}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":18}},"10":{"start":{"line":12,"column":4},"end":{"line":32,"column":5}},"11":{"start":{"line":13,"column":8},"end":{"line":17,"column":9}},"12":{"start":{"line":14,"column":12},"end":{"line":16,"column":14}},"13":{"start":{"line":20,"column":8},"end":{"line":20,"column":40}},"14":{"start":{"line":22,"column":8},"end":{"line":22,"column":61}},"15":{"start":{"line":23,"column":8},"end":{"line":25,"column":53}},"16":{"start":{"line":27,"column":8},"end":{"line":27,"column":52}},"17":{"start":{"line":30,"column":8},"end":{"line":30,"column":31}},"18":{"start":{"line":31,"column":8},"end":{"line":31,"column":37}},"19":{"start":{"line":34,"column":4},"end":{"line":57,"column":5}},"20":{"start":{"line":35,"column":8},"end":{"line":35,"column":44}},"21":{"start":{"line":37,"column":8},"end":{"line":41,"column":9}},"22":{"start":{"line":38,"column":12},"end":{"line":40,"column":13}},"23":{"start":{"line":39,"column":16},"end":{"line":39,"column":67}},"24":{"start":{"line":43,"column":8},"end":{"line":43,"column":74}},"25":{"start":{"line":44,"column":8},"end":{"line":44,"column":50}},"26":{"start":{"line":46,"column":8},"end":{"line":46,"column":52}},"27":{"start":{"line":47,"column":8},"end":{"line":47,"column":45}},"28":{"start":{"line":48,"column":8},"end":{"line":54,"column":9}},"29":{"start":{"line":49,"column":12},"end":{"line":49,"column":40}},"30":{"start":{"line":50,"column":12},"end":{"line":50,"column":60}},"31":{"start":{"line":51,"column":12},"end":{"line":53,"column":13}},"32":{"start":{"line":52,"column":16},"end":{"line":52,"column":55}},"33":{"start":{"line":56,"column":8},"end":{"line":56,"column":31}},"34":{"start":{"line":59,"column":4},"end":{"line":88,"column":6}},"35":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"36":{"start":{"line":61,"column":12},"end":{"line":61,"column":27}},"37":{"start":{"line":64,"column":8},"end":{"line":67,"column":9}},"38":{"start":{"line":66,"column":12},"end":{"line":66,"column":35}},"39":{"start":{"line":69,"column":8},"end":{"line":76,"column":9}},"40":{"start":{"line":70,"column":12},"end":{"line":74,"column":13}},"41":{"start":{"line":71,"column":16},"end":{"line":73,"column":18}},"42":{"start":{"line":75,"column":12},"end":{"line":75,"column":35}},"43":{"start":{"line":78,"column":8},"end":{"line":78,"column":56}},"44":{"start":{"line":79,"column":8},"end":{"line":79,"column":33}},"45":{"start":{"line":81,"column":8},"end":{"line":81,"column":28}},"46":{"start":{"line":82,"column":8},"end":{"line":82,"column":37}},"47":{"start":{"line":84,"column":8},"end":{"line":84,"column":53}},"48":{"start":{"line":85,"column":8},"end":{"line":85,"column":41}},"49":{"start":{"line":87,"column":8},"end":{"line":87,"column":27}},"50":{"start":{"line":90,"column":4},"end":{"line":98,"column":5}},"51":{"start":{"line":91,"column":8},"end":{"line":95,"column":9}},"52":{"start":{"line":92,"column":12},"end":{"line":94,"column":13}},"53":{"start":{"line":93,"column":16},"end":{"line":93,"column":52}},"54":{"start":{"line":97,"column":8},"end":{"line":97,"column":22}},"55":{"start":{"line":100,"column":4},"end":{"line":102,"column":6}},"56":{"start":{"line":101,"column":8},"end":{"line":101,"column":66}},"57":{"start":{"line":104,"column":4},"end":{"line":104,"column":36}},"58":{"start":{"line":106,"column":4},"end":{"line":152,"column":6}},"59":{"start":{"line":107,"column":8},"end":{"line":112,"column":9}},"60":{"start":{"line":108,"column":12},"end":{"line":111,"column":14}},"61":{"start":{"line":115,"column":8},"end":{"line":115,"column":30}},"62":{"start":{"line":116,"column":8},"end":{"line":116,"column":37}},"63":{"start":{"line":117,"column":8},"end":{"line":117,"column":37}},"64":{"start":{"line":119,"column":8},"end":{"line":119,"column":36}},"65":{"start":{"line":120,"column":8},"end":{"line":120,"column":34}},"66":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"67":{"start":{"line":122,"column":12},"end":{"line":122,"column":35}},"68":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"69":{"start":{"line":126,"column":12},"end":{"line":126,"column":64}},"70":{"start":{"line":130,"column":8},"end":{"line":130,"column":37}},"71":{"start":{"line":132,"column":8},"end":{"line":149,"column":9}},"72":{"start":{"line":133,"column":12},"end":{"line":133,"column":55}},"73":{"start":{"line":134,"column":12},"end":{"line":134,"column":35}},"74":{"start":{"line":136,"column":12},"end":{"line":136,"column":35}},"75":{"start":{"line":138,"column":12},"end":{"line":148,"column":13}},"76":{"start":{"line":147,"column":16},"end":{"line":147,"column":37}},"77":{"start":{"line":151,"column":8},"end":{"line":151,"column":20}},"78":{"start":{"line":154,"column":4},"end":{"line":154,"column":50}},"79":{"start":{"line":155,"column":4},"end":{"line":168,"column":6}},"80":{"start":{"line":156,"column":8},"end":{"line":156,"column":27}},"81":{"start":{"line":157,"column":8},"end":{"line":157,"column":39}},"82":{"start":{"line":158,"column":8},"end":{"line":158,"column":49}},"83":{"start":{"line":163,"column":8},"end":{"line":165,"column":10}},"84":{"start":{"line":164,"column":12},"end":{"line":164,"column":44}},"85":{"start":{"line":167,"column":8},"end":{"line":167,"column":22}},"86":{"start":{"line":170,"column":4},"end":{"line":172,"column":6}},"87":{"start":{"line":174,"column":4},"end":{"line":206,"column":6}},"88":{"start":{"line":175,"column":8},"end":{"line":180,"column":9}},"89":{"start":{"line":179,"column":12},"end":{"line":179,"column":56}},"90":{"start":{"line":182,"column":8},"end":{"line":184,"column":9}},"91":{"start":{"line":183,"column":12},"end":{"line":183,"column":32}},"92":{"start":{"line":186,"column":8},"end":{"line":186,"column":31}},"93":{"start":{"line":188,"column":8},"end":{"line":191,"column":44}},"94":{"start":{"line":193,"column":8},"end":{"line":205,"column":9}},"95":{"start":{"line":194,"column":12},"end":{"line":194,"column":52}},"96":{"start":{"line":195,"column":12},"end":{"line":199,"column":13}},"97":{"start":{"line":196,"column":16},"end":{"line":196,"column":63}},"98":{"start":{"line":198,"column":16},"end":{"line":198,"column":45}},"99":{"start":{"line":204,"column":12},"end":{"line":204,"column":45}},"100":{"start":{"line":208,"column":4},"end":{"line":251,"column":5}},"101":{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},"102":{"start":{"line":210,"column":12},"end":{"line":210,"column":32}},"103":{"start":{"line":212,"column":8},"end":{"line":214,"column":9}},"104":{"start":{"line":213,"column":12},"end":{"line":213,"column":32}},"105":{"start":{"line":216,"column":8},"end":{"line":216,"column":31}},"106":{"start":{"line":218,"column":8},"end":{"line":248,"column":9}},"107":{"start":{"line":219,"column":12},"end":{"line":219,"column":58}},"108":{"start":{"line":220,"column":15},"end":{"line":248,"column":9}},"109":{"start":{"line":223,"column":12},"end":{"line":223,"column":56}},"110":{"start":{"line":228,"column":12},"end":{"line":232,"column":13}},"111":{"start":{"line":231,"column":16},"end":{"line":231,"column":44}},"112":{"start":{"line":234,"column":12},"end":{"line":234,"column":47}},"113":{"start":{"line":235,"column":12},"end":{"line":235,"column":32}},"114":{"start":{"line":237,"column":12},"end":{"line":243,"column":13}},"115":{"start":{"line":238,"column":16},"end":{"line":238,"column":46}},"116":{"start":{"line":239,"column":16},"end":{"line":241,"column":17}},"117":{"start":{"line":240,"column":20},"end":{"line":240,"column":77}},"118":{"start":{"line":242,"column":16},"end":{"line":242,"column":53}},"119":{"start":{"line":245,"column":12},"end":{"line":247,"column":13}},"120":{"start":{"line":246,"column":16},"end":{"line":246,"column":57}},"121":{"start":{"line":250,"column":8},"end":{"line":250,"column":26}},"122":{"start":{"line":253,"column":4},"end":{"line":258,"column":6}},"123":{"start":{"line":254,"column":8},"end":{"line":256,"column":9}},"124":{"start":{"line":255,"column":12},"end":{"line":255,"column":42}},"125":{"start":{"line":257,"column":8},"end":{"line":257,"column":60}},"126":{"start":{"line":260,"column":4},"end":{"line":266,"column":6}},"127":{"start":{"line":261,"column":8},"end":{"line":263,"column":9}},"128":{"start":{"line":262,"column":12},"end":{"line":262,"column":32}},"129":{"start":{"line":264,"column":8},"end":{"line":264,"column":49}},"130":{"start":{"line":265,"column":8},"end":{"line":265,"column":35}},"131":{"start":{"line":268,"column":4},"end":{"line":270,"column":6}},"132":{"start":{"line":269,"column":8},"end":{"line":269,"column":36}},"133":{"start":{"line":272,"column":4},"end":{"line":274,"column":6}},"134":{"start":{"line":273,"column":8},"end":{"line":273,"column":36}},"135":{"start":{"line":276,"column":4},"end":{"line":313,"column":5}},"136":{"start":{"line":277,"column":8},"end":{"line":299,"column":9}},"137":{"start":{"line":278,"column":12},"end":{"line":280,"column":13}},"138":{"start":{"line":279,"column":16},"end":{"line":279,"column":36}},"139":{"start":{"line":281,"column":12},"end":{"line":283,"column":13}},"140":{"start":{"line":282,"column":16},"end":{"line":282,"column":36}},"141":{"start":{"line":284,"column":12},"end":{"line":286,"column":13}},"142":{"start":{"line":285,"column":16},"end":{"line":285,"column":36}},"143":{"start":{"line":288,"column":12},"end":{"line":293,"column":15}},"144":{"start":{"line":295,"column":12},"end":{"line":295,"column":36}},"145":{"start":{"line":296,"column":12},"end":{"line":296,"column":43}},"146":{"start":{"line":298,"column":12},"end":{"line":298,"column":30}},"147":{"start":{"line":301,"column":8},"end":{"line":303,"column":9}},"148":{"start":{"line":302,"column":12},"end":{"line":302,"column":32}},"149":{"start":{"line":307,"column":8},"end":{"line":307,"column":60}},"150":{"start":{"line":309,"column":8},"end":{"line":309,"column":33}},"151":{"start":{"line":310,"column":8},"end":{"line":310,"column":46}},"152":{"start":{"line":312,"column":8},"end":{"line":312,"column":23}},"153":{"start":{"line":318,"column":4},"end":{"line":318,"column":56}},"154":{"start":{"line":320,"column":4},"end":{"line":333,"column":8}},"155":{"start":{"line":322,"column":10},"end":{"line":324,"column":11}},"156":{"start":{"line":323,"column":14},"end":{"line":323,"column":34}},"157":{"start":{"line":325,"column":10},"end":{"line":327,"column":11}},"158":{"start":{"line":326,"column":14},"end":{"line":326,"column":34}},"159":{"start":{"line":329,"column":10},"end":{"line":329,"column":34}},"160":{"start":{"line":330,"column":10},"end":{"line":330,"column":41}},"161":{"start":{"line":332,"column":10},"end":{"line":332,"column":22}},"162":{"start":{"line":335,"column":4},"end":{"line":372,"column":8}},"163":{"start":{"line":337,"column":10},"end":{"line":339,"column":11}},"164":{"start":{"line":338,"column":14},"end":{"line":338,"column":34}},"165":{"start":{"line":340,"column":10},"end":{"line":342,"column":11}},"166":{"start":{"line":341,"column":14},"end":{"line":341,"column":34}},"167":{"start":{"line":344,"column":10},"end":{"line":344,"column":77}},"168":{"start":{"line":346,"column":10},"end":{"line":362,"column":11}},"169":{"start":{"line":350,"column":14},"end":{"line":350,"column":46}},"170":{"start":{"line":352,"column":17},"end":{"line":362,"column":11}},"171":{"start":{"line":355,"column":14},"end":{"line":355,"column":69}},"172":{"start":{"line":357,"column":14},"end":{"line":361,"column":15}},"173":{"start":{"line":360,"column":18},"end":{"line":360,"column":50}},"174":{"start":{"line":364,"column":10},"end":{"line":368,"column":11}},"175":{"start":{"line":365,"column":14},"end":{"line":367,"column":16}},"176":{"start":{"line":370,"column":10},"end":{"line":370,"column":38}},"177":{"start":{"line":371,"column":10},"end":{"line":371,"column":36}},"178":{"start":{"line":374,"column":4},"end":{"line":391,"column":8}},"179":{"start":{"line":376,"column":10},"end":{"line":378,"column":11}},"180":{"start":{"line":377,"column":14},"end":{"line":377,"column":34}},"181":{"start":{"line":379,"column":10},"end":{"line":381,"column":11}},"182":{"start":{"line":380,"column":14},"end":{"line":380,"column":34}},"183":{"start":{"line":382,"column":10},"end":{"line":384,"column":11}},"184":{"start":{"line":383,"column":14},"end":{"line":383,"column":34}},"185":{"start":{"line":386,"column":10},"end":{"line":386,"column":42}},"186":{"start":{"line":388,"column":10},"end":{"line":390,"column":13}},"187":{"start":{"line":393,"column":4},"end":{"line":410,"column":8}},"188":{"start":{"line":395,"column":10},"end":{"line":397,"column":11}},"189":{"start":{"line":396,"column":14},"end":{"line":396,"column":34}},"190":{"start":{"line":398,"column":10},"end":{"line":400,"column":11}},"191":{"start":{"line":399,"column":14},"end":{"line":399,"column":34}},"192":{"start":{"line":401,"column":10},"end":{"line":403,"column":11}},"193":{"start":{"line":402,"column":14},"end":{"line":402,"column":34}},"194":{"start":{"line":405,"column":10},"end":{"line":405,"column":42}},"195":{"start":{"line":407,"column":10},"end":{"line":409,"column":36}},"196":{"start":{"line":412,"column":4},"end":{"line":414,"column":6}},"197":{"start":{"line":413,"column":8},"end":{"line":413,"column":37}},"198":{"start":{"line":416,"column":4},"end":{"line":419,"column":6}},"199":{"start":{"line":417,"column":8},"end":{"line":417,"column":40}},"200":{"start":{"line":418,"column":8},"end":{"line":418,"column":29}},"201":{"start":{"line":421,"column":4},"end":{"line":421,"column":23}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":13,"column":8}},{"start":{"line":13,"column":8},"end":{"line":13,"column":8}}]},"2":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":10},"end":{"line":24,"column":53}},{"start":{"line":25,"column":10},"end":{"line":25,"column":52}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":12},"end":{"line":38,"column":12}},{"start":{"line":38,"column":12},"end":{"line":38,"column":12}}]},"4":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":12}},{"start":{"line":51,"column":12},"end":{"line":51,"column":12}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"6":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12}},{"start":{"line":70,"column":12},"end":{"line":70,"column":12}}]},"8":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":12},"end":{"line":92,"column":12}},{"start":{"line":92,"column":12},"end":{"line":92,"column":12}}]},"9":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":107,"column":8}},{"start":{"line":107,"column":8},"end":{"line":107,"column":8}}]},"10":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":8}},{"start":{"line":125,"column":8},"end":{"line":125,"column":8}}]},"11":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":12},"end":{"line":138,"column":12}},{"start":{"line":138,"column":12},"end":{"line":138,"column":12}}]},"12":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":16},"end":{"line":138,"column":28}},{"start":{"line":138,"column":32},"end":{"line":138,"column":52}}]},"13":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":8},"end":{"line":175,"column":8}},{"start":{"line":175,"column":8},"end":{"line":175,"column":8}}]},"14":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":8},"end":{"line":182,"column":8}},{"start":{"line":182,"column":8},"end":{"line":182,"column":8}}]},"15":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":25},"end":{"line":188,"column":30}},{"start":{"line":189,"column":10},"end":{"line":189,"column":35}},{"start":{"line":190,"column":10},"end":{"line":190,"column":40}},{"start":{"line":191,"column":10},"end":{"line":191,"column":43}}]},"16":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":8},"end":{"line":193,"column":8}},{"start":{"line":193,"column":8},"end":{"line":193,"column":8}}]},"17":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":8},"end":{"line":209,"column":8}},{"start":{"line":209,"column":8},"end":{"line":209,"column":8}}]},"18":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":8},"end":{"line":212,"column":8}},{"start":{"line":212,"column":8},"end":{"line":212,"column":8}}]},"19":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":8},"end":{"line":218,"column":8}},{"start":{"line":218,"column":8},"end":{"line":218,"column":8}}]},"20":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":15},"end":{"line":220,"column":15}},{"start":{"line":220,"column":15},"end":{"line":220,"column":15}}]},"21":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":12},"end":{"line":228,"column":12}},{"start":{"line":228,"column":12},"end":{"line":228,"column":12}}]},"22":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":16},"end":{"line":228,"column":44}},{"start":{"line":229,"column":14},"end":{"line":229,"column":28}},{"start":{"line":230,"column":14},"end":{"line":230,"column":48}}]},"23":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":16},"end":{"line":239,"column":16}},{"start":{"line":239,"column":16},"end":{"line":239,"column":16}}]},"24":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":8},"end":{"line":254,"column":8}},{"start":{"line":254,"column":8},"end":{"line":254,"column":8}}]},"25":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":8},"end":{"line":261,"column":8}},{"start":{"line":261,"column":8},"end":{"line":261,"column":8}}]},"26":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":12},"end":{"line":278,"column":12}},{"start":{"line":278,"column":12},"end":{"line":278,"column":12}}]},"27":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":12},"end":{"line":281,"column":12}},{"start":{"line":281,"column":12},"end":{"line":281,"column":12}}]},"28":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":12},"end":{"line":284,"column":12}},{"start":{"line":284,"column":12},"end":{"line":284,"column":12}}]},"29":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":8},"end":{"line":301,"column":8}},{"start":{"line":301,"column":8},"end":{"line":301,"column":8}}]},"30":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":10},"end":{"line":322,"column":10}},{"start":{"line":322,"column":10},"end":{"line":322,"column":10}}]},"31":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":10},"end":{"line":325,"column":10}},{"start":{"line":325,"column":10},"end":{"line":325,"column":10}}]},"32":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":10},"end":{"line":337,"column":10}},{"start":{"line":337,"column":10},"end":{"line":337,"column":10}}]},"33":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":10},"end":{"line":340,"column":10}},{"start":{"line":340,"column":10},"end":{"line":340,"column":10}}]},"34":{"line":346,"type":"if","locations":[{"start":{"line":346,"column":10},"end":{"line":346,"column":10}},{"start":{"line":346,"column":10},"end":{"line":346,"column":10}}]},"35":{"line":352,"type":"if","locations":[{"start":{"line":352,"column":17},"end":{"line":352,"column":17}},{"start":{"line":352,"column":17},"end":{"line":352,"column":17}}]},"36":{"line":357,"type":"if","locations":[{"start":{"line":357,"column":14},"end":{"line":357,"column":14}},{"start":{"line":357,"column":14},"end":{"line":357,"column":14}}]},"37":{"line":364,"type":"if","locations":[{"start":{"line":364,"column":10},"end":{"line":364,"column":10}},{"start":{"line":364,"column":10},"end":{"line":364,"column":10}}]},"38":{"line":371,"type":"binary-expr","locations":[{"start":{"line":371,"column":17},"end":{"line":371,"column":21}},{"start":{"line":371,"column":25},"end":{"line":371,"column":35}}]},"39":{"line":376,"type":"if","locations":[{"start":{"line":376,"column":10},"end":{"line":376,"column":10}},{"start":{"line":376,"column":10},"end":{"line":376,"column":10}}]},"40":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":10},"end":{"line":379,"column":10}},{"start":{"line":379,"column":10},"end":{"line":379,"column":10}}]},"41":{"line":382,"type":"if","locations":[{"start":{"line":382,"column":10},"end":{"line":382,"column":10}},{"start":{"line":382,"column":10},"end":{"line":382,"column":10}}]},"42":{"line":389,"type":"binary-expr","locations":[{"start":{"line":389,"column":12},"end":{"line":389,"column":22}},{"start":{"line":389,"column":26},"end":{"line":389,"column":38}}]},"43":{"line":395,"type":"if","locations":[{"start":{"line":395,"column":10},"end":{"line":395,"column":10}},{"start":{"line":395,"column":10},"end":{"line":395,"column":10}}]},"44":{"line":398,"type":"if","locations":[{"start":{"line":398,"column":10},"end":{"line":398,"column":10}},{"start":{"line":398,"column":10},"end":{"line":398,"column":10}}]},"45":{"line":401,"type":"if","locations":[{"start":{"line":401,"column":10},"end":{"line":401,"column":10}},{"start":{"line":401,"column":10},"end":{"line":401,"column":10}}]},"46":{"line":408,"type":"binary-expr","locations":[{"start":{"line":408,"column":12},"end":{"line":408,"column":22}},{"start":{"line":408,"column":26},"end":{"line":408,"column":38}}]}},"code":["var hasOwn = Object.prototype.hasOwnProperty;","","module.exports = function (fork) {","    var types = fork.use(require(\"./types\"));","    var NodePath = fork.use(require(\"./node-path\"));","    var Printable = types.namedTypes.Printable;","    var isArray = types.builtInTypes.array;","    var isObject = types.builtInTypes.object;","    var isFunction = types.builtInTypes.function;","    var undefined;","","    function PathVisitor() {","        if (!(this instanceof PathVisitor)) {","            throw new Error(","              \"PathVisitor constructor cannot be invoked without 'new'\"","            );","        }","","        // Permanent state.","        this._reusableContextStack = [];","","        this._methodNameTable = computeMethodNameTable(this);","        this._shouldVisitComments =","          hasOwn.call(this._methodNameTable, \"Block\") ||","          hasOwn.call(this._methodNameTable, \"Line\");","","        this.Context = makeContextConstructor(this);","","        // State reset every time PathVisitor.prototype.visit is called.","        this._visiting = false;","        this._changeReported = false;","    }","","    function computeMethodNameTable(visitor) {","        var typeNames = Object.create(null);","","        for (var methodName in visitor) {","            if (/^visit[A-Z]/.test(methodName)) {","                typeNames[methodName.slice(\"visit\".length)] = true;","            }","        }","","        var supertypeTable = types.computeSupertypeLookupTable(typeNames);","        var methodNameTable = Object.create(null);","","        var typeNames = Object.keys(supertypeTable);","        var typeNameCount = typeNames.length;","        for (var i = 0; i < typeNameCount; ++i) {","            var typeName = typeNames[i];","            methodName = \"visit\" + supertypeTable[typeName];","            if (isFunction.check(visitor[methodName])) {","                methodNameTable[typeName] = methodName;","            }","        }","","        return methodNameTable;","    }","","    PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {","        if (methods instanceof PathVisitor) {","            return methods;","        }","","        if (!isObject.check(methods)) {","            // An empty visitor?","            return new PathVisitor;","        }","","        function Visitor() {","            if (!(this instanceof Visitor)) {","                throw new Error(","                  \"Visitor constructor cannot be invoked without 'new'\"","                );","            }","            PathVisitor.call(this);","        }","","        var Vp = Visitor.prototype = Object.create(PVp);","        Vp.constructor = Visitor;","","        extend(Vp, methods);","        extend(Visitor, PathVisitor);","","        isFunction.assert(Visitor.fromMethodsObject);","        isFunction.assert(Visitor.visit);","","        return new Visitor;","    };","","    function extend(target, source) {","        for (var property in source) {","            if (hasOwn.call(source, property)) {","                target[property] = source[property];","            }","        }","","        return target;","    }","","    PathVisitor.visit = function visit(node, methods) {","        return PathVisitor.fromMethodsObject(methods).visit(node);","    };","","    var PVp = PathVisitor.prototype;","","    PVp.visit = function () {","        if (this._visiting) {","            throw new Error(","              \"Recursively calling visitor.visit(path) resets visitor state. \" +","              \"Try this.visit(path) or this.traverse(path) instead.\"","            );","        }","","        // Private state that needs to be reset before every traversal.","        this._visiting = true;","        this._changeReported = false;","        this._abortRequested = false;","","        var argc = arguments.length;","        var args = new Array(argc)","        for (var i = 0; i < argc; ++i) {","            args[i] = arguments[i];","        }","","        if (!(args[0] instanceof NodePath)) {","            args[0] = new NodePath({root: args[0]}).get(\"root\");","        }","","        // Called with the same arguments as .visit.","        this.reset.apply(this, args);","","        try {","            var root = this.visitWithoutReset(args[0]);","            var didNotThrow = true;","        } finally {","            this._visiting = false;","","            if (!didNotThrow && this._abortRequested) {","                // If this.visitWithoutReset threw an exception and","                // this._abortRequested was set to true, return the root of","                // the AST instead of letting the exception propagate, so that","                // client code does not have to provide a try-catch block to","                // intercept the AbortRequest exception.  Other kinds of","                // exceptions will propagate without being intercepted and","                // rethrown by a catch block, so their stacks will accurately","                // reflect the original throwing context.","                return args[0].value;","            }","        }","","        return root;","    };","","    PVp.AbortRequest = function AbortRequest() {};","    PVp.abort = function () {","        var visitor = this;","        visitor._abortRequested = true;","        var request = new visitor.AbortRequest();","","        // If you decide to catch this exception and stop it from propagating,","        // make sure to call its cancel method to avoid silencing other","        // exceptions that might be thrown later in the traversal.","        request.cancel = function () {","            visitor._abortRequested = false;","        };","","        throw request;","    };","","    PVp.reset = function (path/*, additional arguments */) {","        // Empty stub; may be reassigned or overridden by subclasses.","    };","","    PVp.visitWithoutReset = function (path) {","        if (this instanceof this.Context) {","            // Since this.Context.prototype === this, there's a chance we","            // might accidentally call context.visitWithoutReset. If that","            // happens, re-invoke the method against context.visitor.","            return this.visitor.visitWithoutReset(path);","        }","","        if (!(path instanceof NodePath)) {","            throw new Error(\"\");","        }","","        var value = path.value;","","        var methodName = value &&","          typeof value === \"object\" &&","          typeof value.type === \"string\" &&","          this._methodNameTable[value.type];","","        if (methodName) {","            var context = this.acquireContext(path);","            try {","                return context.invokeVisitorMethod(methodName);","            } finally {","                this.releaseContext(context);","            }","","        } else {","            // If there was no visitor method to call, visit the children of","            // this node generically.","            return visitChildren(path, this);","        }","    };","","    function visitChildren(path, visitor) {","        if (!(path instanceof NodePath)) {","            throw new Error(\"\");","        }","        if (!(visitor instanceof PathVisitor)) {","            throw new Error(\"\");","        }","","        var value = path.value;","","        if (isArray.check(value)) {","            path.each(visitor.visitWithoutReset, visitor);","        } else if (!isObject.check(value)) {","            // No children to visit.","        } else {","            var childNames = types.getFieldNames(value);","","            // The .comments field of the Node type is hidden, so we only","            // visit it if the visitor defines visitBlock or visitLine, and","            // value.comments is defined.","            if (visitor._shouldVisitComments &&","              value.comments &&","              childNames.indexOf(\"comments\") < 0) {","                childNames.push(\"comments\");","            }","","            var childCount = childNames.length;","            var childPaths = [];","","            for (var i = 0; i < childCount; ++i) {","                var childName = childNames[i];","                if (!hasOwn.call(value, childName)) {","                    value[childName] = types.getFieldValue(value, childName);","                }","                childPaths.push(path.get(childName));","            }","","            for (var i = 0; i < childCount; ++i) {","                visitor.visitWithoutReset(childPaths[i]);","            }","        }","","        return path.value;","    }","","    PVp.acquireContext = function (path) {","        if (this._reusableContextStack.length === 0) {","            return new this.Context(path);","        }","        return this._reusableContextStack.pop().reset(path);","    };","","    PVp.releaseContext = function (context) {","        if (!(context instanceof this.Context)) {","            throw new Error(\"\");","        }","        this._reusableContextStack.push(context);","        context.currentPath = null;","    };","","    PVp.reportChanged = function () {","        this._changeReported = true;","    };","","    PVp.wasChangeReported = function () {","        return this._changeReported;","    };","","    function makeContextConstructor(visitor) {","        function Context(path) {","            if (!(this instanceof Context)) {","                throw new Error(\"\");","            }","            if (!(this instanceof PathVisitor)) {","                throw new Error(\"\");","            }","            if (!(path instanceof NodePath)) {","                throw new Error(\"\");","            }","","            Object.defineProperty(this, \"visitor\", {","                value: visitor,","                writable: false,","                enumerable: true,","                configurable: false","            });","","            this.currentPath = path;","            this.needToCallTraverse = true;","","            Object.seal(this);","        }","","        if (!(visitor instanceof PathVisitor)) {","            throw new Error(\"\");","        }","","        // Note that the visitor object is the prototype of Context.prototype,","        // so all visitor methods are inherited by context objects.","        var Cp = Context.prototype = Object.create(visitor);","","        Cp.constructor = Context;","        extend(Cp, sharedContextProtoMethods);","","        return Context;","    }","","// Every PathVisitor has a different this.Context constructor and","// this.Context.prototype object, but those prototypes can all use the","// same reset, invokeVisitorMethod, and traverse function objects.","    var sharedContextProtoMethods = Object.create(null);","","    sharedContextProtoMethods.reset =","      function reset(path) {","          if (!(this instanceof this.Context)) {","              throw new Error(\"\");","          }","          if (!(path instanceof NodePath)) {","              throw new Error(\"\");","          }","","          this.currentPath = path;","          this.needToCallTraverse = true;","","          return this;","      };","","    sharedContextProtoMethods.invokeVisitorMethod =","      function invokeVisitorMethod(methodName) {","          if (!(this instanceof this.Context)) {","              throw new Error(\"\");","          }","          if (!(this.currentPath instanceof NodePath)) {","              throw new Error(\"\");","          }","","          var result = this.visitor[methodName].call(this, this.currentPath);","","          if (result === false) {","              // Visitor methods return false to indicate that they have handled","              // their own traversal needs, and we should not complain if","              // this.needToCallTraverse is still true.","              this.needToCallTraverse = false;","","          } else if (result !== undefined) {","              // Any other non-undefined value returned from the visitor method","              // is interpreted as a replacement value.","              this.currentPath = this.currentPath.replace(result)[0];","","              if (this.needToCallTraverse) {","                  // If this.traverse still hasn't been called, visit the","                  // children of the replacement node.","                  this.traverse(this.currentPath);","              }","          }","","          if (this.needToCallTraverse !== false) {","              throw new Error(","                \"Must either call this.traverse or return false in \" + methodName","              );","          }","","          var path = this.currentPath;","          return path && path.value;","      };","","    sharedContextProtoMethods.traverse =","      function traverse(path, newVisitor) {","          if (!(this instanceof this.Context)) {","              throw new Error(\"\");","          }","          if (!(path instanceof NodePath)) {","              throw new Error(\"\");","          }","          if (!(this.currentPath instanceof NodePath)) {","              throw new Error(\"\");","          }","","          this.needToCallTraverse = false;","","          return visitChildren(path, PathVisitor.fromMethodsObject(","            newVisitor || this.visitor","          ));","      };","","    sharedContextProtoMethods.visit =","      function visit(path, newVisitor) {","          if (!(this instanceof this.Context)) {","              throw new Error(\"\");","          }","          if (!(path instanceof NodePath)) {","              throw new Error(\"\");","          }","          if (!(this.currentPath instanceof NodePath)) {","              throw new Error(\"\");","          }","","          this.needToCallTraverse = false;","","          return PathVisitor.fromMethodsObject(","            newVisitor || this.visitor","          ).visitWithoutReset(path);","      };","","    sharedContextProtoMethods.reportChanged = function reportChanged() {","        this.visitor.reportChanged();","    };","","    sharedContextProtoMethods.abort = function abort() {","        this.needToCallTraverse = false;","        this.visitor.abort();","    };","","    return PathVisitor;","};",""],"l":{"1":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"13":0,"14":0,"20":0,"22":0,"23":0,"27":0,"30":0,"31":0,"34":1,"35":0,"37":0,"38":0,"39":0,"43":0,"44":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"56":0,"59":1,"60":0,"61":0,"64":0,"66":0,"69":1,"70":0,"71":0,"75":0,"78":0,"79":0,"81":0,"82":0,"84":0,"85":0,"87":0,"90":1,"91":0,"92":0,"93":0,"97":0,"100":1,"101":0,"104":1,"106":1,"107":0,"108":0,"115":0,"116":0,"117":0,"119":0,"120":0,"121":0,"122":0,"125":0,"126":0,"130":0,"132":0,"133":0,"134":0,"136":0,"138":0,"147":0,"151":0,"154":1,"155":1,"156":0,"157":0,"158":0,"163":0,"164":0,"167":0,"170":1,"174":1,"175":0,"179":0,"182":0,"183":0,"186":0,"188":0,"193":0,"194":0,"195":0,"196":0,"198":0,"204":0,"208":1,"209":0,"210":0,"212":0,"213":0,"216":0,"218":0,"219":0,"220":0,"223":0,"228":0,"231":0,"234":0,"235":0,"237":0,"238":0,"239":0,"240":0,"242":0,"245":0,"246":0,"250":0,"253":1,"254":0,"255":0,"257":0,"260":1,"261":0,"262":0,"264":0,"265":0,"268":1,"269":0,"272":1,"273":0,"276":1,"277":1,"278":0,"279":0,"281":0,"282":0,"284":0,"285":0,"288":0,"295":0,"296":0,"298":0,"301":0,"302":0,"307":0,"309":0,"310":0,"312":0,"318":1,"320":1,"322":0,"323":0,"325":0,"326":0,"329":0,"330":0,"332":0,"335":1,"337":0,"338":0,"340":0,"341":0,"344":0,"346":0,"350":0,"352":0,"355":0,"357":0,"360":0,"364":0,"365":0,"370":0,"371":0,"374":1,"376":0,"377":0,"379":0,"380":0,"382":0,"383":0,"386":0,"388":0,"393":1,"395":0,"396":0,"398":0,"399":0,"401":0,"402":0,"405":0,"407":0,"412":1,"413":0,"416":1,"417":0,"418":0,"421":1}}}